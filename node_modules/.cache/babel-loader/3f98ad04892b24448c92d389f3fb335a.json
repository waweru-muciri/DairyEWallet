{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/emails/EmailInputForm.js\";\nimport React from \"react\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { Formik } from \"formik\";\nimport EmailsSelect from \"./EmailsSelect\";\nimport { commonStyles } from \"../commonStyles\";\nimport { sendEmails } from \"../../actions/actions\";\nimport ReactQuill from 'react-quill'; // ES6\n\nimport 'react-quill/dist/quill.snow.css'; // ES6\n\nimport * as Yup from \"yup\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst EmailSchema = Yup.object().shape({\n  from_user: Yup.string().required(\"From User is required\"),\n  email_subject: Yup.string().trim().required(\"Email Subject Required\"),\n  email_message: Yup.string().trim().required(\"Email Message is Required\")\n});\nconst quillEditorModules = {\n  toolbar: [[{\n    'header': [1, 2, 3, 4, 5, 6, false]\n  }, {\n    'font': []\n  }], [{\n    size: []\n  }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n    'list': 'ordered'\n  }, {\n    'list': 'bullet'\n  }, {\n    'indent': '-1'\n  }, {\n    'indent': '+1'\n  }], ['link'], ['clean']],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false\n  }\n};\n/* \n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\n\nconst quillEditorFormats = ['header', 'font', 'size', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent', 'link', 'image', 'video'];\n\nfunction getSteps() {\n  return [\"Create an email\", \"Select an email group\"];\n}\n\nexport default function HorizontalLinearStepper(props) {\n  const {\n    currentUser,\n    contactToSendEmailTo,\n    contactSource,\n    users,\n    contacts,\n    history,\n    emailTemplates,\n    handleItemSubmit\n  } = props;\n  const classes = commonStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const defaultEmailValues = {\n    from_user: currentUser.email || \"\",\n    email_subject: \"\",\n    email_message: \"\",\n    template: ''\n  }; //for the transfer list below\n\n  const [emailValues, setEmailValues] = React.useState(defaultEmailValues);\n  const [isSaving, setIsSaving] = React.useState(false);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setEmailValues(defaultEmailValues);\n    setActiveStep(0);\n  };\n\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  const submitEmailDetailsForm = emailValues => {\n    setEmailValues(emailValues);\n    handleNext();\n  };\n\n  const handleSendEmailSubmit = async emailsArray => {\n    //send the emails here\n    setIsSaving(true);\n\n    try {\n      await sendEmails(emailValues.from_user, emailValues.email_subject, emailValues.email_message, emailsArray);\n      const emailObjectToSave = {\n        email_subject: emailValues.email_subject,\n        from_user: emailValues.from_user,\n        date_sent: new Date().toDateString()\n      };\n      await handleItemSubmit(emailObjectToSave, \"communication_emails\");\n    } catch (error) {\n      console.log(\"Error during sending email => \", error);\n    }\n\n    setIsSaving(false);\n    handleNext();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fullHeightWidthContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, isSaving && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    dialogTitle: \"Sending email...\",\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 22\n    }\n  }), /*#__PURE__*/React.createElement(Stepper, {\n    activeStep: activeStep,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, steps.map((label, index) => {\n    return /*#__PURE__*/React.createElement(Step, {\n      key: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(StepLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, label));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, activeStep === steps.length ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.oneMarginTopBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, \"Email Sent...\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleReset,\n    className: classes.oneMarginRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, \"Reset\")) : activeStep === 0 ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: emailValues,\n    validationSchema: EmailSchema,\n    onSubmit: values => {\n      const email = {\n        from_user: values.from_user,\n        email_subject: values.email_subject,\n        email_message: values.email_message\n      };\n      submitEmailDetailsForm(email);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, ({\n    values,\n    handleSubmit,\n    touched,\n    setFieldValue,\n    errors,\n    handleChange,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"emailDetailsInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"stretch\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    InputLabelProps: {\n      shrink: true\n    },\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"from_user\",\n    name: \"from_user\",\n    label: \"From:\",\n    value: values.from_user,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.from_user && touched.from_user,\n    helperText: errors.from_user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    id: \"template\",\n    name: \"template\",\n    label: \"Template\",\n    value: values.template,\n    onChange: event => {\n      const selectedTemplate = emailTemplates.find(({\n        id\n      }) => id === event.target.value) || {};\n      setFieldValue('template', event.target.value);\n      setFieldValue('email_message', selectedTemplate.template_contents);\n    },\n    onBlur: handleBlur,\n    error: errors.template && touched.template,\n    helperText: errors.template,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 23\n    }\n  }, emailTemplates.map((emailTemplate, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: emailTemplate.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 27\n    }\n  }, emailTemplate.template_name)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"email_subject\",\n    name: \"email_subject\",\n    label: \"Email Subject\",\n    value: values.email_subject,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.email_subject && touched.email_subject,\n    helperText: touched.email_subject && errors.email_subject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\",\n    variant: \"body1\",\n    paragraph: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 23\n    }\n  }, \"Email Message\"), /*#__PURE__*/React.createElement(ReactQuill, {\n    className: classes.quillEditor,\n    value: values.email_message,\n    onChange: content => {\n      setFieldValue('email_message', content);\n    },\n    theme: \"snow\",\n    modules: quillEditorModules,\n    formats: quillEditorFormats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 38\n      }\n    }),\n    onClick: handleCancel,\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 25\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    form: \"emailDetailsInputForm\",\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 25\n    }\n  }, \"Next\"))))))) : activeStep === 1 ? /*#__PURE__*/React.createElement(EmailsSelect, {\n    contacts: contacts,\n    users: users,\n    handleBack: handleBack,\n    contactToSendEmailTo: contactToSendEmailTo,\n    contactSource: contactSource,\n    submitEmailSourceValues: handleSendEmailSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }) : null));\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/emails/EmailInputForm.js"],"names":["React","Stepper","Step","StepLabel","Button","Grid","TextField","Typography","MenuItem","CancelIcon","Formik","EmailsSelect","commonStyles","sendEmails","ReactQuill","Yup","CustomCircularProgress","EmailSchema","object","shape","from_user","string","required","email_subject","trim","email_message","quillEditorModules","toolbar","size","clipboard","matchVisual","quillEditorFormats","getSteps","HorizontalLinearStepper","props","currentUser","contactToSendEmailTo","contactSource","users","contacts","history","emailTemplates","handleItemSubmit","classes","activeStep","setActiveStep","useState","defaultEmailValues","email","template","emailValues","setEmailValues","isSaving","setIsSaving","steps","handleNext","prevActiveStep","handleBack","handleReset","handleCancel","goBack","submitEmailDetailsForm","handleSendEmailSubmit","emailsArray","emailObjectToSave","date_sent","Date","toDateString","error","console","log","fullHeightWidthContainer","map","label","index","length","oneMarginTopBottom","oneMarginRight","values","handleSubmit","touched","setFieldValue","errors","handleChange","handleBlur","form","shrink","event","selectedTemplate","find","id","target","value","template_contents","emailTemplate","template_name","quillEditor","content"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAOC,UAAP,MAAuB,aAAvB,C,CAAsC;;AACtC,OAAO,iCAAP,C,CAA0C;;AAC1C,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AAGA,MAAMC,WAAW,GAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,EAAAA,SAAS,EAAEL,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,uBAAtB,CAD0B;AAErCC,EAAAA,aAAa,EAAER,GAAG,CAACM,MAAJ,GAAaG,IAAb,GAAoBF,QAApB,CAA6B,wBAA7B,CAFsB;AAGrCG,EAAAA,aAAa,EAAEV,GAAG,CAACM,MAAJ,GAAaG,IAAb,GAAoBF,QAApB,CAA6B,2BAA7B;AAHsB,CAAnB,CAApB;AAMA,MAAMI,kBAAkB,GAAG;AACzBC,EAAAA,OAAO,EAAE,CACP,CAAC;AAAE,cAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB;AAAZ,GAAD,EAA0C;AAAE,YAAQ;AAAV,GAA1C,CADO,EAEP,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAFO,EAGP,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,EAAgC,QAAhC,EAA0C,YAA1C,CAHO,EAIP,CAAC;AAAE,YAAQ;AAAV,GAAD,EAAwB;AAAE,YAAQ;AAAV,GAAxB,EACA;AAAE,cAAU;AAAZ,GADA,EACoB;AAAE,cAAU;AAAZ,GADpB,CAJO,EAMP,CAAC,MAAD,CANO,EAOP,CAAC,OAAD,CAPO,CADgB;AAUzBC,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,WAAW,EAAE;AAFJ;AAVc,CAA3B;AAeA;;;;;AAIA,MAAMC,kBAAkB,GAAG,CACzB,QADyB,EACf,MADe,EACP,MADO,EAEzB,MAFyB,EAEjB,QAFiB,EAEP,WAFO,EAEM,QAFN,EAEgB,YAFhB,EAGzB,MAHyB,EAGjB,QAHiB,EAGP,QAHO,EAIzB,MAJyB,EAIjB,OAJiB,EAIR,OAJQ,CAA3B;;AAOA,SAASC,QAAT,GAAoB;AAClB,SAAO,CAAC,iBAAD,EAAoB,uBAApB,CAAP;AACD;;AAED,eAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AAErD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,oBAAf;AAAqCC,IAAAA,aAArC;AACJC,IAAAA,KADI;AACGC,IAAAA,QADH;AACaC,IAAAA,OADb;AACsBC,IAAAA,cADtB;AACsCC,IAAAA;AADtC,MAC2DR,KADjE;AAGA,QAAMS,OAAO,GAAG/B,YAAY,EAA5B;AACA,QAAM,CAACgC,UAAD,EAAaC,aAAb,IAA8B7C,KAAK,CAAC8C,QAAN,CAAe,CAAf,CAApC;AACA,QAAMC,kBAAkB,GAAG;AACzB3B,IAAAA,SAAS,EAAEe,WAAW,CAACa,KAAZ,IAAqB,EADP;AAEzBzB,IAAAA,aAAa,EAAE,EAFU;AAGzBE,IAAAA,aAAa,EAAE,EAHU;AAIzBwB,IAAAA,QAAQ,EAAE;AAJe,GAA3B,CAPqD,CAarD;;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCnD,KAAK,CAAC8C,QAAN,CAAeC,kBAAf,CAAtC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BrD,KAAK,CAAC8C,QAAN,CAAe,KAAf,CAAhC;AAEA,QAAMQ,KAAK,GAAGtB,QAAQ,EAAtB;;AAEA,QAAMuB,UAAU,GAAG,MAAM;AACvBV,IAAAA,aAAa,CAAEW,cAAD,IAAoBA,cAAc,GAAG,CAAtC,CAAb;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACvBZ,IAAAA,aAAa,CAAEW,cAAD,IAAoBA,cAAc,GAAG,CAAtC,CAAb;AACD,GAFD;;AAIA,QAAME,WAAW,GAAG,MAAM;AACxBP,IAAAA,cAAc,CAACJ,kBAAD,CAAd;AACAF,IAAAA,aAAa,CAAC,CAAD,CAAb;AACD,GAHD;;AAKA,QAAMc,YAAY,GAAG,MAAM;AACzBnB,IAAAA,OAAO,CAACoB,MAAR;AACD,GAFD;;AAIA,QAAMC,sBAAsB,GAAIX,WAAD,IAAiB;AAC9CC,IAAAA,cAAc,CAACD,WAAD,CAAd;AACAK,IAAAA,UAAU;AACX,GAHD;;AAKA,QAAMO,qBAAqB,GAAG,MAAOC,WAAP,IAAuB;AACnD;AACAV,IAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,QAAI;AACF,YAAMxC,UAAU,CAACqC,WAAW,CAAC9B,SAAb,EAAwB8B,WAAW,CAAC3B,aAApC,EAAmD2B,WAAW,CAACzB,aAA/D,EAA8EsC,WAA9E,CAAhB;AACA,YAAMC,iBAAiB,GAAG;AACxBzC,QAAAA,aAAa,EAAE2B,WAAW,CAAC3B,aADH;AAExBH,QAAAA,SAAS,EAAE8B,WAAW,CAAC9B,SAFC;AAGxB6C,QAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,YAAX;AAHa,OAA1B;AAKA,YAAMzB,gBAAgB,CAACsB,iBAAD,EAAoB,sBAApB,CAAtB;AACD,KARD,CAQE,OAAOI,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,KAA9C;AACD;;AACDf,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,UAAU;AACX,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAEZ,OAAO,CAAC4B,wBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEInB,QAAQ,iBAAK,oBAAC,sBAAD;AAAwB,IAAA,WAAW,EAAC,kBAApC;AAAuD,IAAA,IAAI,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFjB,eAIE,oBAAC,OAAD;AAAS,IAAA,UAAU,EAAER,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,KAAK,CAACkB,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,wBACE,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAED,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYA,KAAZ,CADF,CADF;AAKD,GANA,CADH,CAJF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7B,UAAU,KAAKU,KAAK,CAACqB,MAArB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEhC,OAAO,CAACiC,kBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAIE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAElB,WAAjB;AAA8B,IAAA,SAAS,EAAEf,OAAO,CAACkC,cAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,CADD,GASGjC,UAAU,KAAK,CAAf,gBACF,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,SAAS,EAAC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAEM,WADjB;AAEE,IAAA,gBAAgB,EAAEjC,WAFpB;AAGE,IAAA,QAAQ,EAAG6D,MAAD,IAAY;AACpB,YAAM9B,KAAK,GAAG;AACZ5B,QAAAA,SAAS,EAAE0D,MAAM,CAAC1D,SADN;AAEZG,QAAAA,aAAa,EAAEuD,MAAM,CAACvD,aAFV;AAGZE,QAAAA,aAAa,EAAEqD,MAAM,CAACrD;AAHV,OAAd;AAKAoC,MAAAA,sBAAsB,CAACb,KAAD,CAAtB;AACD,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYG,CAAC;AACA8B,IAAAA,MADA;AAEAC,IAAAA,YAFA;AAGAC,IAAAA,OAHA;AAIAC,IAAAA,aAJA;AAKAC,IAAAA,MALA;AAMAC,IAAAA,YANA;AAOAC,IAAAA;AAPA,GAAD,kBASC;AACE,IAAA,SAAS,EAAEzC,OAAO,CAAC0C,IADrB;AAEE,IAAA,MAAM,EAAC,MAFT;AAGE,IAAA,EAAE,EAAC,uBAHL;AAIE,IAAA,QAAQ,EAAEN,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,UAAU,EAAC,SAJb;AAKE,IAAA,SAAS,EAAC,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,eAAe,EAAE;AAAEO,MAAAA,MAAM,EAAE;AAAV,KADnB;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,EAAE,EAAC,WAJL;AAKE,IAAA,IAAI,EAAC,WALP;AAME,IAAA,KAAK,EAAC,OANR;AAOE,IAAA,KAAK,EAAER,MAAM,CAAC1D,SAPhB;AAQE,IAAA,QAAQ,EAAE+D,YARZ;AASE,IAAA,MAAM,EAAEC,UATV;AAUE,IAAA,KAAK,EAAEF,MAAM,CAAC9D,SAAP,IAAoB4D,OAAO,CAAC5D,SAVrC;AAWE,IAAA,UAAU,EAAE8D,MAAM,CAAC9D,SAXrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,eAsBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,EAAE,EAAC,UAJL;AAKE,IAAA,IAAI,EAAC,UALP;AAME,IAAA,KAAK,EAAC,UANR;AAOE,IAAA,KAAK,EAAE0D,MAAM,CAAC7B,QAPhB;AAQE,IAAA,QAAQ,EAAGsC,KAAD,IAAW;AACnB,YAAMC,gBAAgB,GAAG/C,cAAc,CAACgD,IAAf,CAAoB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKH,KAAK,CAACI,MAAN,CAAaC,KAApD,KAA8D,EAAvF;AACAX,MAAAA,aAAa,CAAC,UAAD,EAAaM,KAAK,CAACI,MAAN,CAAaC,KAA1B,CAAb;AACAX,MAAAA,aAAa,CAAC,eAAD,EAAkBO,gBAAgB,CAACK,iBAAnC,CAAb;AACD,KAZH;AAaE,IAAA,MAAM,EAAET,UAbV;AAcE,IAAA,KAAK,EAAEF,MAAM,CAACjC,QAAP,IAAmB+B,OAAO,CAAC/B,QAdpC;AAeE,IAAA,UAAU,EAAEiC,MAAM,CAACjC,QAfrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGR,cAAc,CAAC+B,GAAf,CAAmB,CAACsB,aAAD,EAAgBpB,KAAhB,kBAClB,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAsB,IAAA,KAAK,EAAEoB,aAAa,CAACJ,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,aAAa,CAACC,aADjB,CADD,CAhBH,CADF,CAtBF,eA8CE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,eAAe,EAAE;AAAET,MAAAA,MAAM,EAAE;AAAV,KAFnB;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,EAAE,EAAC,eAJL;AAKE,IAAA,IAAI,EAAC,eALP;AAME,IAAA,KAAK,EAAC,eANR;AAOE,IAAA,KAAK,EAAER,MAAM,CAACvD,aAPhB;AAQE,IAAA,QAAQ,EAAE4D,YARZ;AASE,IAAA,MAAM,EAAEC,UATV;AAUE,IAAA,KAAK,EACHF,MAAM,CAAC3D,aAAP,IAAwByD,OAAO,CAACzD,aAXpC;AAaE,IAAA,UAAU,EACRyD,OAAO,CAACzD,aAAR,IAAyB2D,MAAM,CAAC3D,aAdpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA9CF,eAiEE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,eAAlB;AAAkC,IAAA,OAAO,EAAC,OAA1C;AAAkD,IAAA,SAAS,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,oBAAC,UAAD;AACE,IAAA,SAAS,EAAEoB,OAAO,CAACqD,WADrB;AAEE,IAAA,KAAK,EAAElB,MAAM,CAACrD,aAFhB;AAGE,IAAA,QAAQ,EAAGwE,OAAD,IAAa;AACrBhB,MAAAA,aAAa,CAAC,eAAD,EAAkBgB,OAAlB,CAAb;AACD,KALH;AAME,IAAA,KAAK,EAAC,MANR;AAOE,IAAA,OAAO,EAAEvE,kBAPX;AAQE,IAAA,OAAO,EAAEK,kBARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAjEF,eA8EE,oBAAC,IAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,OAAO,EAAE,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,SAAS,eAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJb;AAKE,IAAA,OAAO,EAAE4B,YALX;AAME,IAAA,gBAAgB,MANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CALF,eAiBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,uBADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,KAAK,EAAC,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAjBF,CA9EF,CANF,CArBJ,CADF,CADE,GA2IAf,UAAU,KAAK,CAAf,gBACF,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEL,QAAxB;AAAkC,IAAA,KAAK,EAAED,KAAzC;AAAgD,IAAA,UAAU,EAAEmB,UAA5D;AACE,IAAA,oBAAoB,EAAErB,oBADxB;AAC8C,IAAA,aAAa,EAAEC,aAD7D;AAEE,IAAA,uBAAuB,EAAEyB,qBAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,GAGsD,IAxJ5D,CAbF,CADF;AA0KD","sourcesContent":["import React from \"react\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { Formik } from \"formik\";\nimport EmailsSelect from \"./EmailsSelect\";\nimport { commonStyles } from \"../commonStyles\";\nimport { sendEmails } from \"../../actions/actions\";\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css'; // ES6\nimport * as Yup from \"yup\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\n\nconst EmailSchema = Yup.object().shape({\n  from_user: Yup.string().required(\"From User is required\"),\n  email_subject: Yup.string().trim().required(\"Email Subject Required\"),\n  email_message: Yup.string().trim().required(\"Email Message is Required\"),\n});\n\nconst quillEditorModules = {\n  toolbar: [\n    [{ 'header': [1, 2, 3, 4, 5, 6, false] }, { 'font': [] }],\n    [{ size: [] }],\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n    [{ 'list': 'ordered' }, { 'list': 'bullet' },\n    { 'indent': '-1' }, { 'indent': '+1' }],\n    ['link'],\n    ['clean']\n  ],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false,\n  }\n}\n/* \n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\nconst quillEditorFormats = [\n  'header', 'font', 'size',\n  'bold', 'italic', 'underline', 'strike', 'blockquote',\n  'list', 'bullet', 'indent',\n  'link', 'image', 'video'\n]\n\nfunction getSteps() {\n  return [\"Create an email\", \"Select an email group\"];\n}\n\nexport default function HorizontalLinearStepper(props) {\n\n  const { currentUser, contactToSendEmailTo, contactSource,\n    users, contacts, history, emailTemplates, handleItemSubmit } = props;\n\n  const classes = commonStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const defaultEmailValues = {\n    from_user: currentUser.email || \"\",\n    email_subject: \"\",\n    email_message: \"\",\n    template: '',\n  }\n  //for the transfer list below\n  const [emailValues, setEmailValues] = React.useState(defaultEmailValues);\n  const [isSaving, setIsSaving] = React.useState(false);\n\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setEmailValues(defaultEmailValues)\n    setActiveStep(0);\n  };\n\n  const handleCancel = () => {\n    history.goBack()\n  }\n\n  const submitEmailDetailsForm = (emailValues) => {\n    setEmailValues(emailValues)\n    handleNext()\n  }\n\n  const handleSendEmailSubmit = async (emailsArray) => {\n    //send the emails here\n    setIsSaving(true)\n    try {\n      await sendEmails(emailValues.from_user, emailValues.email_subject, emailValues.email_message, emailsArray)\n      const emailObjectToSave = {\n        email_subject: emailValues.email_subject,\n        from_user: emailValues.from_user,\n        date_sent: new Date().toDateString(),\n      }\n      await handleItemSubmit(emailObjectToSave, \"communication_emails\")\n    } catch (error) {\n      console.log(\"Error during sending email => \", error)\n    }\n    setIsSaving(false)\n    handleNext()\n  }\n\n  return (\n    <div className={classes.fullHeightWidthContainer}>\n      {\n        isSaving && (<CustomCircularProgress dialogTitle=\"Sending email...\" open={true} />)\n      }\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          return (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.oneMarginTopBottom}>\n              Email Sent...\n            </Typography>\n            <Button onClick={handleReset} className={classes.oneMarginRight}>\n              Reset\n            </Button>\n          </div>\n        ) : activeStep === 0 ? (\n          <Grid container direction=\"column\">\n            <Formik\n              initialValues={emailValues}\n              validationSchema={EmailSchema}\n              onSubmit={(values) => {\n                const email = {\n                  from_user: values.from_user,\n                  email_subject: values.email_subject,\n                  email_message: values.email_message,\n                };\n                submitEmailDetailsForm(email);\n              }}\n            >\n              {({\n                values,\n                handleSubmit,\n                touched,\n                setFieldValue,\n                errors,\n                handleChange,\n                handleBlur,\n              }) => (\n                <form\n                  className={classes.form}\n                  method=\"post\"\n                  id=\"emailDetailsInputForm\"\n                  onSubmit={handleSubmit}\n                >\n                  <Grid\n                    container\n                    spacing={2}\n                    justify=\"center\"\n                    alignItems=\"stretch\"\n                    direction=\"column\"\n                  >\n                    <Grid item>\n                      <TextField\n                        InputLabelProps={{ shrink: true }}\n                        fullWidth\n                        variant=\"outlined\"\n                        id=\"from_user\"\n                        name=\"from_user\"\n                        label=\"From:\"\n                        value={values.from_user}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        error={errors.from_user && touched.from_user}\n                        helperText={errors.from_user}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <TextField\n                        fullWidth\n                        select\n                        variant=\"outlined\"\n                        id=\"template\"\n                        name=\"template\"\n                        label=\"Template\"\n                        value={values.template}\n                        onChange={(event) => {\n                          const selectedTemplate = emailTemplates.find(({ id }) => id === event.target.value) || {}\n                          setFieldValue('template', event.target.value)\n                          setFieldValue('email_message', selectedTemplate.template_contents)\n                        }}\n                        onBlur={handleBlur}\n                        error={errors.template && touched.template}\n                        helperText={errors.template}>\n                        {emailTemplates.map((emailTemplate, index) => (\n                          <MenuItem key={index} value={emailTemplate.id}>\n                            {emailTemplate.template_name}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    </Grid>\n                    <Grid item>\n                      <TextField\n                        fullWidth\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        id=\"email_subject\"\n                        name=\"email_subject\"\n                        label=\"Email Subject\"\n                        value={values.email_subject}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        error={\n                          errors.email_subject && touched.email_subject\n                        }\n                        helperText={\n                          touched.email_subject && errors.email_subject\n                        }\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography color='textSecondary' variant='body1' paragraph>Email Message</Typography>\n                      <ReactQuill\n                        className={classes.quillEditor}\n                        value={values.email_message}\n                        onChange={(content) => {\n                          setFieldValue('email_message', content)\n                        }}\n                        theme=\"snow\"\n                        modules={quillEditorModules}\n                        formats={quillEditorFormats} >\n                      </ReactQuill>\n                    </Grid>\n                    <Grid\n                      item\n                      container\n                      spacing={2}\n                    >\n                      <Grid item>\n                        <Button\n                          color=\"secondary\"\n                          variant=\"contained\"\n                          size=\"medium\"\n                          startIcon={<CancelIcon />}\n                          onClick={handleCancel}\n                          disableElevation\n                        >\n                          Cancel\n                      </Button>\n                      </Grid>\n                      <Grid item>\n                        <Button\n                          form=\"emailDetailsInputForm\"\n                          type=\"submit\"\n                          variant=\"contained\"\n                          color=\"primary\">\n                          Next\n                  </Button>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </form>\n              )}\n            </Formik>\n          </Grid>\n        ) : activeStep === 1 ? (\n          <EmailsSelect contacts={contacts} users={users} handleBack={handleBack}\n            contactToSendEmailTo={contactToSendEmailTo} contactSource={contactSource}\n            submitEmailSourceValues={handleSendEmailSubmit} />) : null}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}