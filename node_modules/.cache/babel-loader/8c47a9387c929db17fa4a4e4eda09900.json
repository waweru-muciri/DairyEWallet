{"ast":null,"code":"import XLSX from \"xlsx\";\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\nlet companyProfile = {};\nexport function setCompanyProfile(companyProfileData) {\n  companyProfile = companyProfileData;\n}\nexport function readXlsxFile(fileData) {\n  let readData = XLSX.read(fileData, {\n    type: 'binary',\n    cellDates: true\n  });\n  const wsname = readData.SheetNames[0];\n  const ws = readData.Sheets[wsname];\n  /* Convert array to json*/\n\n  const dataParse = XLSX.utils.sheet_to_json(ws, {\n    defval: \"\",\n    raw: false\n  });\n  return dataParse;\n}\n\nconst makeCell = (content, rowIndex = -1, options = {}) => {\n  return Object.assign({\n    text: content,\n    fillColor: rowIndex % 2 ? 'white' : '#e8e8e8'\n  }, options);\n}; // -- Format the table cells for presentation.\n\n\nconst thl = (content, rowIndex = -1, options = {}) => {\n  return makeCell(content, rowIndex, Object.assign({\n    bold: true,\n    alignment: 'left',\n    fontSize: 9\n  }, options));\n};\n\nconst tdl = (content, rowIndex = -1, options = {}) => {\n  return makeCell(content, rowIndex, Object.assign({\n    bold: false,\n    alignment: 'left',\n    fontSize: 9\n  }, options));\n};\n\nconst getReportDate = () => {\n  return new Date().toDateString();\n}; // -- Create a base document template for the reports.\n\n\nconst createDocumentDefinition = (reportTitle, ...contentParts) => {\n  const baseDocDefinition = {\n    pageSize: 'A4',\n    info: {\n      title: `${companyProfile.company_name} - ${reportTitle}`,\n      author: 'RentGate Property Management Services',\n      subject: `${reportTitle}`,\n      keywords: `${reportTitle}`\n    },\n    footer: (currentPage, pageCount) => {\n      return {\n        text: `RentGate Property Management : Page ${currentPage.toString()} of ${pageCount.toString()}`,\n        alignment: 'center',\n        fontSize: 7\n      };\n    },\n    styles: {\n      title: {\n        fontSize: 14,\n        alignment: 'center',\n        margin: [0, 0, 0, 8]\n      },\n      companyLogoStyle: {\n        alignment: 'center'\n      },\n      titleSub: {\n        fontSize: 12,\n        alignment: 'center',\n        margin: [0, 0, 0, 5]\n      },\n      titleDate: {\n        fontSize: 10,\n        alignment: 'right',\n        margin: [0, 0, 0, 2]\n      }\n    },\n    content: [companyProfile.company_logo ? {\n      image: 'companyLogo',\n      width: 600,\n      height: 200,\n      style: 'companyLogoStyle'\n    } : {\n      text: `${companyProfile.company_name}`,\n      style: 'title',\n      width: '*'\n    }, {\n      text: reportTitle,\n      style: 'titleSub',\n      width: '*'\n    }, {\n      text: `Created: ${getReportDate()}`,\n      style: 'titleDate',\n      width: '*'\n    }],\n    images: {\n      companyLogo: `${companyProfile.company_logo}`\n    }\n  };\n  const docDefinition = JSON.parse(JSON.stringify(baseDocDefinition));\n  docDefinition.footer = baseDocDefinition.footer;\n  docDefinition.content.push(...contentParts);\n  return docDefinition;\n};\n\nexport const printDocument = (reportName, reportTitle, documentContent) => {\n  const docDefinition = createDocumentDefinition(reportTitle, documentContent); // pdfMake.createPdf(docDefinition).download(`underlyingLoanSummary-.pdf`);\n\n  pdfMake.createPdf(docDefinition).open();\n}; // -- Generate the Pdf with Data in Rows.\n\nexport function printDataRows(reportName, reportTitle, headCells, dataToPrint) {\n  const headCellsToPrint = headCells.filter(({\n    id\n  }) => id !== 'edit' && id !== 'delete' && id !== 'details');\n  const fontSize = 9; // -- Generate the body of the document table, with headings\n\n  const tableBody = dataRows => {\n    const tableHeadRow = headCellsToPrint.map(headCell => thl(`${headCell.label}`, -1, {\n      rowSpan: 1,\n      fontSize: fontSize\n    }));\n    const body = [tableHeadRow];\n    dataRows.forEach((row, index) => {\n      const tableRow = [];\n      headCellsToPrint.forEach(headCell => {\n        tableRow.push(tdl(row[headCell.id], index, {\n          fontSize: fontSize\n        }));\n      });\n      body.push(tableRow);\n    });\n    const tableTotalsRow = headCellsToPrint.map(headCell => {\n      let columnTotal = 0;\n\n      if (headCell.numeric) {\n        columnTotal = dataRows.reduce((total, currentValue) => {\n          return total + parseFloat(currentValue[headCell.id]) || 0;\n        }, 0);\n      }\n\n      return thl(`${columnTotal}`, -1, {\n        rowSpan: 1,\n        fontSize: fontSize\n      });\n    });\n    body.push(tableTotalsRow);\n    return body;\n  };\n\n  const tableColumnWidths = headCellsToPrint.map(headCell => 'auto'); // -- The main report table, with the table body.\n\n  const tableData = {\n    table: {\n      headerRows: 1,\n      widths: tableColumnWidths,\n      body: tableBody(dataToPrint)\n    }\n  };\n  printDocument(`${reportName} ${getReportDate()}`, reportTitle, tableData);\n}\n\nconst printDataToExcel = (title, subject, dataToExport, fileName) => {\n  var workBook = XLSX.utils.book_new();\n  workBook.Props = {\n    Title: title,\n    Subject: subject,\n    Author: \"RentGate Property Management\",\n    CreatedDate: new Date()\n  };\n  var workBookSheetData = dataToExport;\n  var workBookSheet = XLSX.utils.json_to_sheet(workBookSheetData);\n  XLSX.utils.book_append_sheet(workBook, workBookSheet, \"Sheet1\");\n  XLSX.writeFile(workBook, `${fileName} - ${new Date().toDateString()}.xlsx`);\n};\n\nexport function exportDataUploadTemplate(title, subject, headCells, fileName) {\n  const dataToExport = [];\n  [{}].forEach(row => {\n    const tableRow = {};\n    headCells.forEach(headCell => {\n      tableRow[headCell] = row[headCell];\n    });\n    dataToExport.push(tableRow);\n  });\n  printDataToExcel(title, subject, dataToExport, fileName);\n}\nexport default function exportDataToXSL(title, subject, headCells, dataRows, fileName) {\n  const headCellsToPrint = headCells.filter(({\n    id\n  }) => id !== 'edit' && id !== 'delete' && id !== 'details');\n  const dataToExport = [];\n  const columnTotalObject = {};\n  dataRows.forEach(row => {\n    const tableRow = {};\n    headCellsToPrint.forEach(headCell => {\n      tableRow[headCell.label] = row[headCell.id];\n\n      if (headCell.numeric) {\n        const columnTotal = (parseFloat(columnTotalObject[headCell.label]) || 0) + (parseFloat(row[headCell.id]) || 0);\n        columnTotalObject[headCell.label] = columnTotal;\n      }\n    });\n    dataToExport.push(tableRow);\n  });\n  dataToExport.push(columnTotalObject);\n  printDataToExcel(title, subject, dataToExport, fileName);\n}\nexport function exportPropertyStatementDataToXSL(title, subject, headCells, dataRows, fileName) {\n  const headCellsToPrint = [title.includes(\"Income\") ? \"income_type\" : \"expense_type\", ...headCells];\n  const dataToExport = [];\n  dataRows.forEach(row => {\n    const tableRow = {};\n    headCellsToPrint.forEach(headCell => {\n      tableRow[headCell] = row[headCell];\n    });\n    dataToExport.push(tableRow);\n  });\n  printDataToExcel(title, subject, dataToExport, fileName);\n}\nexport function printInvoice(tenantDetails, items) {\n  const text = `\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Invoice</title>\n        <style>\n        .invoice-box {\n            max-width: 800px;\n            margin: auto;\n            padding: 30px;\n            font-size: 16px;\n            line-height: 24px;\n            font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n            color: #555;\n        }\n        .invoice-box table {\n            width: 100%;\n            line-height: inherit;\n            text-align: left;\n        }\n        .invoice-box table td {\n            padding: 5px;\n            vertical-align: top;\n        }\n        .invoice-box table tr td:nth-child(2), .invoice-box table tr td:nth-child(3) {\n            text-align: right;\n        }            \n        .invoice-box table tr.top table td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.top table td.title {\n            font-size: 45px;\n            line-height: 45px;\n            color: #333;\n        }\n        .invoice-box table tr.information table td {\n            padding-bottom: 40px;\n        }\n        .invoice-box table tr.heading td {\n            background: #eee;\n            border-bottom: 1px solid #ddd;\n            font-weight: bold;\n        }\n        .invoice-box table tr.details td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.item td{\n            border-bottom: 1px solid #eee;\n        }\n        .invoice-box table tr.item.last td {\n            border-bottom: none;\n        }\n        .invoice-box table tr.total td:nth-child(3) {\n            border-top: 2px solid #eee;\n            font-weight: bold;\n        }\n        @media only screen and (max-width: 600px) {\n            .invoice-box table tr.top table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n            .invoice-box table tr.information table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n        }\n        /** RTL **/\n        .rtl {\n            direction: rtl;\n            font-family: Tahoma, 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n        }\n        .rtl table {\n            text-align: right;\n        }\n        .rtl table tr td:nth-child(2) {\n            text-align: left;\n        }\n        </style>\n    </head>\n    <body onafterprint=\"self.close()\">\n        <div class=\"invoice-box\">\n            <table cellpadding=\"0\" cellspacing=\"0\">\n                <tr class=\"top\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td class=\"title\">\n                                </td>\n                                <td>\n                                    Invoice #: ${new Date().toISOString().slice(0, 10)}-${tenantDetails.id_number}<br>\n                                    Created: ${new Date().toLocaleString()}<br>\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"information\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td>\n                                    ${companyProfile.company_name}<br>\n                                    ${companyProfile.company_address}<br>\n                                    ${companyProfile.company_phone_number}<br>\n                                    ${companyProfile.company_primary_email}\n                                </td>\n                                \n                                <td>\n                                    ${tenantDetails.first_name} ${tenantDetails.last_name}<br>\n                                    ${tenantDetails.id_number}<br>\n                                    ${tenantDetails.personal_phone_number}<br>\n                                    ${tenantDetails.contact_email}\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"heading\">\n                    <td>\n                        Item\n                    </td>\n                    <td>\n                        Due Date\n                    </td>\n                    <td>\n                        Amount\n                    </td>\n                </tr>\n                ${Array.from(items).map(item => `<tr class=\"item\">\n        <td>\n          ${item.charge_label}\n        </td>\n        <td>\n          ${item.due_date}\n        </td>\n        <td>\n          Ksh ${item.balance}\n        </td>\n      </tr>`)}\n                <tr class=\"total\">\n                    <td></td>\n                    <td></td>\n                    <td>\n                       Total: Ksh: ${Array.from(items).reduce((total, currentValue) => total + (parseFloat(currentValue.balance) || 0), 0)}\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </body>\n    </html>`;\n  const my_window = window.open('', 'mywindow', 'status=1');\n  my_window.document.write(text);\n  my_window.print();\n}\nexport function getReceiptHtml(tenantDetails, items) {\n  const text = `\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Receipt</title>\n        <style>\n        .invoice-box {\n            max-width: 800px;\n            margin: auto;\n            padding: 30px;\n            font-size: 16px;\n            line-height: 24px;\n            font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n            color: #555;\n        }\n        .invoice-box table {\n            width: 100%;\n            line-height: inherit;\n            text-align: left;\n        }\n        .invoice-box table td {\n            padding: 5px;\n            vertical-align: top;\n        }\n        .invoice-box table tr td:nth-child(2), .invoice-box table tr td:nth-child(3) {\n            text-align: right;\n        }\n        .invoice-box table tr.top table td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.top table td.title {\n            font-size: 45px;\n            line-height: 45px;\n            color: #333;\n        }\n        .invoice-box table tr.information table td {\n            padding-bottom: 40px;\n        }\n        .invoice-box table tr.heading td {\n            background: #eee;\n            border-bottom: 1px solid #ddd;\n            font-weight: bold;\n        }\n        .invoice-box table tr.details td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.item td{\n            border-bottom: 1px solid #eee;\n        }\n        .invoice-box table tr.item.last td {\n            border-bottom: none;\n        }\n        .invoice-box table tr.total td:nth-child(3) {\n            border-top: 2px solid #eee;\n            font-weight: bold;\n        }\n        @media only screen and (max-width: 600px) {\n            .invoice-box table tr.top table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n            .invoice-box table tr.information table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n        }\n        /** RTL **/\n        .rtl {\n            direction: rtl;\n            font-family: Tahoma, 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n        }\n        .rtl table {\n            text-align: right;\n        }\n        .rtl table tr td:nth-child(2) {\n            text-align: left;\n        }\n        </style>\n    </head>\n    <body onafterprint=\"self.close()\">\n        <div class=\"invoice-box\">\n            <table cellpadding=\"0\" cellspacing=\"0\">\n                <tr class=\"top\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td class=\"title\">\n                                    <img src=\"\" style=\"width:100%; max-width:300px;\">\n                                </td>\n                                \n                                <td>\n                                    Receipt #: ${new Date().toISOString().slice(0, 10)}-${tenantDetails.id_number}<br>\n                                    Created: ${new Date().toLocaleString()}<br>\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"information\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td>\n                                    ${companyProfile.company_name}<br>\n                                    ${companyProfile.company_address}<br>\n                                    ${companyProfile.company_phone_number}<br>\n                                    ${companyProfile.company_primary_email}\n                                </td>\n                                \n                                <td>\n                                    ${tenantDetails.first_name} ${tenantDetails.last_name}<br>\n                                    ${tenantDetails.id_number}<br>\n                                    ${tenantDetails.personal_phone_number}<br>\n                                    ${tenantDetails.contact_email}\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"heading\">\n                    <td>\n                        Item\n                    </td>\n                    <td>\n                        Payment Date\n                    </td>\n                    <td>\n                        Amount\n                    </td>\n                </tr>\n                ${Array.from(items).map(item => `<tr class=\"item\">\n        <td>\n          ${item.sale_label}\n        </td>\n        <td>\n          ${item.sale_date}\n        </td>\n        <td>\n          Ksh ${item.sale_amount}\n        </td>\n      </tr>`)}\n                <tr class=\"total\">\n                    <td></td>\n                    <td></td>\n                    <td>\n                       Total: Ksh: ${Array.from(items).reduce((total, currentValue) => total + (parseFloat(currentValue.sale_amount) || 0), 0)}\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </body>\n    </html>`;\n  return text;\n}\nexport function printReceipt(tenantDetails, items) {\n  const receiptHtmlText = getReceiptHtml(tenantDetails, items);\n  const my_window = window.open('', 'mywindow', 'status=1');\n  my_window.document.write(receiptHtmlText);\n  my_window.print();\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/assets/PrintingHelper.js"],"names":["XLSX","pdfMake","pdfFonts","vfs","companyProfile","setCompanyProfile","companyProfileData","readXlsxFile","fileData","readData","read","type","cellDates","wsname","SheetNames","ws","Sheets","dataParse","utils","sheet_to_json","defval","raw","makeCell","content","rowIndex","options","Object","assign","text","fillColor","thl","bold","alignment","fontSize","tdl","getReportDate","Date","toDateString","createDocumentDefinition","reportTitle","contentParts","baseDocDefinition","pageSize","info","title","company_name","author","subject","keywords","footer","currentPage","pageCount","toString","styles","margin","companyLogoStyle","titleSub","titleDate","company_logo","image","width","height","style","images","companyLogo","docDefinition","JSON","parse","stringify","push","printDocument","reportName","documentContent","createPdf","open","printDataRows","headCells","dataToPrint","headCellsToPrint","filter","id","tableBody","dataRows","tableHeadRow","map","headCell","label","rowSpan","body","forEach","row","index","tableRow","tableTotalsRow","columnTotal","numeric","reduce","total","currentValue","parseFloat","tableColumnWidths","tableData","table","headerRows","widths","printDataToExcel","dataToExport","fileName","workBook","book_new","Props","Title","Subject","Author","CreatedDate","workBookSheetData","workBookSheet","json_to_sheet","book_append_sheet","writeFile","exportDataUploadTemplate","exportDataToXSL","columnTotalObject","exportPropertyStatementDataToXSL","includes","printInvoice","tenantDetails","items","toISOString","slice","id_number","toLocaleString","company_address","company_phone_number","company_primary_email","first_name","last_name","personal_phone_number","contact_email","Array","from","item","charge_label","due_date","balance","my_window","window","document","write","print","getReceiptHtml","sale_label","sale_date","sale_amount","printReceipt","receiptHtmlText"],"mappings":"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","sourcesContent":["import XLSX from \"xlsx\";\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nlet companyProfile = {};\n\nexport function setCompanyProfile(companyProfileData) {\n    companyProfile = companyProfileData\n}\n\nexport function readXlsxFile(fileData) {\n    let readData = XLSX.read(fileData, { type: 'binary', cellDates: true });\n    const wsname = readData.SheetNames[0];\n    const ws = readData.Sheets[wsname];\n\n    /* Convert array to json*/\n    const dataParse = XLSX.utils.sheet_to_json(ws, { defval: \"\", raw: false });\n    return dataParse\n}\n\nconst makeCell = (content, rowIndex = -1, options = {}) => {\n    return Object.assign({ text: content, fillColor: rowIndex % 2 ? 'white' : '#e8e8e8' }, options);\n}\n// -- Format the table cells for presentation.\nconst thl = (content, rowIndex = -1, options = {}) => {\n    return makeCell(content, rowIndex, Object.assign({ bold: true, alignment: 'left', fontSize: 9 }, options));\n}\n\nconst tdl = (content, rowIndex = -1, options = {}) => {\n    return makeCell(content, rowIndex, Object.assign({ bold: false, alignment: 'left', fontSize: 9 }, options));\n}\n\nconst getReportDate = () => {\n    return new Date().toDateString()\n}\n\n// -- Create a base document template for the reports.\nconst createDocumentDefinition = (reportTitle, ...contentParts) => {\n    const baseDocDefinition = {\n        pageSize: 'A4',\n        info: {\n            title: `${companyProfile.company_name} - ${reportTitle}`,\n            author: 'RentGate Property Management Services',\n            subject: `${reportTitle}`,\n            keywords: `${reportTitle}`,\n        },\n        footer: (currentPage, pageCount) => {\n            return {\n                text: `RentGate Property Management : Page ${currentPage.toString()} of ${pageCount.toString()}`,\n                alignment: 'center',\n                fontSize: 7\n            }\n        },\n        styles: {\n            title: {\n                fontSize: 14,\n                alignment: 'center',\n                margin: [0, 0, 0, 8],\n            },\n            companyLogoStyle: {\n                alignment: 'center',\n            },\n            titleSub: {\n                fontSize: 12,\n                alignment: 'center',\n                margin: [0, 0, 0, 5],\n            },\n            titleDate: {\n                fontSize: 10,\n                alignment: 'right',\n                margin: [0, 0, 0, 2],\n            }\n        },\n\n        content: [\n            companyProfile.company_logo ? {\n                image: 'companyLogo',\n                width: 600,\n                height: 200,\n                style: 'companyLogoStyle'\n            } : {\n                text: `${companyProfile.company_name}`, style: 'title', width: '*'\n            },\n            { text: reportTitle, style: 'titleSub', width: '*' },\n            { text: `Created: ${getReportDate()}`, style: 'titleDate', width: '*' },\n        ],\n        images: {\n            companyLogo: `${companyProfile.company_logo}`\n        }\n    };\n    const docDefinition = JSON.parse(JSON.stringify(baseDocDefinition));\n    docDefinition.footer = baseDocDefinition.footer;\n    docDefinition.content.push(...contentParts);\n    return docDefinition;\n};\n\nexport const printDocument = (reportName, reportTitle, documentContent) => {\n    const docDefinition = createDocumentDefinition(reportTitle, documentContent);\n    // pdfMake.createPdf(docDefinition).download(`underlyingLoanSummary-.pdf`);\n    pdfMake.createPdf(docDefinition).open()\n}\n\n\n// -- Generate the Pdf with Data in Rows.\nexport function printDataRows(reportName, reportTitle, headCells, dataToPrint) {\n    const headCellsToPrint = headCells.filter(({ id }) => id !== 'edit' && id !== 'delete' && id !== 'details')\n\n    const fontSize = 9;\n\n    // -- Generate the body of the document table, with headings\n    const tableBody = (dataRows) => {\n        const tableHeadRow = headCellsToPrint.map((headCell) => thl(`${headCell.label}`, -1, { rowSpan: 1, fontSize: fontSize }))\n\n        const body = [\n            tableHeadRow,\n        ];\n\n        dataRows.forEach((row, index) => {\n            const tableRow = [];\n            headCellsToPrint.forEach((headCell) => {\n                tableRow.push(tdl(row[headCell.id], index, { fontSize: fontSize }));\n            });\n            body.push(tableRow);\n        });\n        const tableTotalsRow = headCellsToPrint.map((headCell) => {\n            let columnTotal = 0;\n            if (headCell.numeric) {\n                columnTotal = dataRows.reduce((total, currentValue) => {\n                    return total + parseFloat(currentValue[headCell.id]) || 0\n                }, 0)\n            }\n            return thl(`${columnTotal}`, -1, { rowSpan: 1, fontSize: fontSize })\n        })\n        body.push(tableTotalsRow);\n\n        return body;\n    }\n\n    const tableColumnWidths = headCellsToPrint.map((headCell) => 'auto');\n\n    // -- The main report table, with the table body.\n    const tableData = {\n        table: {\n            headerRows: 1,\n            widths: tableColumnWidths,\n            body: tableBody(dataToPrint),\n        },\n    };\n    printDocument(`${reportName} ${getReportDate()}`, reportTitle, tableData)\n}\n\nconst printDataToExcel = (title, subject, dataToExport, fileName) => {\n    var workBook = XLSX.utils.book_new();\n    workBook.Props = {\n        Title: title,\n        Subject: subject,\n        Author: \"RentGate Property Management\",\n        CreatedDate: new Date(),\n    };\n    var workBookSheetData = dataToExport;\n    var workBookSheet = XLSX.utils.json_to_sheet(workBookSheetData);\n    XLSX.utils.book_append_sheet(workBook, workBookSheet, \"Sheet1\");\n    XLSX.writeFile(workBook, `${fileName} - ${new Date().toDateString()}.xlsx`);\n}\n\nexport function exportDataUploadTemplate(title, subject, headCells, fileName) {\n    const dataToExport = [];\n    [{}].forEach((row) => {\n        const tableRow = {};\n        headCells.forEach((headCell) => {\n            tableRow[headCell] = row[headCell]\n        });\n        dataToExport.push(tableRow);\n    });\n    printDataToExcel(title, subject, dataToExport, fileName)\n}\n\nexport default function exportDataToXSL(title, subject, headCells, dataRows, fileName) {\n    const headCellsToPrint = headCells.filter(({ id }) => id !== 'edit' && id !== 'delete' && id !== 'details')\n    const dataToExport = [];\n    const columnTotalObject = {}\n    dataRows.forEach((row) => {\n        const tableRow = {};\n        headCellsToPrint.forEach((headCell) => {\n            tableRow[headCell.label] = row[headCell.id]\n            if (headCell.numeric) {\n                const columnTotal = (parseFloat(columnTotalObject[headCell.label]) || 0) + (parseFloat(row[headCell.id]) || 0)\n                columnTotalObject[headCell.label] = columnTotal\n            }\n        });\n        dataToExport.push(tableRow);\n    });\n    dataToExport.push(columnTotalObject);\n\n    printDataToExcel(title, subject, dataToExport, fileName)\n}\nexport function exportPropertyStatementDataToXSL(title, subject, headCells, dataRows, fileName) {\n    const headCellsToPrint = [title.includes(\"Income\") ? \"income_type\" : \"expense_type\", ...headCells]\n    const dataToExport = [];\n    dataRows.forEach((row) => {\n        const tableRow = {};\n        headCellsToPrint.forEach((headCell) => {\n            tableRow[headCell] = row[headCell]\n        });\n        dataToExport.push(tableRow);\n    });\n    printDataToExcel(title, subject, dataToExport, fileName)\n}\n\nexport function printInvoice(tenantDetails, items) {\n    const text = `\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Invoice</title>\n        <style>\n        .invoice-box {\n            max-width: 800px;\n            margin: auto;\n            padding: 30px;\n            font-size: 16px;\n            line-height: 24px;\n            font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n            color: #555;\n        }\n        .invoice-box table {\n            width: 100%;\n            line-height: inherit;\n            text-align: left;\n        }\n        .invoice-box table td {\n            padding: 5px;\n            vertical-align: top;\n        }\n        .invoice-box table tr td:nth-child(2), .invoice-box table tr td:nth-child(3) {\n            text-align: right;\n        }            \n        .invoice-box table tr.top table td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.top table td.title {\n            font-size: 45px;\n            line-height: 45px;\n            color: #333;\n        }\n        .invoice-box table tr.information table td {\n            padding-bottom: 40px;\n        }\n        .invoice-box table tr.heading td {\n            background: #eee;\n            border-bottom: 1px solid #ddd;\n            font-weight: bold;\n        }\n        .invoice-box table tr.details td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.item td{\n            border-bottom: 1px solid #eee;\n        }\n        .invoice-box table tr.item.last td {\n            border-bottom: none;\n        }\n        .invoice-box table tr.total td:nth-child(3) {\n            border-top: 2px solid #eee;\n            font-weight: bold;\n        }\n        @media only screen and (max-width: 600px) {\n            .invoice-box table tr.top table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n            .invoice-box table tr.information table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n        }\n        /** RTL **/\n        .rtl {\n            direction: rtl;\n            font-family: Tahoma, 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n        }\n        .rtl table {\n            text-align: right;\n        }\n        .rtl table tr td:nth-child(2) {\n            text-align: left;\n        }\n        </style>\n    </head>\n    <body onafterprint=\"self.close()\">\n        <div class=\"invoice-box\">\n            <table cellpadding=\"0\" cellspacing=\"0\">\n                <tr class=\"top\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td class=\"title\">\n                                </td>\n                                <td>\n                                    Invoice #: ${new Date().toISOString().slice(0, 10)}-${tenantDetails.id_number}<br>\n                                    Created: ${new Date().toLocaleString()}<br>\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"information\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td>\n                                    ${companyProfile.company_name}<br>\n                                    ${companyProfile.company_address}<br>\n                                    ${companyProfile.company_phone_number}<br>\n                                    ${companyProfile.company_primary_email}\n                                </td>\n                                \n                                <td>\n                                    ${tenantDetails.first_name} ${tenantDetails.last_name}<br>\n                                    ${tenantDetails.id_number}<br>\n                                    ${tenantDetails.personal_phone_number}<br>\n                                    ${tenantDetails.contact_email}\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"heading\">\n                    <td>\n                        Item\n                    </td>\n                    <td>\n                        Due Date\n                    </td>\n                    <td>\n                        Amount\n                    </td>\n                </tr>\n                ${Array.from(items).map(item =>\n        `<tr class=\"item\">\n        <td>\n          ${item.charge_label}\n        </td>\n        <td>\n          ${item.due_date}\n        </td>\n        <td>\n          Ksh ${item.balance}\n        </td>\n      </tr>`\n    )}\n                <tr class=\"total\">\n                    <td></td>\n                    <td></td>\n                    <td>\n                       Total: Ksh: ${Array.from(items).reduce((total, currentValue) => total + (parseFloat(currentValue.balance) || 0), 0)}\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </body>\n    </html>`\n    const my_window = window.open('', 'mywindow', 'status=1');\n    my_window.document.write(text);\n    my_window.print();\n\n}\n\nexport function getReceiptHtml(tenantDetails, items) {\n    const text = `\n    <!doctype html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Receipt</title>\n        <style>\n        .invoice-box {\n            max-width: 800px;\n            margin: auto;\n            padding: 30px;\n            font-size: 16px;\n            line-height: 24px;\n            font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n            color: #555;\n        }\n        .invoice-box table {\n            width: 100%;\n            line-height: inherit;\n            text-align: left;\n        }\n        .invoice-box table td {\n            padding: 5px;\n            vertical-align: top;\n        }\n        .invoice-box table tr td:nth-child(2), .invoice-box table tr td:nth-child(3) {\n            text-align: right;\n        }\n        .invoice-box table tr.top table td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.top table td.title {\n            font-size: 45px;\n            line-height: 45px;\n            color: #333;\n        }\n        .invoice-box table tr.information table td {\n            padding-bottom: 40px;\n        }\n        .invoice-box table tr.heading td {\n            background: #eee;\n            border-bottom: 1px solid #ddd;\n            font-weight: bold;\n        }\n        .invoice-box table tr.details td {\n            padding-bottom: 20px;\n        }\n        .invoice-box table tr.item td{\n            border-bottom: 1px solid #eee;\n        }\n        .invoice-box table tr.item.last td {\n            border-bottom: none;\n        }\n        .invoice-box table tr.total td:nth-child(3) {\n            border-top: 2px solid #eee;\n            font-weight: bold;\n        }\n        @media only screen and (max-width: 600px) {\n            .invoice-box table tr.top table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n            .invoice-box table tr.information table td {\n                width: 100%;\n                display: block;\n                text-align: center;\n            }\n        }\n        /** RTL **/\n        .rtl {\n            direction: rtl;\n            font-family: Tahoma, 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;\n        }\n        .rtl table {\n            text-align: right;\n        }\n        .rtl table tr td:nth-child(2) {\n            text-align: left;\n        }\n        </style>\n    </head>\n    <body onafterprint=\"self.close()\">\n        <div class=\"invoice-box\">\n            <table cellpadding=\"0\" cellspacing=\"0\">\n                <tr class=\"top\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td class=\"title\">\n                                    <img src=\"\" style=\"width:100%; max-width:300px;\">\n                                </td>\n                                \n                                <td>\n                                    Receipt #: ${new Date().toISOString().slice(0, 10)}-${tenantDetails.id_number}<br>\n                                    Created: ${new Date().toLocaleString()}<br>\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"information\">\n                    <td colspan=\"3\">\n                        <table>\n                            <tr>\n                                <td>\n                                    ${companyProfile.company_name}<br>\n                                    ${companyProfile.company_address}<br>\n                                    ${companyProfile.company_phone_number}<br>\n                                    ${companyProfile.company_primary_email}\n                                </td>\n                                \n                                <td>\n                                    ${tenantDetails.first_name} ${tenantDetails.last_name}<br>\n                                    ${tenantDetails.id_number}<br>\n                                    ${tenantDetails.personal_phone_number}<br>\n                                    ${tenantDetails.contact_email}\n                                </td>\n                            </tr>\n                        </table>\n                    </td>\n                </tr>\n                <tr class=\"heading\">\n                    <td>\n                        Item\n                    </td>\n                    <td>\n                        Payment Date\n                    </td>\n                    <td>\n                        Amount\n                    </td>\n                </tr>\n                ${Array.from(items).map(item =>\n        `<tr class=\"item\">\n        <td>\n          ${item.sale_label}\n        </td>\n        <td>\n          ${item.sale_date}\n        </td>\n        <td>\n          Ksh ${item.sale_amount}\n        </td>\n      </tr>`\n    )}\n                <tr class=\"total\">\n                    <td></td>\n                    <td></td>\n                    <td>\n                       Total: Ksh: ${Array.from(items).reduce((total, currentValue) => total + (parseFloat(currentValue.sale_amount) || 0), 0)}\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </body>\n    </html>`\n    return text;\n}\n\nexport function printReceipt(tenantDetails, items) {\n    const receiptHtmlText = getReceiptHtml(tenantDetails, items);\n    const my_window = window.open('', 'mywindow', 'status=1');\n    my_window.document.write(receiptHtmlText);\n    my_window.print();\n}"]},"metadata":{},"sourceType":"module"}