{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/users/ManagementFeesInputForm.js\";\nimport React from \"react\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst ManagmentFeeSchema = Yup.object().shape({\n  from_date: Yup.date().required(\"From Date Required\"),\n  to_date: Yup.date().required(\"To Date Required\"),\n  collection_date: Yup.date().required(\"Collection Date is Required\"),\n  property_id: Yup.string().required(\"Property is Required\"),\n  fees_amount: Yup.number().typeError('Amount must be a number').positive(\"Amount must be greater than 0\").required(\"Fees amount is required\"),\n  management_fees_notes: Yup.string().default(\"\")\n});\n\nconst ManagmentFeeInputForm = props => {\n  const {\n    properties,\n    currentUser,\n    handleItemSubmit,\n    history\n  } = props;\n  const classes = commonStyles();\n  const managementFeeToEdit = props.managementFeeToEdit || {};\n  const managmentFeeValues = {\n    id: managementFeeToEdit.id,\n    management_fees_notes: managementFeeToEdit.management_fees_notes || '',\n    from_date: managementFeeToEdit.from_date || defaultDate,\n    to_date: managementFeeToEdit.to_date || defaultDate,\n    collection_date: managementFeeToEdit.collection_date || defaultDate,\n    fees_amount: managementFeeToEdit.fees_amount || '',\n    property_id: managementFeeToEdit.property_id || '',\n    user_id: managementFeeToEdit.user_id || ''\n  };\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: managmentFeeValues,\n    enableReinitialize: true,\n    validationSchema: ManagmentFeeSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      try {\n        const managementFeesRecord = {\n          id: values.id,\n          property_id: values.property_id,\n          to_date: values.to_date,\n          from_date: values.from_date,\n          collection_date: values.collection_date,\n          user_id: currentUser.id,\n          fees_amount: values.fees_amount,\n          management_fees_notes: values.management_fees_notes\n        };\n        await handleItemSubmit(managementFeesRecord, \"management-fees\"); //only record an expense when a new management fee record is added\n\n        if (!values.id) {\n          const managementFeesExpense = {\n            type: 'management_fees',\n            amount: values.fees_amount,\n            property_id: values.property_id,\n            expense_date: values.collection_date,\n            expense_notes: values.management_fees_notes\n          };\n          await handleItemSubmit(managementFeesExpense, \"expenses\");\n        }\n\n        resetForm({});\n\n        if (values.id) {\n          history.goBack();\n        }\n\n        setStatus({\n          sent: true,\n          msg: \"Fees Recorded successfully.\"\n        });\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"managementFeesInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"stretch\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_id\",\n    label: \"Property\",\n    id: \"property_id\",\n    onChange: handleChange,\n    value: values.property_id,\n    error: errors.property_id && touched.property_id,\n    helperText: touched.property_id && errors.property_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 19\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"collection_date\",\n    name: \"collection_date\",\n    label: \"Collection Date\",\n    value: values.collection_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.collection_date && touched.collection_date,\n    helperText: touched.collection_date && errors.collection_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"from_date\",\n    name: \"from_date\",\n    label: \"From Date\",\n    value: values.from_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.from_date && touched.from_date,\n    helperText: touched.from_date && errors.from_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"to_date\",\n    name: \"to_date\",\n    label: \"To Date\",\n    value: values.to_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.to_date && touched.to_date,\n    helperText: touched.to_date && errors.to_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"text\",\n    variant: \"outlined\",\n    name: \"fees_amount\",\n    id: \"fees_amount\",\n    label: \"Fees Amount\",\n    value: values.fees_amount,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.fees_amount && touched.fees_amount,\n    helperText: touched.fees_amount && errors.fees_amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    multiline: true,\n    rows: 2,\n    variant: \"outlined\",\n    id: \"management_fees_notes\",\n    name: \"management_fees_notes\",\n    label: \"Notes\",\n    value: values.management_fees_notes,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: \"Any notes on fees collected?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 30\n      }\n    }),\n    onClick: () => history.goBack(),\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 30\n      }\n    }),\n    form: \"managementFeesInputForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, \"Save\"))))));\n};\n\nexport default ManagmentFeeInputForm;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/users/ManagementFeesInputForm.js"],"names":["React","CustomSnackbar","Grid","Button","TextField","MenuItem","Formik","commonStyles","SaveIcon","CancelIcon","Yup","format","startOfToday","CustomCircularProgress","defaultDate","ManagmentFeeSchema","object","shape","from_date","date","required","to_date","collection_date","property_id","string","fees_amount","number","typeError","positive","management_fees_notes","default","ManagmentFeeInputForm","props","properties","currentUser","handleItemSubmit","history","classes","managementFeeToEdit","managmentFeeValues","id","user_id","values","resetForm","setStatus","managementFeesRecord","managementFeesExpense","type","amount","expense_date","expense_notes","goBack","sent","msg","error","status","handleSubmit","touched","errors","handleChange","handleBlur","isSubmitting","form","map","property","index","ref","shrink","buttonBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\nconst ManagmentFeeSchema = Yup.object().shape({\n  from_date: Yup.date().required(\"From Date Required\"),\n  to_date: Yup.date().required(\"To Date Required\"),\n  collection_date: Yup.date().required(\"Collection Date is Required\"),\n  property_id: Yup.string().required(\"Property is Required\"),\n  fees_amount: Yup.number().typeError('Amount must be a number')\n    .positive(\"Amount must be greater than 0\")\n    .required(\"Fees amount is required\"),\n  management_fees_notes: Yup.string().default(\"\"),\n});\n\nconst ManagmentFeeInputForm = (props) => {\n  const { properties, currentUser, handleItemSubmit, history } = props\n  const classes = commonStyles();\n  const managementFeeToEdit = props.managementFeeToEdit || {}\n  const managmentFeeValues = {\n    id: managementFeeToEdit.id,\n    management_fees_notes: managementFeeToEdit.management_fees_notes || '',\n    from_date: managementFeeToEdit.from_date || defaultDate,\n    to_date: managementFeeToEdit.to_date || defaultDate,\n    collection_date: managementFeeToEdit.collection_date || defaultDate,\n    fees_amount: managementFeeToEdit.fees_amount || '',\n    property_id: managementFeeToEdit.property_id || '',\n    user_id: managementFeeToEdit.user_id || '',\n  }\n\n  return (\n    <Formik\n      initialValues={managmentFeeValues}\n      enableReinitialize\n      validationSchema={ManagmentFeeSchema}\n      onSubmit={async (values, { resetForm, setStatus }) => {\n        try {\n          const managementFeesRecord = {\n            id: values.id,\n            property_id: values.property_id,\n            to_date: values.to_date,\n            from_date: values.from_date,\n            collection_date: values.collection_date,\n            user_id: currentUser.id,\n            fees_amount: values.fees_amount,\n            management_fees_notes: values.management_fees_notes,\n          };\n          await handleItemSubmit(managementFeesRecord, \"management-fees\")\n          //only record an expense when a new management fee record is added\n          if (!values.id) {\n            const managementFeesExpense = {\n              type: 'management_fees',\n              amount: values.fees_amount,\n              property_id: values.property_id,\n              expense_date: values.collection_date,\n              expense_notes: values.management_fees_notes,\n            };\n            await handleItemSubmit(managementFeesExpense, \"expenses\")\n          }\n          resetForm({});\n          if (values.id) {\n            history.goBack();\n          }\n          setStatus({ sent: true, msg: \"Fees Recorded successfully.\" })\n        } catch (error) {\n          setStatus({ sent: false, msg: `Error! ${error}.` })\n        }\n      }}\n    >\n      {({\n        values,\n        status,\n        handleSubmit,\n        touched,\n        errors,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n      }) => (\n        <form\n          className={classes.form}\n          method=\"post\"\n          id=\"managementFeesInputForm\"\n          onSubmit={handleSubmit}\n        >\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n          >\n            {\n              status && status.msg && (\n                <CustomSnackbar\n                  variant={status.sent ? \"success\" : \"error\"}\n                  message={status.msg}\n                />\n              )\n            }\n            {\n              isSubmitting && (<CustomCircularProgress open={true} />)\n            }\n            <Grid item>\n              <TextField\n                fullWidth\n                select\n                variant=\"outlined\"\n                name=\"property_id\"\n                label=\"Property\"\n                id=\"property_id\"\n                onChange={handleChange}\n                value={values.property_id}\n                error={errors.property_id && touched.property_id}\n                helperText={touched.property_id && errors.property_id}\n\n              >\n                {properties.map((property, index) => (\n                  <MenuItem key={index} value={property.id}>\n                    {property.ref}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                type=\"date\"\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n                id=\"collection_date\"\n                name=\"collection_date\"\n                label=\"Collection Date\"\n                value={values.collection_date}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.collection_date && touched.collection_date}\n                helperText={touched.collection_date && errors.collection_date}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                type=\"date\"\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n                id=\"from_date\"\n                name=\"from_date\"\n                label=\"From Date\"\n                value={values.from_date}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.from_date && touched.from_date}\n                helperText={touched.from_date && errors.from_date}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                type=\"date\"\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n                id=\"to_date\"\n                name=\"to_date\"\n                label=\"To Date\"\n                value={values.to_date}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.to_date && touched.to_date}\n                helperText={touched.to_date && errors.to_date}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                type=\"text\"\n                variant=\"outlined\"\n                name=\"fees_amount\"\n                id=\"fees_amount\"\n                label=\"Fees Amount\"\n                value={values.fees_amount}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.fees_amount && touched.fees_amount}\n                helperText={touched.fees_amount && errors.fees_amount}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                multiline\n                rows={2}\n                variant=\"outlined\"\n                id=\"management_fees_notes\"\n                name=\"management_fees_notes\"\n                label=\"Notes\"\n                value={values.management_fees_notes}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                helperText=\"Any notes on fees collected?\"\n              />\n            </Grid>\n            <Grid item container direction=\"row\" className={classes.buttonBox}>\n              <Grid item>\n                <Button\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => history.goBack()}\n                  disableElevation\n                >\n                  Cancel\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<SaveIcon />}\n                  form=\"managementFeesInputForm\"\n                  disabled={isSubmitting}\n                >\n                  Save\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ManagmentFeeInputForm;\n"]},"metadata":{},"sourceType":"module"}