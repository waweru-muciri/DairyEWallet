{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/PropertyPerformancePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport PageHeading from \"../components/PageHeading\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Bar, HorizontalBar } from 'react-chartjs-2';\nimport { commonStyles } from '../components/commonStyles';\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { format, getYear, parse, isWithinInterval, addDays, isSameDay } from \"date-fns\";\nimport { getMonthsInYear, currencyFormatter } from \"../assets/commonAssets\";\nimport isSameMonth from \"date-fns/isSameMonth\";\nconst chargesPerformanceGraphsOptions = {\n  responsive: true,\n  tooltips: {\n    mode: 'label'\n  },\n  scales: {\n    xAxes: [{\n      ticks: {\n        min: 0,\n        max: 100\n      }\n    }]\n  }\n};\nconst graphOptions = {\n  responsive: true,\n  tooltips: {\n    mode: 'label'\n  },\n  elements: {\n    line: {\n      fill: false\n    }\n  },\n  scales: {\n    yAxes: [{\n      ticks: {\n        min: 0\n      }\n    }],\n    xAxes: [{\n      ticks: {\n        min: 0\n      }\n    }]\n  }\n};\nconst FilterYearSchema = Yup.object().shape({\n  filter_year: Yup.number().typeError(\"Year must be a number!\").required(\"Year is required\").positive(\"Year must be greater than 0\").max(2100, \"Sorry but we won't be here during those times.\").integer()\n});\nconst monthsInYear = getMonthsInYear();\n\nlet PropertyPerformancePage = ({\n  rentalCharges,\n  expenses,\n  properties\n}) => {\n  const classes = commonStyles();\n  const [propertyFilter, setPropertyFilter] = useState(\"all\");\n  const [chargesItems, setChargesItems] = useState([]);\n  const [expensesItems, setExpensesItems] = useState(expenses);\n  useEffect(() => {\n    //get only rent charges for display in bar graph\n    setChargesItems(rentalCharges.filter(({\n      charge_date\n    }) => getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === getYear(new Date())));\n  }, [rentalCharges]);\n  useEffect(() => {\n    setExpensesItems(expenses.filter(({\n      expense_date\n    }) => getYear(parse(expense_date, 'yyyy-MM-dd', new Date())) === getYear(new Date())));\n  }, [expenses]);\n\n  const setFilteredTransactionItemsByYear = filterYear => {\n    setChargesItems(rentalCharges.filter(({\n      charge_date,\n      property_id\n    }) => getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === filterYear && (propertyFilter === \"all\" ? true : property_id === propertyFilter)));\n    setExpensesItems(expenses.filter(({\n      expense_date,\n      property_id\n    }) => getYear(parse(expense_date, 'yyyy-MM-dd', new Date())) === filterYear && (propertyFilter === \"all\" ? true : property_id === propertyFilter)));\n  }; //get the different charges types as a set\n\n\n  const paymentsTypes = [...new Set(chargesItems.filter(chargeItem => chargeItem.payed_status).map(charge => charge.charge_type))]; //get totals payments for each payment type\n\n  const paymentTotalsForPaymentType = paymentsTypes.map(paymentType => {\n    return chargesItems.filter(charge => charge.charge_type === paymentType && charge.payed_status).reduce((total, currentValue) => {\n      return total + parseFloat(currentValue.payed_amount) || 0;\n    }, 0);\n  });\n  const paymentsTypesForDisplay = paymentsTypes.map(paymentType => {\n    let result;\n\n    switch (paymentType.toLowerCase()) {\n      case 'security_deposit':\n        result = \"Security Deposit\";\n        break;\n\n      case 'rent':\n        result = \"Rent\";\n        break;\n\n      case 'water':\n        result = \"Water\";\n        break;\n\n      case 'electric':\n        result = \"Electricity\";\n        break;\n\n      case 'recurring_charge':\n        result = \"Recurring Charges\";\n        break;\n\n      case 'meter_type' || \"meter\":\n        result = \"Utility Charge\";\n        break;\n\n      case 'one_time_charge':\n        result = \"One Time Charge\";\n        break;\n\n      default:\n        result = \"Others\";\n        break;\n    }\n\n    return result;\n  }); //get the total values of the various charges and payments \n\n  const totalRentCharges = chargesItems.filter(charge => charge.charge_type === 'rent').reduce((total, currentValue) => {\n    return total + parseFloat(currentValue.charge_amount) || 0;\n  }, 0); //get total security deposit charges \n\n  const totalSecurityDepositCharges = chargesItems.filter(charge => charge.charge_type === 'security_deposit').reduce((total, currentValue) => {\n    return total + parseFloat(currentValue.charge_amount) || 0;\n  }, 0);\n  const totalOtherCharges = chargesItems.filter(charge => charge.charge_type !== 'rent' && charge.charge_type !== 'security_deposit').reduce((total, currentValue) => {\n    return total + parseFloat(currentValue.charge_amount) || 0;\n  }, 0);\n  const totalRentPayments = chargesItems.filter(payment => payment.charge_type === 'rent').reduce((total, currentValue) => {\n    return total + parseFloat(currentValue.payed_amount) || 0;\n  }, 0); //get total security deposit payments\n\n  const totalSecurityDepositPayments = chargesItems.filter(payment => payment.charge_type === 'security_deposit').reduce((total, currentValue) => {\n    return total + parseFloat(currentValue.payed_amount) || 0;\n  }, 0);\n  const totalOtherChargesPayments = chargesItems.filter(payment => payment.charge_type !== 'rent' && payment.charge_type !== 'security_deposit').reduce((total, currentValue) => {\n    return total + parseFloat(currentValue.payed_amount) || 0;\n  }, 0);\n  const totalRentChargesBalances = totalRentCharges - totalRentPayments;\n  const totalSecurityDepositChargesBalances = totalSecurityDepositCharges - totalSecurityDepositPayments;\n  const totalOtherChargesBalances = totalOtherCharges - totalOtherChargesPayments; //get months in an year in short format\n\n  const monthsOfYearLabels = monthsInYear.map(monthDate => format(monthDate, 'MMMM')); //GET INCOME CATEGORIES GRAPH DATA FROM PREVIOUS VALUES\n\n  const incomeCategoriesGraphData = {\n    labels: paymentsTypesForDisplay,\n    datasets: [{\n      label: 'Income Categories',\n      backgroundColor: 'rgba(130, 224, 170,0.6)',\n      borderColor: 'rgba(130, 224, 170,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(130, 224, 170,1)',\n      hoverBorderColor: 'rgba(130, 224, 170,1)',\n      data: paymentTotalsForPaymentType\n    }]\n  }; //get ONLY RENT charges for each month of the year\n\n  const totalEachMonthRentCharges = monthsInYear.map(monthDate => {\n    //get rentalPayments recorded in the same month and year as monthDate\n    return chargesItems.filter(({\n      charge_date,\n      charge_type\n    }) => {\n      const chargeDate = parse(charge_date, 'yyyy-MM-dd', new Date());\n      return charge_type === 'rent' && isSameMonth(monthDate, chargeDate);\n    }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.charge_amount) || 0), 0);\n  }); //get ONLY RENT payments for each month of the year\n\n  const totalEachMonthRentPayments = monthsInYear.map(monthDate => {\n    //get rentalPayments recorded in the same month and year as monthDate\n    return chargesItems.filter(({\n      charge_date,\n      charge_type\n    }) => {\n      const chargeDate = parse(charge_date, 'yyyy-MM-dd', new Date());\n      return charge_type === 'rent' && isSameMonth(monthDate, chargeDate);\n    }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payed_amount) || 0), 0);\n  });\n  const totalEachMonthExpenses = monthsInYear.map(monthDate => {\n    //get rentalPayments recorded in the same month and year as monthDate\n    return expensesItems.filter(expense => {\n      const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date());\n      return isSameMonth(monthDate, expenseDate);\n    }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.amount) || 0), 0);\n  }); //get expenses categories graph data from previous values\n\n  const expensesCategoriesGraphData = {\n    labels: monthsOfYearLabels,\n    datasets: [{\n      label: 'Expenses',\n      backgroundColor: \"rgba(174, 182, 191,0.6)\",\n      borderColor: 'rgba(174, 182, 191,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(174, 182, 191, 1)',\n      hoverBorderColor: 'rgba(174, 182, 191,1)',\n      data: totalEachMonthExpenses\n    }]\n  }; //get charges and payments graph data from previous values\n\n  const chargesAndPaymentsGraphData = {\n    labels: monthsOfYearLabels,\n    datasets: [{\n      data: totalEachMonthRentCharges,\n      label: 'Monthly Rent Charges',\n      type: 'line',\n      borderColor: '#EC932F',\n      fill: false,\n      backgroundColor: '#EC932F',\n      pointBorderColor: '#EC932F',\n      pointBackgroundColor: '#EC932F',\n      pointHoverBackgroundColor: '#EC932F',\n      pointHoverBorderColor: '#EC932F'\n    }, {\n      data: totalEachMonthRentPayments,\n      label: 'Monthly Rent Payments Collection',\n      type: 'bar',\n      fill: false,\n      backgroundColor: '#71B37C',\n      borderColor: '#71B37C',\n      hoverBackgroundColor: '#71B37C',\n      hoverBorderColor: '#71B37C'\n    }]\n  };\n  const rentChargesPaymentsPeformanceData = {\n    due_date: 0,\n    next_thirty: 0,\n    next_sixty: 0,\n    next_ninety: 0,\n    next_three_months: 0\n  };\n  const otherChargesPaymentsPeformanceData = {\n    due_date: 0,\n    next_thirty: 0,\n    next_sixty: 0,\n    next_ninety: 0,\n    next_three_months: 0\n  };\n  chargesItems.filter(({\n    charge_type,\n    payed_status\n  }) => charge_type === \"rent\" && payed_status).forEach(rentCharge => {\n    const rentChargeLastPaymentDate = parse(rentCharge.last_payment_date, 'yyyy-MM-dd', new Date());\n    const rentChargeDueDate = parse(rentCharge.due_date, 'yyyy-MM-dd', new Date());\n    const endOfNextThirtyDays = addDays(rentChargeDueDate, 30);\n    const endOfNextSixtyDays = addDays(rentChargeDueDate, 60);\n    const endOfNextNinetyDays = addDays(rentChargeDueDate, 90);\n    const endOfNextThreeMonths = new Date(2100, 0, 1); //check if payment was made on the due date\n\n    if (isSameDay(rentChargeLastPaymentDate, rentChargeDueDate)) {\n      rentChargesPaymentsPeformanceData['due_date'] += 1;\n    } //check if payment was made within 7 days\n    else if (isWithinInterval(rentChargeLastPaymentDate, {\n        start: rentChargeDueDate,\n        end: endOfNextThirtyDays\n      })) {\n        rentChargesPaymentsPeformanceData['next_thirty'] += 1;\n      } //check if payment was made within 14 days\n      else if (isWithinInterval(rentChargeLastPaymentDate, {\n          start: endOfNextThirtyDays,\n          end: endOfNextSixtyDays\n        })) {\n          rentChargesPaymentsPeformanceData['next_sixty'] += 1;\n        } //check if payment was made within 30 days\n        else if (isWithinInterval(rentChargeLastPaymentDate, {\n            start: endOfNextSixtyDays,\n            end: endOfNextNinetyDays\n          })) {\n            rentChargesPaymentsPeformanceData['next_ninety'] += 1;\n          } //check if payment was made within 120+ days\n          else if (isWithinInterval(rentChargeLastPaymentDate, {\n              start: endOfNextNinetyDays,\n              end: endOfNextThreeMonths\n            })) {\n              rentChargesPaymentsPeformanceData['next_three_months'] += 1;\n            }\n  });\n  chargesItems.filter(({\n    charge_type,\n    payed_status\n  }) => charge_type !== \"rent\" && payed_status).forEach(otherCharge => {\n    const otherChargeLastPaymentDate = parse(otherCharge.last_payment_date, 'yyyy-MM-dd', new Date());\n    const otherChargeDueDate = parse(otherCharge.due_date, 'yyyy-MM-dd', new Date());\n    const endOfNextThirtyDays = addDays(otherChargeDueDate, 30);\n    const endOfNextSixtyDays = addDays(otherChargeDueDate, 60);\n    const endOfNextNinetyDays = addDays(otherChargeDueDate, 90);\n    const endOfNextThreeMonths = new Date(2100, 0, 1); //check if payment was made on the due date\n\n    if (otherChargeLastPaymentDate === otherChargeDueDate) {\n      otherChargesPaymentsPeformanceData['due_date'] += 1;\n    } //check if payment was made within 7 days\n    else if (isWithinInterval(otherChargeLastPaymentDate, {\n        start: otherChargeDueDate,\n        end: endOfNextThirtyDays\n      })) {\n        otherChargesPaymentsPeformanceData['next_thirty'] += 1;\n      } //check if payment was made within 14 days\n      else if (isWithinInterval(otherChargeLastPaymentDate, {\n          start: endOfNextThirtyDays,\n          end: endOfNextSixtyDays\n        })) {\n          otherChargesPaymentsPeformanceData['next_sixty'] += 1;\n        } //check if payment was made within 30 days\n        else if (isWithinInterval(otherChargeLastPaymentDate, {\n            start: endOfNextSixtyDays,\n            end: endOfNextNinetyDays\n          })) {\n            otherChargesPaymentsPeformanceData['next_ninety'] += 1;\n          } //check if payment was made within 120+ days\n          else if (isWithinInterval(otherChargeLastPaymentDate, {\n              start: endOfNextNinetyDays,\n              end: endOfNextThreeMonths\n            })) {\n              otherChargesPaymentsPeformanceData['next_three_months'] += 1;\n            }\n  });\n\n  const getPeriodDisplayValue = objectKeys => {\n    return Array.from(objectKeys).map(key => {\n      let displayName;\n\n      switch (key) {\n        case \"due_date\":\n          displayName = \"Due Date\";\n          break;\n\n        case \"next_thirty\":\n          displayName = \"Due Date + 30 days\";\n          break;\n\n        case \"next_sixty\":\n          displayName = \"Due Date + 60 days\";\n          break;\n\n        case \"next_ninety\":\n          displayName = \"Due Date + 90 days\";\n          break;\n\n        case \"next_three_months\":\n          displayName = \"Due Date + 120 days\";\n          break;\n\n        default:\n          break;\n      }\n\n      return displayName;\n    });\n  };\n\n  const getPerformanceDataFromObject = performanceObject => {\n    const totalPerformanceDataPoints = Object.values(performanceObject).reduce((total, dataPoint) => total + dataPoint, 0);\n    return Object.values(performanceObject).map(performanceDataPoint => performanceDataPoint / totalPerformanceDataPoints * 100);\n  }; //get charges payments performance graph data\n\n\n  const rentCollectionPerformanceData = {\n    labels: getPeriodDisplayValue(Object.keys(rentChargesPaymentsPeformanceData)),\n    datasets: [{\n      label: 'Rent',\n      backgroundColor: \"rgba(174, 184, 191,0.6)\",\n      borderColor: 'rgba(174, 184, 191,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(174, 184, 191, 1)',\n      hoverBorderColor: 'rgba(174, 184, 191,1)',\n      data: getPerformanceDataFromObject(rentChargesPaymentsPeformanceData)\n    }]\n  }; //get charges payments performance graph data\n\n  const otherChargesCollectionPerformanceData = {\n    labels: getPeriodDisplayValue(Object.keys(otherChargesPaymentsPeformanceData)),\n    datasets: [{\n      label: 'Service Charges',\n      backgroundColor: \"rgba(174, 182, 191,0.6)\",\n      borderColor: 'rgba(174, 182, 191,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(174, 182, 191, 1)',\n      hoverBorderColor: 'rgba(174, 182, 191,1)',\n      data: getPerformanceDataFromObject(otherChargesPaymentsPeformanceData)\n    }]\n  };\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageTitle: \"Property Performance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    direction: \"column\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PageHeading, {\n    text: \"Property Performance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      filter_year: getYear(new Date())\n    },\n    validationSchema: FilterYearSchema,\n    onSubmit: values => {\n      setFilteredTransactionItemsByYear(parseInt(values.filter_year));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 29\n    }\n  }, ({\n    values,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"yearFilterForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_filter\",\n    label: \"Property\",\n    id: \"property_filter\",\n    onChange: event => {\n      setPropertyFilter(event.target.value);\n    },\n    value: propertyFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"all\",\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 53\n    }\n  }, \"All\"), properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 61\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"filter_year\",\n    name: \"filter_year\",\n    label: \"Year\",\n    value: values.filter_year,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.filter_year && touched.filter_year,\n    helperText: touched.filter_year && errors.filter_year,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    form: \"yearFilterForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 64\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 49\n    }\n  }, \"SEARCH\")))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    alignItems: \"stretch\",\n    justify: \"space-around\",\n    key: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Rent Charges\",\n    value: currencyFormatter.format(totalRentCharges),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Rent Payments\",\n    value: currencyFormatter.format(totalRentPayments),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Rent Balances\",\n    value: currencyFormatter.format(totalRentChargesBalances),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    alignItems: \"stretch\",\n    justify: \"space-around\",\n    key: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Security Deposit Charges\",\n    value: currencyFormatter.format(totalSecurityDepositCharges),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Security Deposit Payments\",\n    value: currencyFormatter.format(totalSecurityDepositPayments),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Security Deposit Balances\",\n    value: currencyFormatter.format(totalSecurityDepositChargesBalances),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    alignItems: \"stretch\",\n    justify: \"space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Other Charges\",\n    value: currencyFormatter.format(totalOtherCharges),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Other Payments\",\n    value: currencyFormatter.format(totalOtherChargesPayments),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    xs: 12,\n    title: \"Total Other Charges Balances\",\n    value: currencyFormatter.format(totalOtherChargesBalances),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 21\n    }\n  }, \"Monthly Charges & Payments\"), /*#__PURE__*/React.createElement(Bar, {\n    data: chargesAndPaymentsGraphData,\n    options: graphOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 25\n    }\n  }, \"Collection Performance\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"div\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 25\n    }\n  }, \"Collected by:\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 25\n    }\n  }, \"Rent Collection\"), /*#__PURE__*/React.createElement(HorizontalBar, {\n    height: 250,\n    data: rentCollectionPerformanceData,\n    options: chargesPerformanceGraphsOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 25\n    }\n  }, \"Service Charge Collection\"), /*#__PURE__*/React.createElement(HorizontalBar, {\n    height: 250,\n    data: otherChargesCollectionPerformanceData,\n    options: chargesPerformanceGraphsOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 25\n    }\n  }, \"Income Categories\"), /*#__PURE__*/React.createElement(HorizontalBar, {\n    height: 250,\n    data: incomeCategoriesGraphData,\n    options: graphOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 25\n    }\n  }, \"Expenses\"), /*#__PURE__*/React.createElement(HorizontalBar, {\n    height: 250,\n    data: expensesCategoriesGraphData,\n    options: graphOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 25\n    }\n  })))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    properties: state.properties,\n    rentalCharges: state.rentalCharges.map(charge => {\n      const chargeDetails = {}; //get payments with this charge id\n\n      const chargePayments = state.rentalPayments.filter(payment => payment.charge_id === charge.id);\n\n      if (chargePayments.length) {\n        chargeDetails.payed_status = true;\n        chargeDetails.last_payment_date = chargePayments.slice(-1)[0].payment_date;\n      } else {\n        chargeDetails.payed_status = false;\n      }\n\n      const payed_amount = chargePayments.reduce((total, currentValue) => {\n        return total + parseFloat(currentValue.payment_amount) || 0;\n      }, 0);\n      chargeDetails.payed_amount = payed_amount;\n      chargeDetails.balance = parseFloat(charge.charge_amount) - payed_amount;\n      return Object.assign({}, charge, chargeDetails);\n    }),\n    expenses: state.expenses\n  };\n};\n\nexport default connect(mapStateToProps)(PropertyPerformancePage);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/PropertyPerformancePage.js"],"names":["React","useEffect","useState","Layout","connect","PageHeading","InfoDisplayPaper","Grid","Typography","Box","MenuItem","Button","TextField","SearchIcon","Bar","HorizontalBar","commonStyles","Yup","Formik","format","getYear","parse","isWithinInterval","addDays","isSameDay","getMonthsInYear","currencyFormatter","isSameMonth","chargesPerformanceGraphsOptions","responsive","tooltips","mode","scales","xAxes","ticks","min","max","graphOptions","elements","line","fill","yAxes","FilterYearSchema","object","shape","filter_year","number","typeError","required","positive","integer","monthsInYear","PropertyPerformancePage","rentalCharges","expenses","properties","classes","propertyFilter","setPropertyFilter","chargesItems","setChargesItems","expensesItems","setExpensesItems","filter","charge_date","Date","expense_date","setFilteredTransactionItemsByYear","filterYear","property_id","paymentsTypes","Set","chargeItem","payed_status","map","charge","charge_type","paymentTotalsForPaymentType","paymentType","reduce","total","currentValue","parseFloat","payed_amount","paymentsTypesForDisplay","result","toLowerCase","totalRentCharges","charge_amount","totalSecurityDepositCharges","totalOtherCharges","totalRentPayments","payment","totalSecurityDepositPayments","totalOtherChargesPayments","totalRentChargesBalances","totalSecurityDepositChargesBalances","totalOtherChargesBalances","monthsOfYearLabels","monthDate","incomeCategoriesGraphData","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","totalEachMonthRentCharges","chargeDate","currentTransaction","totalEachMonthRentPayments","totalEachMonthExpenses","expense","expenseDate","amount","expensesCategoriesGraphData","chargesAndPaymentsGraphData","type","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","rentChargesPaymentsPeformanceData","due_date","next_thirty","next_sixty","next_ninety","next_three_months","otherChargesPaymentsPeformanceData","forEach","rentCharge","rentChargeLastPaymentDate","last_payment_date","rentChargeDueDate","endOfNextThirtyDays","endOfNextSixtyDays","endOfNextNinetyDays","endOfNextThreeMonths","start","end","otherCharge","otherChargeLastPaymentDate","otherChargeDueDate","getPeriodDisplayValue","objectKeys","Array","from","key","displayName","getPerformanceDataFromObject","performanceObject","totalPerformanceDataPoints","Object","values","dataPoint","performanceDataPoint","rentCollectionPerformanceData","keys","otherChargesCollectionPerformanceData","parseInt","handleSubmit","touched","errors","handleChange","handleBlur","form","event","target","value","property","index","id","ref","mapStateToProps","state","chargeDetails","chargePayments","rentalPayments","charge_id","length","slice","payment_date","payment_amount","balance","assign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport PageHeading from \"../components/PageHeading\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Bar, HorizontalBar } from 'react-chartjs-2';\nimport { commonStyles } from '../components/commonStyles'\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { format, getYear, parse, isWithinInterval, addDays, isSameDay } from \"date-fns\";\nimport { getMonthsInYear, currencyFormatter } from \"../assets/commonAssets\";\nimport isSameMonth from \"date-fns/isSameMonth\";\n\n\nconst chargesPerformanceGraphsOptions = {\n    responsive: true,\n    tooltips: {\n        mode: 'label'\n    },\n    scales: {\n        xAxes: [\n            {\n                ticks: {\n                    min: 0,\n                    max: 100,\n                }\n            }\n        ]\n    }\n};\n\nconst graphOptions = {\n    responsive: true,\n    tooltips: {\n        mode: 'label'\n    },\n    elements: {\n        line: {\n            fill: false\n        }\n    },\n    scales: {\n        yAxes: [\n            {\n                ticks: {\n                    min: 0,\n                }\n            }\n        ],\n        xAxes: [\n            {\n                ticks: {\n                    min: 0,\n                }\n            }\n        ]\n    }\n};\n\nconst FilterYearSchema = Yup.object().shape({\n    filter_year: Yup.number()\n        .typeError(\"Year must be a number!\")\n        .required(\"Year is required\")\n        .positive(\"Year must be greater than 0\")\n        .max(2100, \"Sorry but we won't be here during those times.\")\n        .integer(),\n});\n\nconst monthsInYear = getMonthsInYear()\n\nlet PropertyPerformancePage = ({ rentalCharges, expenses, properties }) => {\n    const classes = commonStyles()\n    const [propertyFilter, setPropertyFilter] = useState(\"all\");\n    const [chargesItems, setChargesItems] = useState([]);\n    const [expensesItems, setExpensesItems] = useState(expenses);\n\n    useEffect(() => {\n        //get only rent charges for display in bar graph\n        setChargesItems(rentalCharges\n            .filter(({ charge_date }) =>\n                getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === getYear(new Date())\n            )\n        );\n    }, [rentalCharges]);\n\n    useEffect(() => {\n        setExpensesItems(expenses\n            .filter(({ expense_date }) => getYear(parse(expense_date, 'yyyy-MM-dd', new Date())) === getYear(new Date()))\n        );\n    }, [expenses]);\n\n    const setFilteredTransactionItemsByYear = (filterYear) => {\n        setChargesItems(\n            rentalCharges\n                .filter(({ charge_date, property_id }) =>\n                    (getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === filterYear)\n                    && (propertyFilter === \"all\" ? true : property_id === propertyFilter)\n                )\n        );\n        setExpensesItems(\n            expenses\n                .filter(({ expense_date, property_id }) =>\n                    (getYear(parse(expense_date, 'yyyy-MM-dd', new Date())) === filterYear)\n                    && (propertyFilter === \"all\" ? true : property_id === propertyFilter)\n                )\n        );\n    };\n    //get the different charges types as a set\n    const paymentsTypes = [...new Set(chargesItems.filter(chargeItem => chargeItem.payed_status)\n        .map(charge => charge.charge_type))]\n    //get totals payments for each payment type\n    const paymentTotalsForPaymentType = paymentsTypes.map(paymentType => {\n        return chargesItems.filter(charge => charge.charge_type === paymentType && charge.payed_status)\n            .reduce((total, currentValue) => {\n                return total + parseFloat(currentValue.payed_amount) || 0\n            }, 0)\n    })\n    const paymentsTypesForDisplay = paymentsTypes.map(paymentType => {\n        let result;\n        switch (paymentType.toLowerCase()) {\n            case 'security_deposit':\n                result = \"Security Deposit\"\n                break;\n            case 'rent':\n                result = \"Rent\"\n                break;\n            case 'water':\n                result = \"Water\"\n                break;\n            case 'electric':\n                result = \"Electricity\"\n                break;\n            case 'recurring_charge':\n                result = \"Recurring Charges\"\n                break;\n            case 'meter_type' || \"meter\":\n                result = \"Utility Charge\"\n                break;\n            case 'one_time_charge':\n                result = \"One Time Charge\"\n                break;\n            default:\n                result = \"Others\"\n                break;\n        }\n        return result;\n    })\n\n    //get the total values of the various charges and payments \n    const totalRentCharges = chargesItems.filter(charge => charge.charge_type === 'rent')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    //get total security deposit charges \n    const totalSecurityDepositCharges = chargesItems.filter(charge => charge.charge_type === 'security_deposit')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    const totalOtherCharges = chargesItems.filter(charge => charge.charge_type !== 'rent' && charge.charge_type !== 'security_deposit')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    const totalRentPayments = chargesItems.filter(payment => payment.charge_type === 'rent')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n\n    //get total security deposit payments\n    const totalSecurityDepositPayments = chargesItems.filter(payment => payment.charge_type === 'security_deposit')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n\n    const totalOtherChargesPayments = chargesItems.filter(payment => payment.charge_type !== 'rent' && payment.charge_type !== 'security_deposit')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n\n    const totalRentChargesBalances = totalRentCharges - totalRentPayments\n    const totalSecurityDepositChargesBalances = totalSecurityDepositCharges - totalSecurityDepositPayments\n    const totalOtherChargesBalances = totalOtherCharges - totalOtherChargesPayments\n    //get months in an year in short format\n    const monthsOfYearLabels = monthsInYear.map((monthDate) => format(monthDate, 'MMMM'));\n\n    //GET INCOME CATEGORIES GRAPH DATA FROM PREVIOUS VALUES\n    const incomeCategoriesGraphData = {\n        labels: paymentsTypesForDisplay,\n        datasets: [\n            {\n                label: 'Income Categories',\n                backgroundColor: 'rgba(130, 224, 170,0.6)',\n                borderColor: 'rgba(130, 224, 170,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(130, 224, 170,1)',\n                hoverBorderColor: 'rgba(130, 224, 170,1)',\n                data: paymentTotalsForPaymentType\n            }\n        ]\n    }\n    //get ONLY RENT charges for each month of the year\n    const totalEachMonthRentCharges = monthsInYear.map((monthDate) => {\n        //get rentalPayments recorded in the same month and year as monthDate\n        return chargesItems\n            .filter(({ charge_date, charge_type }) => {\n                const chargeDate = parse(charge_date, 'yyyy-MM-dd', new Date())\n                return (charge_type === 'rent') && isSameMonth(monthDate, chargeDate)\n            }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.charge_amount) || 0), 0)\n    })\n    //get ONLY RENT payments for each month of the year\n    const totalEachMonthRentPayments = monthsInYear.map((monthDate) => {\n        //get rentalPayments recorded in the same month and year as monthDate\n        return chargesItems\n            .filter(({ charge_date, charge_type }) => {\n                const chargeDate = parse(charge_date, 'yyyy-MM-dd', new Date())\n                return (charge_type === 'rent') && isSameMonth(monthDate, chargeDate)\n            }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payed_amount) || 0), 0)\n    })\n    const totalEachMonthExpenses = monthsInYear.map((monthDate) => {\n        //get rentalPayments recorded in the same month and year as monthDate\n        return expensesItems\n            .filter((expense) => {\n                const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date())\n                return isSameMonth(monthDate, expenseDate)\n            }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.amount) || 0), 0)\n    })\n\n\n    //get expenses categories graph data from previous values\n    const expensesCategoriesGraphData = {\n        labels: monthsOfYearLabels,\n        datasets: [\n            {\n                label: 'Expenses',\n                backgroundColor: \"rgba(174, 182, 191,0.6)\",\n                borderColor: 'rgba(174, 182, 191,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(174, 182, 191, 1)',\n                hoverBorderColor: 'rgba(174, 182, 191,1)',\n                data: totalEachMonthExpenses\n            }\n        ]\n    }\n\n    //get charges and payments graph data from previous values\n    const chargesAndPaymentsGraphData = {\n        labels: monthsOfYearLabels,\n        datasets: [\n            {\n                data: totalEachMonthRentCharges,\n                label: 'Monthly Rent Charges', type: 'line', borderColor: '#EC932F', fill: false,\n                backgroundColor: '#EC932F',\n                pointBorderColor: '#EC932F',\n                pointBackgroundColor: '#EC932F',\n                pointHoverBackgroundColor: '#EC932F',\n                pointHoverBorderColor: '#EC932F',\n            },\n            {\n                data: totalEachMonthRentPayments,\n                label: 'Monthly Rent Payments Collection', type: 'bar',\n                fill: false,\n                backgroundColor: '#71B37C',\n                borderColor: '#71B37C',\n                hoverBackgroundColor: '#71B37C',\n                hoverBorderColor: '#71B37C',\n            },\n        ]\n    }\n\n    const rentChargesPaymentsPeformanceData = {\n        due_date: 0,\n        next_thirty: 0,\n        next_sixty: 0,\n        next_ninety: 0,\n        next_three_months: 0,\n    }\n    const otherChargesPaymentsPeformanceData = {\n        due_date: 0,\n        next_thirty: 0,\n        next_sixty: 0,\n        next_ninety: 0,\n        next_three_months: 0,\n    }\n\n    chargesItems.filter(({ charge_type, payed_status }) => charge_type === \"rent\" && payed_status)\n        .forEach(rentCharge => {\n            const rentChargeLastPaymentDate = parse(rentCharge.last_payment_date, 'yyyy-MM-dd', new Date())\n            const rentChargeDueDate = parse(rentCharge.due_date, 'yyyy-MM-dd', new Date())\n            const endOfNextThirtyDays = addDays(rentChargeDueDate, 30);\n            const endOfNextSixtyDays = addDays(rentChargeDueDate, 60);\n            const endOfNextNinetyDays = addDays(rentChargeDueDate, 90);\n            const endOfNextThreeMonths = new Date(2100, 0, 1);\n            //check if payment was made on the due date\n            if (isSameDay(rentChargeLastPaymentDate, rentChargeDueDate)) {\n                rentChargesPaymentsPeformanceData['due_date'] += 1\n            }\n            //check if payment was made within 7 days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: rentChargeDueDate, end: endOfNextThirtyDays })) {\n                rentChargesPaymentsPeformanceData['next_thirty'] += 1\n            }\n            //check if payment was made within 14 days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: endOfNextThirtyDays, end: endOfNextSixtyDays })) {\n                rentChargesPaymentsPeformanceData['next_sixty'] += 1\n            }\n            //check if payment was made within 30 days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: endOfNextSixtyDays, end: endOfNextNinetyDays })) {\n                rentChargesPaymentsPeformanceData['next_ninety'] += 1\n            }\n            //check if payment was made within 120+ days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: endOfNextNinetyDays, end: endOfNextThreeMonths })) {\n                rentChargesPaymentsPeformanceData['next_three_months'] += 1\n            }\n        })\n    chargesItems.filter(({ charge_type, payed_status }) => charge_type !== \"rent\" && payed_status)\n        .forEach(otherCharge => {\n            const otherChargeLastPaymentDate = parse(otherCharge.last_payment_date, 'yyyy-MM-dd', new Date())\n            const otherChargeDueDate = parse(otherCharge.due_date, 'yyyy-MM-dd', new Date())\n            const endOfNextThirtyDays = addDays(otherChargeDueDate, 30);\n            const endOfNextSixtyDays = addDays(otherChargeDueDate, 60);\n            const endOfNextNinetyDays = addDays(otherChargeDueDate, 90);\n            const endOfNextThreeMonths = new Date(2100, 0, 1);\n            //check if payment was made on the due date\n            if (otherChargeLastPaymentDate === otherChargeDueDate) {\n                otherChargesPaymentsPeformanceData['due_date'] += 1\n            }\n            //check if payment was made within 7 days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: otherChargeDueDate, end: endOfNextThirtyDays })) {\n                otherChargesPaymentsPeformanceData['next_thirty'] += 1\n            }\n            //check if payment was made within 14 days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: endOfNextThirtyDays, end: endOfNextSixtyDays })) {\n                otherChargesPaymentsPeformanceData['next_sixty'] += 1\n            }\n            //check if payment was made within 30 days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: endOfNextSixtyDays, end: endOfNextNinetyDays })) {\n                otherChargesPaymentsPeformanceData['next_ninety'] += 1\n            }\n            //check if payment was made within 120+ days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: endOfNextNinetyDays, end: endOfNextThreeMonths })) {\n                otherChargesPaymentsPeformanceData['next_three_months'] += 1\n            }\n        })\n\n    const getPeriodDisplayValue = (objectKeys) => {\n        return Array.from(objectKeys).map(key => {\n            let displayName;\n            switch (key) {\n                case \"due_date\":\n                    displayName = \"Due Date\"\n                    break;\n                case \"next_thirty\":\n                    displayName = \"Due Date + 30 days\"\n                    break;\n                case \"next_sixty\":\n                    displayName = \"Due Date + 60 days\"\n                    break;\n                case \"next_ninety\":\n                    displayName = \"Due Date + 90 days\"\n                    break;\n                case \"next_three_months\":\n                    displayName = \"Due Date + 120 days\"\n                    break;\n                default:\n                    break;\n            }\n            return displayName;\n        })\n    }\n\n    const getPerformanceDataFromObject = (performanceObject) => {\n        const totalPerformanceDataPoints = Object.values(performanceObject)\n            .reduce((total, dataPoint) => total + dataPoint, 0)\n        return Object.values(performanceObject)\n            .map(performanceDataPoint => (performanceDataPoint / totalPerformanceDataPoints) * 100)\n    }\n\n    //get charges payments performance graph data\n    const rentCollectionPerformanceData = {\n        labels: getPeriodDisplayValue(Object.keys(rentChargesPaymentsPeformanceData)),\n        datasets: [\n            {\n                label: 'Rent',\n                backgroundColor: \"rgba(174, 184, 191,0.6)\",\n                borderColor: 'rgba(174, 184, 191,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(174, 184, 191, 1)',\n                hoverBorderColor: 'rgba(174, 184, 191,1)',\n                data: getPerformanceDataFromObject(rentChargesPaymentsPeformanceData)\n            }\n        ]\n    }\n\n    //get charges payments performance graph data\n    const otherChargesCollectionPerformanceData = {\n        labels: getPeriodDisplayValue(Object.keys(otherChargesPaymentsPeformanceData)),\n        datasets: [\n            {\n                label: 'Service Charges',\n                backgroundColor: \"rgba(174, 182, 191,0.6)\",\n                borderColor: 'rgba(174, 182, 191,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(174, 182, 191, 1)',\n                hoverBorderColor: 'rgba(174, 182, 191,1)',\n                data: getPerformanceDataFromObject(otherChargesPaymentsPeformanceData)\n            }\n        ]\n    }\n\n    return (\n        <Layout pageTitle=\"Property Performance\">\n            <Grid container justify=\"center\" direction=\"column\" spacing={4}>\n                <Grid item key={0}>\n                    <PageHeading text=\"Property Performance\" />\n                </Grid>\n                <Grid container item direction=\"column\" spacing={2}>\n                    <Grid item>\n                        <Box\n                            border={1}\n                            borderRadius=\"borderRadius\"\n                            borderColor=\"grey.400\"\n                        >\n                            <Formik\n                                initialValues={{ filter_year: getYear(new Date()) }}\n                                validationSchema={FilterYearSchema}\n                                onSubmit={(values) => {\n                                    setFilteredTransactionItemsByYear(parseInt(values.filter_year));\n                                }}\n                            >\n                                {({\n                                    values,\n                                    handleSubmit,\n                                    touched,\n                                    errors,\n                                    handleChange,\n                                    handleBlur,\n                                }) => (\n                                    <form\n                                        className={classes.form}\n                                        id=\"yearFilterForm\"\n                                        onSubmit={handleSubmit}\n                                    >\n                                        <Grid\n                                            container\n                                            spacing={2}\n                                            alignItems=\"center\"\n                                            justify=\"center\"\n                                            direction=\"row\"\n                                        >\n                                            <Grid item sm={3}>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    variant=\"outlined\"\n                                                    name=\"property_filter\"\n                                                    label=\"Property\"\n                                                    id=\"property_filter\"\n                                                    onChange={(event) => {\n                                                        setPropertyFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    value={propertyFilter}\n                                                >\n                                                    <MenuItem key={\"all\"} value={\"all\"}>All</MenuItem>\n                                                    {properties.map(\n                                                        (property, index) => (\n                                                            <MenuItem\n                                                                key={index}\n                                                                value={property.id}\n                                                            >\n                                                                {property.ref}\n                                                            </MenuItem>\n                                                        )\n                                                    )}\n                                                </TextField>\n                                            </Grid>\n                                            <Grid item>\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    id=\"filter_year\"\n                                                    name=\"filter_year\"\n                                                    label=\"Year\"\n                                                    value={values.filter_year}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={errors.filter_year && touched.filter_year}\n                                                    helperText={\n                                                        touched.filter_year && errors.filter_year\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item>\n                                                <Button\n                                                    type=\"submit\"\n                                                    form=\"yearFilterForm\"\n                                                    color=\"primary\"\n                                                    variant=\"contained\"\n                                                    size=\"medium\"\n                                                    startIcon={<SearchIcon />}\n                                                >\n                                                    SEARCH\n                                                </Button>\n                                            </Grid>\n                                        </Grid>\n                                    </form>\n                                )}\n                            </Formik>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid\n                    item\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    alignItems=\"stretch\"\n                    justify=\"space-around\"\n                    key={3}\n                >\n                    <InfoDisplayPaper xs={12} title={\"Total Rent Charges\"} value={currencyFormatter.format(totalRentCharges)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Rent Payments\"} value={currencyFormatter.format(totalRentPayments)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Rent Balances\"} value={currencyFormatter.format(totalRentChargesBalances)} />\n                </Grid>\n                <Grid\n                    item\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    alignItems=\"stretch\"\n                    justify=\"space-around\"\n                    key={3}\n                >\n                    <InfoDisplayPaper xs={12} title={\"Total Security Deposit Charges\"} value={currencyFormatter.format(totalSecurityDepositCharges)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Security Deposit Payments\"} value={currencyFormatter.format(totalSecurityDepositPayments)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Security Deposit Balances\"} value={currencyFormatter.format(totalSecurityDepositChargesBalances)} />\n                </Grid>\n                <Grid\n                    item\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    alignItems=\"stretch\"\n                    justify=\"space-around\"\n                >\n                    <InfoDisplayPaper xs={12} title={\"Total Other Charges\"} value={currencyFormatter.format(totalOtherCharges)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Other Payments\"} value={currencyFormatter.format(totalOtherChargesPayments)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Other Charges Balances\"} value={currencyFormatter.format(totalOtherChargesBalances)} />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                        Monthly Charges &amp; Payments\n                    </Typography>\n                    <Bar\n                        data={chargesAndPaymentsGraphData}\n                        options={graphOptions}>\n                    </Bar>\n                </Grid>\n                <Grid item container direction=\"column\" spacing={1}>\n                    <Grid item>\n                        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n                            Collection Performance\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography component=\"div\" align=\"center\">\n                            Collected by:\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <Grid item container direction=\"row\" spacing={4}>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Rent Collection\n                        </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={rentCollectionPerformanceData}\n                            options={chargesPerformanceGraphsOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Service Charge Collection\n                        </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={otherChargesCollectionPerformanceData}\n                            options={chargesPerformanceGraphsOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                </Grid>\n                <Grid item container direction=\"row\" spacing={4}>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Income Categories\n                        </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={incomeCategoriesGraphData}\n                            options={graphOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Expenses\n                        </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={expensesCategoriesGraphData}\n                            options={graphOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        properties: state.properties,\n        rentalCharges: state.rentalCharges.map((charge) => {\n            const chargeDetails = {}\n            //get payments with this charge id\n            const chargePayments = state.rentalPayments.filter((payment) => payment.charge_id === charge.id)\n            if (chargePayments.length) {\n                chargeDetails.payed_status = true\n                chargeDetails.last_payment_date = chargePayments.slice(-1)[0].payment_date\n            } else {\n                chargeDetails.payed_status = false\n            }\n            const payed_amount = chargePayments.reduce((total, currentValue) => {\n                return total + parseFloat(currentValue.payment_amount) || 0\n            }, 0)\n            chargeDetails.payed_amount = payed_amount\n            chargeDetails.balance = parseFloat(charge.charge_amount) - payed_amount\n            return Object.assign({}, charge, chargeDetails);\n        }),\n        expenses: state.expenses,\n    };\n};\n\nexport default connect(mapStateToProps)(PropertyPerformancePage);\n"]},"metadata":{},"sourceType":"module"}