{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/sales/SaleInputForm.js\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst SaleSchema = Yup.object().shape({\n  meter_type: Yup.string().trim().required(\"Meter Type is required\"),\n  prior_value: Yup.number().required(\"Prior Value is required\").min(0, \"Amount must be greater than 0\"),\n  sale_price: Yup.number().min(Yup.ref('prior_value'), 'Current Value must be greater than prior value').required(\"Current Value is required\"),\n  unit_charge: Yup.number().min(0, \"Amount must be greater than 0\").required(\"Unit Charge is Required\"),\n  base_charge: Yup.number().min(0, \"Amount must be greater than 0\").default(0),\n  sale_date: Yup.date().required(\"Reading Date Required\"),\n  property_id: Yup.string().trim().required(\"Property is Required\"),\n  product_id: Yup.string().trim().required(\"Unit is Required\")\n});\n\nconst SaleInputForm = ({\n  products,\n  contacts,\n  history,\n  saleToEdit,\n  handleItemSubmit\n}) => {\n  const classes = commonStyles();\n  const productValues = {\n    id: saleToEdit.id,\n    property_id: saleToEdit.property_id || '',\n    product_id: saleToEdit.product_id || '',\n    sale_date: saleToEdit.sale_date || defaultDate,\n    prior_value: saleToEdit.prior_value || '',\n    sale_price: saleToEdit.sale_price || '',\n    base_charge: saleToEdit.base_charge || '',\n    unit_charge: saleToEdit.unit_charge || '',\n    tenant_id: saleToEdit.tenant_id || ''\n  };\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: productValues,\n    enableReinitialize: true,\n    validationSchema: SaleSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      try {\n        const product = {\n          id: values.id,\n          prior_value: values.prior_value,\n          sale_price: values.sale_price,\n          base_charge: values.base_charge,\n          unit_charge: values.unit_charge,\n          product_id: values.product_id,\n          property_id: values.property_id,\n          sale_date: values.sale_date\n        }; //assign usage values to meter reading\n\n        product.usage = values.sale_price - values.prior_value;\n        product.amount = product.usage * parseFloat(values.unit_charge) + parseFloat(values.base_charge);\n        await handleItemSubmit(product, \"meter_readings\");\n\n        if (!values.id) {\n          const newSaleCharge = {\n            charge_amount: product.amount,\n            charge_date: values.sale_date,\n            charge_label: `${values.meter_type} meter charge`,\n            charge_type: values.meter_type,\n            due_date: values.sale_date,\n            tenant_id: product.tenant_id,\n            product_id: values.product_id,\n            property_id: values.property_id\n          };\n          await handleItemSubmit(newSaleCharge, \"transactions-charges\");\n        }\n\n        resetForm({});\n\n        if (values.id) {\n          history.goBack();\n        }\n\n        setStatus({\n          sent: true,\n          msg: \"Meter reading and charge saved.\"\n        });\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    setFieldValue,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"meterInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"stretch\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"contact_id\",\n    label: \"Customer\",\n    id: \"contact_id\",\n    onChange: event => {\n      setFieldValue('contact_id', event.target.value);\n      setFieldValue('contact_id', '');\n    },\n    value: values.contact_id,\n    error: errors.contact_id && touched.contact_id,\n    helperText: touched.contact_id && errors.contact_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, contacts.map((contact, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: contact.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, contact.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"product_id\",\n    label: \"Product Name\",\n    id: \"product_id\",\n    onChange: handleChange,\n    value: values.product_id,\n    error: errors.product_id && touched.product_id,\n    helperText: touched.product_id && errors.product_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, products.map((product, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: product.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, product.product_name))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"sale_date\",\n    name: \"sale_date\",\n    label: \"Sale Date\",\n    value: values.sale_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.sale_date && touched.sale_date,\n    helperText: touched.sale_date && errors.sale_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"sale_price\",\n    name: \"sale_price\",\n    label: \"Sale Price\",\n    value: values.sale_price,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.sale_price && touched.sale_price,\n    helperText: touched.sale_price && errors.sale_price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 30\n      }\n    }),\n    onClick: () => history.goBack(),\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 30\n      }\n    }),\n    form: \"meterInputForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, \"Save\"))))));\n};\n\nexport default SaleInputForm;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/sales/SaleInputForm.js"],"names":["React","Grid","Button","TextField","MenuItem","CustomSnackbar","Formik","commonStyles","SaveIcon","CancelIcon","Yup","format","startOfToday","CustomCircularProgress","defaultDate","SaleSchema","object","shape","meter_type","string","trim","required","prior_value","number","min","sale_price","ref","unit_charge","base_charge","default","sale_date","date","property_id","product_id","SaleInputForm","products","contacts","history","saleToEdit","handleItemSubmit","classes","productValues","id","tenant_id","values","resetForm","setStatus","product","usage","amount","parseFloat","newSaleCharge","charge_amount","charge_date","charge_label","charge_type","due_date","goBack","sent","msg","error","status","handleSubmit","setFieldValue","errors","touched","handleChange","handleBlur","isSubmitting","form","event","target","value","contact_id","map","contact","index","product_name","shrink","buttonBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\"; \nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\n\nconst SaleSchema = Yup.object().shape({\n  meter_type: Yup.string().trim().required(\"Meter Type is required\"),\n  prior_value: Yup.number().required(\"Prior Value is required\").min(0,\"Amount must be greater than 0\"),\n  sale_price: Yup.number().min(Yup.ref('prior_value'), 'Current Value must be greater than prior value').required(\"Current Value is required\"),\n  unit_charge: Yup.number().min(0,\"Amount must be greater than 0\").required(\"Unit Charge is Required\"),\n  base_charge: Yup.number().min(0,\"Amount must be greater than 0\").default(0),\n  sale_date: Yup.date().required(\"Reading Date Required\"),\n  property_id: Yup.string().trim().required(\"Property is Required\"),\n  product_id: Yup.string().trim().required(\"Unit is Required\"),\n});\n\n\nconst SaleInputForm = ({ products, contacts, history, saleToEdit, handleItemSubmit }) => {\n\n  const classes = commonStyles();\n  const productValues = {\n    id: saleToEdit.id,\n    property_id: saleToEdit.property_id || '',\n    product_id: saleToEdit.product_id || '',\n    sale_date: saleToEdit.sale_date || defaultDate,\n    prior_value: saleToEdit.prior_value || '',\n    sale_price: saleToEdit.sale_price || '',\n    base_charge: saleToEdit.base_charge || '',\n    unit_charge: saleToEdit.unit_charge || '',\n    tenant_id: saleToEdit.tenant_id || '',\n  }\n\n  return (\n    <Formik\n      initialValues={productValues}\n      enableReinitialize\n      validationSchema={SaleSchema}\n      onSubmit={async (values, { resetForm, setStatus }) => {\n        try {\n          const product = {\n            id: values.id,\n            prior_value: values.prior_value,\n            sale_price: values.sale_price,\n            base_charge: values.base_charge,\n            unit_charge: values.unit_charge,\n            product_id: values.product_id,\n            property_id: values.property_id,\n            sale_date: values.sale_date,\n          };\n          //assign usage values to meter reading\n          product.usage = values.sale_price - values.prior_value\n          product.amount = (product.usage * parseFloat(values.unit_charge)) + parseFloat(values.base_charge)\n          await handleItemSubmit(product, \"meter_readings\")\n          if (!values.id) {\n            const newSaleCharge = {\n              charge_amount: product.amount,\n              charge_date: values.sale_date,\n              charge_label: `${values.meter_type} meter charge`,\n              charge_type: values.meter_type,\n              due_date: values.sale_date,\n              tenant_id: product.tenant_id,\n              product_id: values.product_id,\n              property_id: values.property_id,\n            }\n            await handleItemSubmit(newSaleCharge, \"transactions-charges\")\n          }\n          resetForm({})\n          if (values.id) {\n            history.goBack();\n          }\n          setStatus({ sent: true, msg: \"Meter reading and charge saved.\" })\n        } catch (error) {\n          setStatus({ sent: false, msg: `Error! ${error}.` })\n        }\n      }}\n    >\n      {({\n        values,\n        status,\n        handleSubmit,\n        setFieldValue,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n      }) => (\n        <form\n          className={classes.form}\n          method=\"post\"\n          id=\"meterInputForm\"\n          onSubmit={handleSubmit}\n        >\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n          >\n            {\n              status && status.msg && (\n                <CustomSnackbar\n                  variant={status.sent ? \"success\" : \"error\"}\n                  message={status.msg}\n                />\n              )\n            }\n            {\n              isSubmitting && (<CustomCircularProgress open={true} />)\n            }\n            <Grid item container direction=\"row\" spacing={2}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  variant=\"outlined\"\n                  name=\"contact_id\"\n                  label=\"Customer\"\n                  id=\"contact_id\"\n                  onChange={(event) => {\n                    setFieldValue('contact_id', event.target.value)\n                    setFieldValue('contact_id', '')\n                  }\n                  }\n                  value={values.contact_id}\n                  error={errors.contact_id && touched.contact_id}\n                  helperText={touched.contact_id && errors.contact_id}\n                >\n                  {contacts.map((contact, index) => (\n                    <MenuItem key={index} value={contact.id}>\n                      {contact.ref}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  variant=\"outlined\"\n                  name=\"product_id\"\n                  label=\"Product Name\"\n                  id=\"product_id\"\n                  onChange={handleChange}\n                  value={values.product_id}\n                  error={errors.product_id && touched.product_id}\n                  helperText={touched.product_id && errors.product_id}\n\n                >\n                  {products.map((product, index) => (\n                    <MenuItem key={index} value={product.id}>\n                      {product.product_name}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                type=\"date\"\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n                id=\"sale_date\"\n                name=\"sale_date\"\n                label=\"Sale Date\"\n                value={values.sale_date}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.sale_date && touched.sale_date}\n                helperText={touched.sale_date && errors.sale_date}\n\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"sale_price\"\n                name=\"sale_price\"\n                label=\"Sale Price\"\n                value={values.sale_price}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.sale_price && touched.sale_price}\n                helperText={touched.sale_price && errors.sale_price}\n              />\n            </Grid>\n            <Grid item container className={classes.buttonBox}>\n              <Grid item>\n                <Button\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => history.goBack()}\n                  disableElevation\n                >\n                  Cancel\n                  </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<SaveIcon />}\n                  form=\"meterInputForm\"\n                  disabled={isSubmitting}\n                >\n                  Save\n                  </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default SaleInputForm;\n"]},"metadata":{},"sourceType":"module"}