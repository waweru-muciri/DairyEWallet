{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/DashBoard.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport PageHeading from \"../components/PageHeading\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Bar } from 'react-chartjs-2';\nimport { commonStyles } from '../components/commonStyles';\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { format, getYear, startOfYear, endOfYear, startOfToday, parse, eachMonthOfInterval, isSameMonth } from \"date-fns\";\nimport { getUnitTypes } from \"../assets/commonAssets\";\nconst options = {\n  responsive: true,\n  tooltips: {\n    mode: 'label'\n  },\n  elements: {\n    line: {\n      fill: false\n    }\n  },\n  scales: {\n    yAxes: [{\n      ticks: {\n        min: 0\n      }\n    }]\n  }\n};\nconst FilterYearSchema = Yup.object().shape({\n  filter_year: Yup.number().typeError(\"Year must be a number!\").required(\"Year is required\").min(2000, \"Sorry, were not present then.\").max(2100, \"Sorry, but we won't be here during those times.\").integer()\n});\nvar monthsInYear = eachMonthOfInterval({\n  start: startOfYear(startOfToday()),\n  end: endOfYear(startOfToday())\n}); //get the various unit types \n\nconst UNIT_TYPES = getUnitTypes();\nconst currentYear = new Date().getFullYear();\n\nlet DashBoardPage = props => {\n  const classes = commonStyles();\n  const {\n    propertyUnits,\n    sales,\n    rentalCharges,\n    leases,\n    properties\n  } = props;\n  const [transactionItems, setSaleItems] = useState([]);\n  const [propertyUnitItems, setPropertyUnitItems] = useState([]);\n  const [leaseItems, setLeaseItems] = useState([]);\n  const [propertyFilter, setPropertyFilter] = useState(\"all\");\n  const [chargesItems, setChargesItems] = useState([]);\n  const propertyActiveLeases = leaseItems.filter(({\n    terminated\n  }) => terminated !== true);\n  useEffect(() => {\n    setPropertyUnitItems(propertyUnits);\n  }, [propertyUnits]);\n  useEffect(() => {\n    setLeaseItems(leases);\n  }, [leases]);\n  useEffect(() => {\n    const rentalChargesForCurrentYear = rentalCharges.filter(({\n      charge_date\n    }) => getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === currentYear);\n    setChargesItems(rentalChargesForCurrentYear);\n  }, [rentalCharges]);\n  useEffect(() => {\n    const salesPaymentsForCurrentYear = sales.filter(({\n      sale_date\n    }) => getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === currentYear);\n    setSaleItems(salesPaymentsForCurrentYear);\n  }, [sales]);\n\n  const setFilteredSaleItemsByYear = filterYear => {\n    setSaleItems(sales.filter(({\n      sale_date,\n      property_id\n    }) => getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === filterYear && (propertyFilter === \"all\" ? true : property_id === propertyFilter)));\n    setChargesItems(rentalCharges.filter(({\n      charge_date,\n      property_id\n    }) => getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === filterYear && (propertyFilter === \"all\" ? true : property_id === propertyFilter)));\n    setPropertyUnitItems(propertyUnits.filter(({\n      property_id\n    }) => propertyFilter === \"all\" ? true : property_id === propertyFilter));\n    setLeaseItems(leases.filter(({\n      property_id\n    }) => propertyFilter === \"all\" ? true : property_id === propertyFilter));\n  }; //GET THE TOTAL NUMBER OF PROPERTY UNITS\n\n\n  const TOTAL_PROPERTY_UNITS = propertyUnitItems.length; //GET THE NUMBER OF THE DIFFERENT UNIT TYPES \n\n  const EACH_UNIT_TYPE_WITH_AMOUNT = UNIT_TYPES.map(unitType => {\n    const numberOfUnitsOfType = propertyUnitItems.filter(property => property.unit_type === unitType.id).length;\n    return {\n      units_name: `${unitType.displayValue}(s)`,\n      units_amount: numberOfUnitsOfType\n    };\n  }); //GET THE NUMBER OF CURRENTLY OCCUPIED UNITS\n\n  const OCCUPIED_HOUSES = propertyActiveLeases.length; // CREATE A UNIT OCCUPANCY DISPLAY DATA ARRAY INSTEAD OF REPEATING MULTIPLE ELEMENTS\n\n  const UNIT_OCCUPANCY_SUMMARY_DATA = [{\n    title: \"Total Units\",\n    value: TOTAL_PROPERTY_UNITS\n  }, {\n    title: \"Currently Occupied Units\",\n    value: OCCUPIED_HOUSES\n  }, {\n    title: \"Currently Unoccupied Units\",\n    value: TOTAL_PROPERTY_UNITS - OCCUPIED_HOUSES\n  }, {\n    title: \"Current Month Occupancy Rate\",\n    value: OCCUPIED_HOUSES / TOTAL_PROPERTY_UNITS * 100 | 0\n  }]; //GET THE TOTAL PAYMENTS FOR EACH MONTH IN THE SELECTED YEAR\n\n  const totalEachMonthPayments = monthsInYear.map(monthDate => {\n    //get sales recorded in the same month and year as monthDate\n    return transactionItems.filter(sale => {\n      const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date());\n      return isSameMonth(monthDate, saleDate);\n    }).reduce((total, currentSale) => total + (parseFloat(currentSale.sale_amount) || 0), 0);\n  }); // MAKE AN OBJECT FOR SHOWING AN INCOME GRAPH, BY MONTH, LATER\n  // LABELS ARE MONTHS IN THE YEAR IN SHORT FORMAT\n\n  const rentIncomeData = {\n    datasets: [{\n      data: totalEachMonthPayments,\n      label: 'Monthly Payments Collection',\n      type: 'bar',\n      fill: false,\n      backgroundColor: '#71B37C',\n      borderColor: '#71B37C',\n      hoverBackgroundColor: '#71B37C',\n      hoverBorderColor: '#71B37C'\n    }],\n    labels: monthsInYear.map(monthDate => format(monthDate, 'MMMM'))\n  };\n  const totalEachMonthCharges = monthsInYear.map(monthDate => {\n    //get sales recorded in the same month and year as monthDate\n    return chargesItems.filter(charge => {\n      const chargeDate = parse(charge.charge_date, 'yyyy-MM-dd', new Date());\n      return isSameMonth(monthDate, chargeDate);\n    }).reduce((total, currentSale) => total + (parseFloat(currentSale.charge_amount) || 0), 0);\n  });\n  rentIncomeData.datasets.push({\n    data: totalEachMonthCharges,\n    label: 'Monthly Charges',\n    type: 'line',\n    borderColor: '#EC932F',\n    fill: false,\n    backgroundColor: '#EC932F',\n    pointBorderColor: '#EC932F',\n    pointBackgroundColor: '#EC932F',\n    pointHoverBackgroundColor: '#EC932F',\n    pointHoverBorderColor: '#EC932F'\n  });\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageTitle: \"Overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    direction: \"column\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageHeading, {\n    text: \"Overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      filter_year: currentYear\n    },\n    validationSchema: FilterYearSchema,\n    onSubmit: values => {\n      setFilteredSaleItemsByYear(parseInt(values.filter_year));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, ({\n    values,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"yearFilterForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_filter\",\n    label: \"Property\",\n    id: \"property_filter\",\n    onChange: event => {\n      setPropertyFilter(event.target.value);\n    },\n    value: propertyFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"all\",\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 29\n    }\n  }, \"All\"), properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 33\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"filter_year\",\n    name: \"filter_year\",\n    label: \"Year\",\n    value: values.filter_year,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.filter_year && touched.filter_year,\n    helperText: touched.filter_year && errors.filter_year,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    form: \"yearFilterForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 40\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 27\n    }\n  }, \"SEARCH\"))))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    alignItems: \"stretch\",\n    justify: \"space-around\",\n    key: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, EACH_UNIT_TYPE_WITH_AMOUNT.map((unitTypeWithAmount, index) => /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    key: index,\n    xs: 6,\n    title: unitTypeWithAmount.units_name,\n    value: unitTypeWithAmount.units_amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    alignItems: \"stretch\",\n    justify: \"space-around\",\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }, UNIT_OCCUPANCY_SUMMARY_DATA.map((unitOccupancyData, index) => /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    key: index,\n    xs: 12,\n    title: unitOccupancyData.title,\n    value: unitOccupancyData.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }, \"Monthly Charges & Payments\"), /*#__PURE__*/React.createElement(Bar, {\n    data: rentIncomeData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    leases: state.leases,\n    properties: state.properties,\n    propertyUnits: state.propertyUnits,\n    rentalCharges: state.rentalCharges,\n    sales: state.sales\n  };\n};\n\nexport default connect(mapStateToProps)(DashBoardPage);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/DashBoard.js"],"names":["React","useEffect","useState","Layout","connect","PageHeading","InfoDisplayPaper","Grid","Typography","Box","MenuItem","Button","TextField","SearchIcon","Bar","commonStyles","Yup","Formik","format","getYear","startOfYear","endOfYear","startOfToday","parse","eachMonthOfInterval","isSameMonth","getUnitTypes","options","responsive","tooltips","mode","elements","line","fill","scales","yAxes","ticks","min","FilterYearSchema","object","shape","filter_year","number","typeError","required","max","integer","monthsInYear","start","end","UNIT_TYPES","currentYear","Date","getFullYear","DashBoardPage","props","classes","propertyUnits","sales","rentalCharges","leases","properties","transactionItems","setSaleItems","propertyUnitItems","setPropertyUnitItems","leaseItems","setLeaseItems","propertyFilter","setPropertyFilter","chargesItems","setChargesItems","propertyActiveLeases","filter","terminated","rentalChargesForCurrentYear","charge_date","salesPaymentsForCurrentYear","sale_date","setFilteredSaleItemsByYear","filterYear","property_id","TOTAL_PROPERTY_UNITS","length","EACH_UNIT_TYPE_WITH_AMOUNT","map","unitType","numberOfUnitsOfType","property","unit_type","id","units_name","displayValue","units_amount","OCCUPIED_HOUSES","UNIT_OCCUPANCY_SUMMARY_DATA","title","value","totalEachMonthPayments","monthDate","sale","saleDate","reduce","total","currentSale","parseFloat","sale_amount","rentIncomeData","datasets","data","label","type","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","labels","totalEachMonthCharges","charge","chargeDate","charge_amount","push","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","values","parseInt","handleSubmit","touched","errors","handleChange","handleBlur","form","event","target","index","ref","unitTypeWithAmount","unitOccupancyData","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport PageHeading from \"../components/PageHeading\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Bar } from 'react-chartjs-2';\nimport { commonStyles } from '../components/commonStyles'\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { format, getYear, startOfYear, endOfYear, startOfToday, parse, eachMonthOfInterval, isSameMonth } from \"date-fns\";\nimport { getUnitTypes } from \"../assets/commonAssets\";\n\n\nconst options = {\n  responsive: true,\n  tooltips: {\n    mode: 'label'\n  },\n  elements: {\n    line: {\n      fill: false\n    }\n  },\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          min: 0,\n        }\n      }\n    ],\n  }\n};\n\nconst FilterYearSchema = Yup.object().shape({\n  filter_year: Yup.number()\n    .typeError(\"Year must be a number!\")\n    .required(\"Year is required\")\n    .min(2000, \"Sorry, were not present then.\")\n    .max(2100, \"Sorry, but we won't be here during those times.\")\n    .integer(),\n});\n\nvar monthsInYear = eachMonthOfInterval({\n  start: startOfYear(startOfToday()),\n  end: endOfYear(startOfToday()),\n})\n\n//get the various unit types \nconst UNIT_TYPES = getUnitTypes();\n\nconst currentYear = new Date().getFullYear()\n\nlet DashBoardPage = (props) => {\n  const classes = commonStyles()\n  const { propertyUnits, sales, rentalCharges, leases, properties } = props;\n  const [transactionItems, setSaleItems] = useState([]);\n  const [propertyUnitItems, setPropertyUnitItems] = useState([]);\n  const [leaseItems, setLeaseItems] = useState([]);\n  const [propertyFilter, setPropertyFilter] = useState(\"all\");\n  const [chargesItems, setChargesItems] = useState([]);\n  const propertyActiveLeases = leaseItems.filter(({ terminated }) => terminated !== true)\n\n  useEffect(() => {\n    setPropertyUnitItems(propertyUnits);\n  }, [propertyUnits]);\n\n  useEffect(() => {\n    setLeaseItems(leases);\n  }, [leases]);\n\n  useEffect(() => {\n    const rentalChargesForCurrentYear = rentalCharges\n      .filter(({ charge_date }) => getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === currentYear)\n    setChargesItems(rentalChargesForCurrentYear);\n  }, [rentalCharges]);\n\n  useEffect(() => {\n    const salesPaymentsForCurrentYear = sales\n      .filter(({ sale_date }) => getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === currentYear)\n    setSaleItems(salesPaymentsForCurrentYear);\n  }, [sales]);\n\n  const setFilteredSaleItemsByYear = (filterYear) => {\n    setSaleItems(\n      sales\n        .filter(({ sale_date, property_id }) =>\n          (getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === filterYear)\n          && (propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        )\n    );\n    setChargesItems(\n      rentalCharges\n        .filter(({ charge_date, property_id }) =>\n          (getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === filterYear)\n          && (propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        )\n    );\n    setPropertyUnitItems(propertyUnits.filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter))\n    setLeaseItems(leases.filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter))\n  };\n  //GET THE TOTAL NUMBER OF PROPERTY UNITS\n  const TOTAL_PROPERTY_UNITS = propertyUnitItems.length;\n\n  //GET THE NUMBER OF THE DIFFERENT UNIT TYPES \n  const EACH_UNIT_TYPE_WITH_AMOUNT = UNIT_TYPES.map(unitType => {\n    const numberOfUnitsOfType = propertyUnitItems.filter((property) => property.unit_type === unitType.id).length;\n    return {\n      units_name: `${unitType.displayValue}(s)`,\n      units_amount: numberOfUnitsOfType,\n    }\n  })\n  //GET THE NUMBER OF CURRENTLY OCCUPIED UNITS\n  const OCCUPIED_HOUSES = propertyActiveLeases.length;\n\n  // CREATE A UNIT OCCUPANCY DISPLAY DATA ARRAY INSTEAD OF REPEATING MULTIPLE ELEMENTS\n  const UNIT_OCCUPANCY_SUMMARY_DATA = [\n    { title: \"Total Units\", value: TOTAL_PROPERTY_UNITS },\n    { title: \"Currently Occupied Units\", value: OCCUPIED_HOUSES },\n    { title: \"Currently Unoccupied Units\", value: TOTAL_PROPERTY_UNITS - OCCUPIED_HOUSES },\n    { title: \"Current Month Occupancy Rate\", value: ((OCCUPIED_HOUSES / TOTAL_PROPERTY_UNITS) * 100) | 0 },\n  ]\n\n  //GET THE TOTAL PAYMENTS FOR EACH MONTH IN THE SELECTED YEAR\n  const totalEachMonthPayments = monthsInYear.map((monthDate) => {\n    //get sales recorded in the same month and year as monthDate\n    return transactionItems\n      .filter((sale) => {\n        const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date())\n        return isSameMonth(monthDate, saleDate)\n      }).reduce((total, currentSale) => total + (parseFloat(currentSale.sale_amount) || 0), 0)\n  })\n  // MAKE AN OBJECT FOR SHOWING AN INCOME GRAPH, BY MONTH, LATER\n  // LABELS ARE MONTHS IN THE YEAR IN SHORT FORMAT\n  const rentIncomeData = {\n    datasets: [{\n      data: totalEachMonthPayments, label: 'Monthly Payments Collection', type: 'bar',\n      fill: false,\n      backgroundColor: '#71B37C',\n      borderColor: '#71B37C',\n      hoverBackgroundColor: '#71B37C',\n      hoverBorderColor: '#71B37C',\n    }],\n    labels: monthsInYear.map((monthDate) => format(monthDate, 'MMMM')),\n  }\n\n  const totalEachMonthCharges = monthsInYear.map((monthDate) => {\n    //get sales recorded in the same month and year as monthDate\n    return chargesItems\n      .filter((charge) => {\n        const chargeDate = parse(charge.charge_date, 'yyyy-MM-dd', new Date())\n         return isSameMonth(monthDate, chargeDate)\n      }).reduce((total, currentSale) => total + (parseFloat(currentSale.charge_amount) || 0), 0)\n  })\n  rentIncomeData.datasets.push({\n    data: totalEachMonthCharges,\n    label: 'Monthly Charges', type: 'line', borderColor: '#EC932F', fill: false,\n    backgroundColor: '#EC932F',\n    pointBorderColor: '#EC932F',\n    pointBackgroundColor: '#EC932F',\n    pointHoverBackgroundColor: '#EC932F',\n    pointHoverBorderColor: '#EC932F',\n  })\n\n  return (\n    <Layout pageTitle=\"Overview\">\n      <Grid container justify=\"center\" direction=\"column\" spacing={4}>\n        <Grid item key={0}>\n          <PageHeading text={\"Overview\"} />\n        </Grid>\n        <Grid item container>\n          <Grid container item direction=\"column\" spacing={4}>\n            <Grid item>\n              <Box\n                border={1}\n                borderRadius=\"borderRadius\"\n                borderColor=\"grey.400\"\n              >\n                <Formik\n                  initialValues={{ filter_year: currentYear }}\n                  validationSchema={FilterYearSchema}\n                  onSubmit={(values) => {\n                    setFilteredSaleItemsByYear(parseInt(values.filter_year));\n                  }}\n                >\n                  {({\n                    values,\n                    handleSubmit,\n                    touched,\n                    errors,\n                    handleChange,\n                    handleBlur,\n                  }) => (\n                    <form\n                      className={classes.form}\n                      id=\"yearFilterForm\"\n                      onSubmit={handleSubmit}\n                    >\n                      <Grid\n                        container\n                        spacing={2}\n                        alignItems=\"center\"\n                        justify=\"center\"\n                        direction=\"row\"\n                      >\n                        <Grid item sm={3}>\n                          <TextField\n                            fullWidth\n                            select\n                            variant=\"outlined\"\n                            name=\"property_filter\"\n                            label=\"Property\"\n                            id=\"property_filter\"\n                            onChange={(event) => {\n                              setPropertyFilter(\n                                event.target.value\n                              );\n                            }}\n                            value={propertyFilter}\n                          >\n                            <MenuItem key={\"all\"} value={\"all\"}>All</MenuItem>\n                            {properties.map(\n                              (property, index) => (\n                                <MenuItem\n                                  key={index}\n                                  value={property.id}\n                                >\n                                  {property.ref}\n                                </MenuItem>\n                              )\n                            )}\n                          </TextField>\n                        </Grid>\n                        <Grid item>\n                          <TextField\n                            variant=\"outlined\"\n                            id=\"filter_year\"\n                            name=\"filter_year\"\n                            label=\"Year\"\n                            value={values.filter_year}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            error={errors.filter_year && touched.filter_year}\n                            helperText={\n                              touched.filter_year && errors.filter_year\n                            }\n                          />\n                        </Grid>\n                        <Grid item>\n                          <Button\n                            type=\"submit\"\n                            form=\"yearFilterForm\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<SearchIcon />}\n                          >\n                            SEARCH\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </form>\n                  )}\n                </Formik>\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid\n          item\n          container\n          spacing={2}\n          direction=\"row\"\n          alignItems=\"stretch\"\n          justify=\"space-around\"\n          key={3}\n        >\n          {\n            EACH_UNIT_TYPE_WITH_AMOUNT.map((unitTypeWithAmount, index) =>\n              <InfoDisplayPaper key={index} xs={6} title={unitTypeWithAmount.units_name} value={unitTypeWithAmount.units_amount} />)\n          }\n\n        </Grid>\n        <Grid\n          item\n          container\n          spacing={2}\n          direction=\"row\"\n          alignItems=\"stretch\"\n          justify=\"space-around\"\n          key={2}\n        >\n          {\n            UNIT_OCCUPANCY_SUMMARY_DATA.map((unitOccupancyData, index) =>\n              <InfoDisplayPaper key={index} xs={12} title={unitOccupancyData.title} value={unitOccupancyData.value} />\n            )\n          }\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h6\" align=\"center\" gutterBottom>\n            Monthly Charges &amp; Payments\n          </Typography>\n          <Bar\n            data={rentIncomeData}\n            options={options}>\n          </Bar>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    leases: state.leases,\n    properties: state.properties,\n    propertyUnits: state.propertyUnits,\n    rentalCharges: state.rentalCharges,\n    sales: state.sales,\n  };\n};\n\nexport default connect(mapStateToProps)(DashBoardPage);\n"]},"metadata":{},"sourceType":"module"}