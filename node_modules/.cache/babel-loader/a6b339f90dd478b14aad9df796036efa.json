{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/login/ResetPassword.js\";\nimport React from \"react\";\nimport { Dialog, Button, FormHelperText, FormControl, TextField } from \"@material-ui/core\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { resetUserPasswordByEmail } from \"../../actions/actions\";\nconst ResetPasswordSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Email is Required\")\n});\nexport default function FormDialog(props) {\n  const {\n    open,\n    handleClose\n  } = props;\n  const emailValues = {\n    email: ''\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: emailValues,\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus,\n      setSubmitting\n    }) => {\n      var email = values.email;\n\n      try {\n        await resetUserPasswordByEmail(email);\n        resetForm({});\n        setSubmitting(false);\n        setStatus({\n          success: 'Password Reset Email Sent Successfully'\n        });\n      } catch (error) {\n        setSubmitting(false); // Handle Errors here.\n\n        console.log(\"Error => \", error);\n        var errorCode = error.code;\n        var errorMessage = errorCode === \"auth/missing-continue-uri\" ? \"A continue URL must be provided.\" : errorCode === \"auth/invalid-continue-uri\" ? \"Continue URL provided is invalid\" : errorCode === \"auth/invalid-email\" ? \"Email is Invalid\" : errorCode === \"auth/unauthorized-continue-uri\" ? \"Continue URL domain is not whitelisted\" : errorCode === \"auth/user-not-found\" ? \"No user found with email\" : \"Failed to connect to resource. Check your internet connection\";\n        setStatus({\n          error: errorMessage\n        });\n      }\n\n      ;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    handleSubmit,\n    status,\n    errors,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    method: \"post\",\n    id: \"resetPasswordForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, \"Reset Password\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, \"To reset your password, please enter your email address. We will send the reset link to your email.\"), status && status.success && /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }\n  }, status.success)), status && status.error && /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormHelperText, {\n    error: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }\n  }, status.error)), /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"email\",\n    label: \"Email Address\",\n    value: values.email,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    helperText: errors.email,\n    error: 'email' in errors,\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    disabled: isSubmitting,\n    type: \"submit\",\n    variant: \"outlined\",\n    form: \"resetPasswordForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }, \"Send Reset Link\"))))));\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/login/ResetPassword.js"],"names":["React","Dialog","Button","FormHelperText","FormControl","TextField","DialogActions","DialogContent","DialogContentText","DialogTitle","Yup","Formik","resetUserPasswordByEmail","ResetPasswordSchema","object","shape","email","string","required","FormDialog","props","open","handleClose","emailValues","values","resetForm","setStatus","setSubmitting","success","error","console","log","errorCode","code","errorMessage","handleSubmit","status","errors","handleChange","handleBlur","isSubmitting","shrink"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Dialog, Button, FormHelperText, FormControl, TextField } from \"@material-ui/core\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { resetUserPasswordByEmail } from \"../../actions/actions\";\n\n\nconst ResetPasswordSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Email is Required\"),\n});\n\nexport default function FormDialog(props) {\n  const { open, handleClose } = props\n\n  const emailValues = { email: '' }\n  return (\n    <div>\n      <Formik\n        initialValues={emailValues}\n        validationSchema={ResetPasswordSchema}\n        onSubmit={async (values, { resetForm, setStatus, setSubmitting }) => {\n          var email = values.email;\n          try {\n            await resetUserPasswordByEmail(email)\n            resetForm({});\n            setSubmitting(false);\n            setStatus({ success: 'Password Reset Email Sent Successfully' });\n          } catch (error) {\n            setSubmitting(false);\n            // Handle Errors here.\n            console.log(\"Error => \", error)\n            var errorCode = error.code;\n            var errorMessage =\n              errorCode === \"auth/missing-continue-uri\"\n                ? \"A continue URL must be provided.\"\n                : errorCode === \"auth/invalid-continue-uri\"\n                  ? \"Continue URL provided is invalid\"\n                  : errorCode === \"auth/invalid-email\"\n                    ? \"Email is Invalid\"\n                    : errorCode === \"auth/unauthorized-continue-uri\"\n                      ? \"Continue URL domain is not whitelisted\"\n                      : errorCode === \"auth/user-not-found\"\n                        ? \"No user found with email\"\n                        : \"Failed to connect to resource. Check your internet connection\";\n            setStatus({ error: errorMessage });\n          };\n        }}>\n        {({\n          values,\n          handleSubmit,\n          status,\n          errors,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n            <form\n              method=\"post\"\n              id=\"resetPasswordForm\"\n              onSubmit={handleSubmit}\n            >\n              <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n              >\n                <DialogTitle id=\"form-dialog-title\">Reset Password</DialogTitle>\n                <DialogContent>\n                  <DialogContentText>\n                    To reset your password, please enter your email address. We\n                    will send the reset link to your email.\n                  </DialogContentText>\n                  {status && status.success && (\n                    <FormControl fullWidth>\n                      <FormHelperText>\n                        {status.success}\n                      </FormHelperText>\n                    </FormControl>\n                  )}\n                  {status && status.error && (\n                    <FormControl fullWidth>\n                      <FormHelperText error={true}>\n                        {status.error}\n                      </FormHelperText>\n                    </FormControl>\n                  )}\n                  <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"email\"\n                    label=\"Email Address\"\n                    value={values.email}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    helperText={errors.email}\n                    error={'email' in errors}\n                    InputLabelProps={{ shrink: true }}\n                  />\n                </DialogContent>\n                <DialogActions>\n                  <Button onClick={handleClose} color=\"primary\">\n                    Cancel\n          </Button>\n                  <Button color=\"primary\" disabled={isSubmitting}\n                    type=\"submit\"\n                    variant=\"outlined\"\n                    form=\"resetPasswordForm\">\n                    Send Reset Link\n          </Button>\n                </DialogActions>\n              </Dialog>\n            </form>\n          )}\n      </Formik>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}