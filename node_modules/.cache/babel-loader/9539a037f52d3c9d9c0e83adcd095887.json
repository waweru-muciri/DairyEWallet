{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/IndividualPropertyIncomeStament.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport { ExportStatementToExcelBtn } from \"../components/ExportToExcelBtn\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { getSalesFilterOptions, getExpensesCategories, currencyFormatter, getMonthlyDatesFromPeriod } from \"../assets/commonAssets\";\nimport { parse, format, isSameMonth } from 'date-fns';\nconst TRANSACTIONS_FILTER_OPTIONS = getSalesFilterOptions();\nconst EXPENSES_CATEGORIES = getExpensesCategories();\n\nlet PropertyIncomeStatement = ({\n  sales,\n  expenses,\n  propertyUnits\n}) => {\n  const classes = commonStyles();\n  const [expensesItems, setExpensesItems] = useState([]);\n  const [saleItems, setPaymentItems] = useState([]);\n  const [netIncomeObject, setNetIncomeObject] = useState({});\n  const [incomeStatements, setIncomeStatements] = useState([]);\n  const [headCells, setHeadCells] = useState([]);\n  const [expensesStatements, setExpensesStatements] = useState([]);\n  const [propertyUnitFilter, setPropertyUnitFilter] = useState(\"\");\n  const [fromFilter, setFromDateFilter] = useState('month-to-date');\n  useEffect(() => {\n    //go back [numMonths] months from current date\n    const eachPastMonthDate = getMonthlyDatesFromPeriod(fromFilter);\n    const headCellsForMonths = [...eachPastMonthDate.map(monthDate => format(monthDate, 'MMMM yyyy')), `Total as of ${format(eachPastMonthDate[eachPastMonthDate.length - 1], 'MMMM yyyy')}`]; // calculate income from rent\n\n    const incomeMappedByMonth = [];\n    const rentalIncomeObject = {\n      income_type: 'Rental Income'\n    };\n    const totalIncomeObject = {\n      income_type: 'Total Income'\n    };\n    let totalRentalIncomeForPeriod = 0;\n    eachPastMonthDate.forEach(monthDate => {\n      //get sales recorded in the same month and year as monthDate\n      const totalRentalIncome = saleItems.filter(({\n        sale_type\n      }) => sale_type === 'rent').filter(sale => {\n        const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date());\n        return isSameMonth(monthDate, saleDate);\n      }).reduce((total, currentSale) => total + (parseFloat(currentSale.sale_amount) || 0), 0);\n      totalRentalIncomeForPeriod += totalRentalIncome;\n      rentalIncomeObject[format(monthDate, 'MMMM yyyy')] = totalRentalIncome;\n    });\n    rentalIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalRentalIncomeForPeriod;\n    incomeMappedByMonth.push(rentalIncomeObject); // calculate income from other sources\n\n    const otherIncomeObject = {\n      income_type: 'Other Income'\n    };\n    let totalOtherIncomeForPeriod = 0;\n    eachPastMonthDate.forEach(monthDate => {\n      //get sales recorded in the same month and year as monthDate\n      const totalOtherIncome = saleItems.filter(({\n        sale_type\n      }) => sale_type !== 'rent').filter(sale => {\n        const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date());\n        return isSameMonth(monthDate, saleDate);\n      }).reduce((total, currentSale) => total + (parseFloat(currentSale.sale_amount) || 0), 0);\n      totalOtherIncomeForPeriod += totalOtherIncome;\n      otherIncomeObject[format(monthDate, 'MMMM yyyy')] = totalOtherIncome;\n    });\n    otherIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalOtherIncomeForPeriod;\n    incomeMappedByMonth.push(otherIncomeObject); // get total of all incomes\n\n    incomeMappedByMonth.forEach(incomeObject => {\n      headCellsForMonths.forEach(headCell => {\n        const incomeAmount = parseFloat(incomeObject[headCell]) || 0;\n        totalIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) + incomeAmount;\n      });\n    });\n    incomeMappedByMonth.push(totalIncomeObject); //calculate expenses\n\n    const expensesMappedByMonth = [];\n    const totalExpensesObject = {\n      expense_type: 'Total Expenses',\n      expense_name: \"Total Expenses\"\n    };\n    const expenseObjectsInMonth = [];\n    eachPastMonthDate.forEach(monthDate => {\n      //get expenses recorded in the same month and year\n      //as monthDate\n      expensesItems.filter(expense => {\n        const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date());\n        return isSameMonth(monthDate, expenseDate);\n      }).forEach(monthExpense => {\n        const {\n          type,\n          amount\n        } = monthExpense;\n        const expenseObject = {};\n        expenseObject['expense_type'] = type;\n        expenseObject['amount'] = parseFloat(amount) || 0;\n        expenseObject['month'] = format(monthDate, 'MMMM yyyy');\n        expenseObjectsInMonth.push(expenseObject);\n      });\n    });\n    const expensesTypesSet = new Set(expenseObjectsInMonth.map(expenseObject => expenseObject.expense_type));\n    expensesTypesSet.forEach(expenseType => {\n      expenseObjectsInMonth.filter(expenseObject => expenseObject.expense_type === expenseType).forEach(expenseObject => {\n        //make or obtain an object and push it to the expenses array\n        const expenseObjectByType = expensesMappedByMonth.find(expense => expense.expense_type === expenseType);\n\n        if (typeof expenseObjectByType !== 'undefined') {\n          expenseObjectByType[expenseObject.month] = (parseFloat(expenseObjectByType[expenseObject.month]) || 0) + parseFloat(expenseObject.amount);\n          expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]] = (parseFloat(expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]]) || 0) + parseFloat(expenseObject.amount);\n        } else {\n          const totalExpensesByTypeObject = {};\n          totalExpensesByTypeObject['expense_type'] = expenseType;\n          const EXPENSE_IN_FULL_DETAILS = EXPENSES_CATEGORIES.find(({\n            id\n          }) => id === expenseType) || {};\n          totalExpensesByTypeObject['expense_name'] = EXPENSE_IN_FULL_DETAILS.displayValue;\n          totalExpensesByTypeObject[expenseObject.month] = parseFloat(expenseObject.amount) || 0;\n          totalExpensesByTypeObject[headCellsForMonths[headCellsForMonths.length - 1]] = parseFloat(expenseObject.amount) || 0;\n          expensesMappedByMonth.push(totalExpensesByTypeObject);\n        }\n      });\n    });\n    expensesMappedByMonth.forEach(expenseObject => {\n      headCellsForMonths.forEach(headCell => {\n        const expenseAmount = parseFloat(expenseObject[headCell]) || 0;\n        totalExpensesObject[headCell] = (parseFloat(totalExpensesObject[headCell]) || 0) + expenseAmount;\n      });\n    });\n    expensesMappedByMonth.push(totalExpensesObject); // get net income\n\n    const totalNetIncomeObject = {\n      income_type: 'Net Income'\n    };\n    headCellsForMonths.forEach(headCell => {\n      totalNetIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) - (parseFloat(totalExpensesObject[headCell]) || 0);\n    });\n    setHeadCells(headCellsForMonths);\n    setNetIncomeObject(totalNetIncomeObject);\n    setIncomeStatements(incomeMappedByMonth);\n    setExpensesStatements(expensesMappedByMonth);\n  }, [expensesItems, saleItems]);\n  useEffect(() => {\n    setExpensesItems(expenses);\n  }, [expenses]);\n  useEffect(() => {\n    setPaymentItems(sales);\n  }, [sales]);\n\n  const handleSearchFormSubmit = event => {\n    event.preventDefault(); //filter the sales according to the search criteria here\n\n    let filteredSales = sales.filter(({\n      unit_id\n    }) => !propertyUnitFilter ? true : unit_id === propertyUnitFilter);\n    setPaymentItems(filteredSales);\n    const filteredExpenses = expenses.filter(({\n      unit_id\n    }) => !propertyUnitFilter ? true : unit_id === propertyUnitFilter);\n    setExpensesItems(filteredExpenses);\n  };\n\n  const resetSearchForm = event => {\n    event.preventDefault();\n    setPropertyUnitFilter(\"\");\n    setFromDateFilter(\"month-to-date\");\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, \"Property Statement\")), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ExportStatementToExcelBtn, {\n    displayText: \"Export Income\",\n    reportName: 'Properties Income Records',\n    reportTitle: 'Properties Income Records',\n    headCells: headCells,\n    dataToPrint: incomeStatements,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ExportStatementToExcelBtn, {\n    displayText: \"Export Expenses\",\n    reportName: \"Properties Expenses  Records\",\n    reportTitle: \"Properties Expenses Data\",\n    headCells: headCells,\n    dataToPrint: expensesStatements,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"contactSearchForm\",\n    onSubmit: handleSearchFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_filter\",\n    label: \"Select Unit\",\n    id: \"property_filter\",\n    onChange: event => {\n      setPropertyUnitFilter(event.target.value);\n    },\n    value: propertyUnitFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 33\n    }\n  }, propertyUnits.map((propertyUnit, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: propertyUnit.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 41\n    }\n  }, propertyUnit.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    select: true,\n    id: \"from_filter\",\n    name: \"from_filter\",\n    label: \"Filter\",\n    value: fromFilter,\n    onChange: event => {\n      setFromDateFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 33\n    }\n  }, TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: filterOption.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 41\n    }\n  }, filterOption.text))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => handleSearchFormSubmit(event),\n    type: \"submit\",\n    form: \"contactSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 48\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 33\n    }\n  }, \"SEARCH\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => resetSearchForm(event),\n    type: \"reset\",\n    form: \"contactSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(UndoIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 48\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 33\n    }\n  }, \"RESET\")))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'adadf',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"grey.300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    key: \"first1\",\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 25\n    }\n  }, \"Income\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 33\n    }\n  }, headCell, \" (Ksh)\"))), incomeStatements.map((incomeStatement, incomeIndex) => {\n    const otherColumns = headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      width: 1,\n      textAlign: \"left\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 33\n      }\n    }, currencyFormatter.format(incomeStatement[headCell])));\n    return /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      key: incomeIndex,\n      flexDirection: \"row\",\n      p: 1,\n      bgcolor: \"background.paper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"left\",\n      width: 1,\n      key: incomeIndex + \"jl\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 37\n      }\n    }, incomeStatement['income_type']), otherColumns);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'adlaldadf',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"grey.300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    key: \"faldirst1\",\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 25\n    }\n  }, \"Expenses\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 33\n    }\n  }, headCell, \" (Ksh)\"))), expensesStatements.map((expenseStatement, incomeIndex) => {\n    const otherColumns = headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      width: 1,\n      textAlign: \"left\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 33\n      }\n    }, currencyFormatter.format(expenseStatement[headCell] || 0)));\n    return /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      key: incomeIndex,\n      flexDirection: \"row\",\n      p: 1,\n      bgcolor: \"background.paper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"left\",\n      width: 1,\n      key: incomeIndex + \"iiajl\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 37\n      }\n    }, expenseStatement['expense_name']), otherColumns);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'adlaldadf',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"grey.300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    key: \"faldirst1\",\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 25\n    }\n  }, \"Net Income\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 33\n    }\n  }, headCell))), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'kjb',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"background.paper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    textAlign: \"left\",\n    width: 1,\n    key: \"iiajl\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 29\n    }\n  }, \"Net Income\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 33\n    }\n  }, currencyFormatter.format(netIncomeObject[headCell] || 0)))))));\n};\n\nexport default PropertyIncomeStatement;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/IndividualPropertyIncomeStament.js"],"names":["React","useState","useEffect","Grid","Box","Button","TextField","MenuItem","SearchIcon","UndoIcon","ExportStatementToExcelBtn","commonStyles","Typography","getSalesFilterOptions","getExpensesCategories","currencyFormatter","getMonthlyDatesFromPeriod","parse","format","isSameMonth","TRANSACTIONS_FILTER_OPTIONS","EXPENSES_CATEGORIES","PropertyIncomeStatement","sales","expenses","propertyUnits","classes","expensesItems","setExpensesItems","saleItems","setPaymentItems","netIncomeObject","setNetIncomeObject","incomeStatements","setIncomeStatements","headCells","setHeadCells","expensesStatements","setExpensesStatements","propertyUnitFilter","setPropertyUnitFilter","fromFilter","setFromDateFilter","eachPastMonthDate","headCellsForMonths","map","monthDate","length","incomeMappedByMonth","rentalIncomeObject","income_type","totalIncomeObject","totalRentalIncomeForPeriod","forEach","totalRentalIncome","filter","sale_type","sale","saleDate","sale_date","Date","reduce","total","currentSale","parseFloat","sale_amount","push","otherIncomeObject","totalOtherIncomeForPeriod","totalOtherIncome","incomeObject","headCell","incomeAmount","expensesMappedByMonth","totalExpensesObject","expense_type","expense_name","expenseObjectsInMonth","expense","expenseDate","expense_date","monthExpense","type","amount","expenseObject","expensesTypesSet","Set","expenseType","expenseObjectByType","find","month","totalExpensesByTypeObject","EXPENSE_IN_FULL_DETAILS","id","displayValue","expenseAmount","totalNetIncomeObject","handleSearchFormSubmit","event","preventDefault","filteredSales","unit_id","filteredExpenses","resetSearchForm","form","target","value","propertyUnit","index","ref","shrink","filterOption","text","width","incomeStatement","incomeIndex","otherColumns","expenseStatement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport { ExportStatementToExcelBtn } from \"../components/ExportToExcelBtn\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { getSalesFilterOptions, getExpensesCategories, currencyFormatter, getMonthlyDatesFromPeriod } from \"../assets/commonAssets\";\nimport { parse, format, isSameMonth } from 'date-fns'\n\nconst TRANSACTIONS_FILTER_OPTIONS = getSalesFilterOptions()\nconst EXPENSES_CATEGORIES = getExpensesCategories()\n\nlet PropertyIncomeStatement = ({\n    sales,\n    expenses,\n    propertyUnits,\n}) => {\n    const classes = commonStyles();\n    const [expensesItems, setExpensesItems] = useState([]);\n    const [saleItems, setPaymentItems] = useState([]);\n    const [netIncomeObject, setNetIncomeObject] = useState({});\n    const [incomeStatements, setIncomeStatements] = useState([]);\n    const [headCells, setHeadCells] = useState([]);\n    const [expensesStatements, setExpensesStatements] = useState([]);\n    const [propertyUnitFilter, setPropertyUnitFilter] = useState(\"\");\n    const [fromFilter, setFromDateFilter] = useState('month-to-date');\n\n    useEffect(() => {\n        //go back [numMonths] months from current date\n        const eachPastMonthDate = getMonthlyDatesFromPeriod(fromFilter);\n        const headCellsForMonths = [...eachPastMonthDate.map((monthDate) => format(monthDate, 'MMMM yyyy')), `Total as of ${format(eachPastMonthDate[eachPastMonthDate.length - 1], 'MMMM yyyy')}`]\n        // calculate income from rent\n        const incomeMappedByMonth = []\n        const rentalIncomeObject = { income_type: 'Rental Income' }\n        const totalIncomeObject = { income_type: 'Total Income' }\n        let totalRentalIncomeForPeriod = 0\n        eachPastMonthDate.forEach((monthDate) => {\n            //get sales recorded in the same month and year as monthDate\n            const totalRentalIncome = saleItems.filter(({ sale_type }) => sale_type === 'rent')\n                .filter((sale) => {\n                    const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date())\n                    return isSameMonth(monthDate, saleDate)\n                }).reduce((total, currentSale) => total + (parseFloat(currentSale.sale_amount) || 0), 0)\n            totalRentalIncomeForPeriod += totalRentalIncome\n            rentalIncomeObject[format(monthDate, 'MMMM yyyy')] = totalRentalIncome\n        })\n        rentalIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalRentalIncomeForPeriod\n        incomeMappedByMonth.push(rentalIncomeObject)\n        // calculate income from other sources\n        const otherIncomeObject = { income_type: 'Other Income' }\n        let totalOtherIncomeForPeriod = 0\n        eachPastMonthDate.forEach((monthDate) => {\n            //get sales recorded in the same month and year as monthDate\n            const totalOtherIncome = saleItems.filter(({ sale_type }) => sale_type !== 'rent')\n                .filter((sale) => {\n                    const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date())\n                    return isSameMonth(monthDate, saleDate)\n                }).reduce((total, currentSale) => total + (parseFloat(currentSale.sale_amount) || 0), 0)\n            totalOtherIncomeForPeriod += totalOtherIncome\n            otherIncomeObject[format(monthDate, 'MMMM yyyy')] = totalOtherIncome\n        })\n        otherIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalOtherIncomeForPeriod\n        incomeMappedByMonth.push(otherIncomeObject)\n        // get total of all incomes\n        incomeMappedByMonth.forEach((incomeObject) => {\n            headCellsForMonths.forEach((headCell) => {\n                const incomeAmount = parseFloat(incomeObject[headCell]) || 0\n                totalIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) + incomeAmount\n            })\n        })\n        incomeMappedByMonth.push(totalIncomeObject)\n        //calculate expenses\n        const expensesMappedByMonth = []\n        const totalExpensesObject = { expense_type: 'Total Expenses', expense_name: \"Total Expenses\" }\n        const expenseObjectsInMonth = []\n        eachPastMonthDate.forEach((monthDate) => {\n            //get expenses recorded in the same month and year\n            //as monthDate\n            expensesItems.filter((expense) => {\n                const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date())\n                return isSameMonth(monthDate, expenseDate)\n            }).forEach((monthExpense) => {\n                const { type, amount } = monthExpense\n                const expenseObject = {};\n                expenseObject['expense_type'] = type\n                expenseObject['amount'] = (parseFloat(amount) || 0)\n                expenseObject['month'] = format(monthDate, 'MMMM yyyy')\n                expenseObjectsInMonth.push(expenseObject)\n            })\n        })\n        const expensesTypesSet = new Set(expenseObjectsInMonth.map((expenseObject) => expenseObject.expense_type))\n        expensesTypesSet.forEach((expenseType) => {\n            expenseObjectsInMonth.filter((expenseObject) => expenseObject.expense_type === expenseType).forEach((expenseObject) => {\n                //make or obtain an object and push it to the expenses array\n                const expenseObjectByType = expensesMappedByMonth.find((expense) => expense.expense_type === expenseType)\n                if (typeof expenseObjectByType !== 'undefined') {\n                    expenseObjectByType[expenseObject.month] = (parseFloat(expenseObjectByType[expenseObject.month]) || 0) + parseFloat(expenseObject.amount)\n                    expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]] = (parseFloat(expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]]) || 0) + parseFloat(expenseObject.amount)\n                } else {\n                    const totalExpensesByTypeObject = {}\n                    totalExpensesByTypeObject['expense_type'] = expenseType\n                    const EXPENSE_IN_FULL_DETAILS = EXPENSES_CATEGORIES.find(({ id }) => id === expenseType) || {}\n                    totalExpensesByTypeObject['expense_name'] = EXPENSE_IN_FULL_DETAILS.displayValue\n                    totalExpensesByTypeObject[expenseObject.month] = parseFloat(expenseObject.amount) || 0\n                    totalExpensesByTypeObject[headCellsForMonths[headCellsForMonths.length - 1]] = parseFloat(expenseObject.amount) || 0\n                    expensesMappedByMonth.push(totalExpensesByTypeObject)\n                }\n            })\n        })\n        expensesMappedByMonth.forEach((expenseObject) => {\n            headCellsForMonths.forEach((headCell) => {\n                const expenseAmount = parseFloat(expenseObject[headCell]) || 0\n                totalExpensesObject[headCell] = (parseFloat(totalExpensesObject[headCell]) || 0) + expenseAmount\n            })\n        })\n        expensesMappedByMonth.push(totalExpensesObject)\n        // get net income\n        const totalNetIncomeObject = { income_type: 'Net Income' }\n        headCellsForMonths.forEach((headCell) => {\n            totalNetIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) - (parseFloat(totalExpensesObject[headCell]) || 0)\n        })\n        setHeadCells(headCellsForMonths)\n        setNetIncomeObject(totalNetIncomeObject);\n        setIncomeStatements(incomeMappedByMonth);\n        setExpensesStatements(expensesMappedByMonth);\n    }, [expensesItems, saleItems])\n\n    useEffect(() => {\n        setExpensesItems(expenses)\n    }, [expenses])\n\n    useEffect(() => {\n        setPaymentItems(sales)\n    }, [sales])\n\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the sales according to the search criteria here\n        let filteredSales = sales\n            .filter(({ unit_id }) => !propertyUnitFilter ? true : unit_id === propertyUnitFilter)\n        setPaymentItems(filteredSales)\n        const filteredExpenses = expenses\n            .filter(({ unit_id }) => !propertyUnitFilter ? true : unit_id === propertyUnitFilter)\n        setExpensesItems(filteredExpenses)\n    };\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setPropertyUnitFilter(\"\");\n        setFromDateFilter(\"month-to-date\");\n    };\n\n    return (\n        <Grid\n            container\n            spacing={3}\n            alignItems=\"center\">\n            <Grid item>\n                <Typography variant=\"h6\">Property Statement</Typography>\n            </Grid>\n            <Grid\n                container\n                spacing={2}\n                item\n                alignItems=\"center\"\n                direction=\"row\"\n            >\n                <Grid item>\n                    <ExportStatementToExcelBtn\n                        displayText={\"Export Income\"}\n                        reportName={'Properties Income Records'}\n                        reportTitle={'Properties Income Records'}\n                        headCells={headCells}\n                        dataToPrint={incomeStatements}\n                    />\n                </Grid>\n                <Grid item>\n                    <ExportStatementToExcelBtn\n                        displayText={\"Export Expenses\"}\n                        reportName={\"Properties Expenses  Records\"}\n                        reportTitle={\"Properties Expenses Data\"}\n                        headCells={headCells}\n                        dataToPrint={expensesStatements}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Box\n                    border={1}\n                    borderRadius=\"borderRadius\"\n                    borderColor=\"grey.400\"\n                >\n                    <form\n                        className={classes.form}\n                        id=\"contactSearchForm\"\n                        onSubmit={handleSearchFormSubmit}\n                    >\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"center\"\n                            direction=\"row\"\n                        >\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    select\n                                    variant=\"outlined\"\n                                    name=\"property_filter\"\n                                    label=\"Select Unit\"\n                                    id=\"property_filter\"\n                                    onChange={(event) => {\n                                        setPropertyUnitFilter(\n                                            event.target.value\n                                        );\n                                    }}\n                                    value={propertyUnitFilter}\n                                >\n                                    {propertyUnits.map((propertyUnit, index) => (\n                                        <MenuItem\n                                            key={index}\n                                            value={propertyUnit.id}\n                                        >\n                                            {propertyUnit.ref}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    select\n                                    id=\"from_filter\"\n                                    name=\"from_filter\"\n                                    label=\"Filter\"\n                                    value={fromFilter}\n                                    onChange={(event) => {\n                                        setFromDateFilter(\n                                            event.target.value\n                                        );\n                                    }}\n                                    InputLabelProps={{ shrink: true }}>\n                                    {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                        <MenuItem\n                                            key={index}\n                                            value={filterOption.id}\n                                        >\n                                            {filterOption.text}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                        </Grid>\n                        <Grid\n                            container\n                            spacing={2}\n                            item\n                            justify=\"flex-end\"\n                            alignItems=\"center\"\n                            direction=\"row\"\n                            key={1}\n                        >\n                            <Grid item>\n                                <Button\n                                    onClick={(event) => handleSearchFormSubmit(event)}\n                                    type=\"submit\"\n                                    form=\"contactSearchForm\"\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    size=\"medium\"\n                                    startIcon={<SearchIcon />}\n                                >\n                                    SEARCH\n                                    </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    onClick={(event) => resetSearchForm(event)}\n                                    type=\"reset\"\n                                    form=\"contactSearchForm\"\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    size=\"medium\"\n                                    startIcon={<UndoIcon />}\n                                >\n                                    RESET\n                                    </Button>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Box>\n            </Grid>\n            <Grid item sm={12}>\n                <div style={{ width: '100%' }}>\n                    <Box display=\"flex\" key={'adadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                        <Box key=\"first1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                            Income\n                            </Box>\n                        {\n                            headCells.map((headCell, index) =>\n                                <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    {headCell} (Ksh)\n                                </Box>\n                            )\n                        }\n                    </Box>\n                    {\n                        incomeStatements.map((incomeStatement, incomeIndex) => {\n                            const otherColumns = headCells.map((headCell, index) =>\n                                <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    {currencyFormatter.format(incomeStatement[headCell])}\n                                </Box>\n                            )\n                            return (\n                                <Box display=\"flex\" key={incomeIndex} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                    <Box textAlign=\"left\" width={1} key={incomeIndex + \"jl\"} flexGrow={1} p={1} >\n                                        {incomeStatement['income_type']}\n                                    </Box>\n                                    {otherColumns}\n                                </Box>\n                            )\n                        })\n                    }\n                </div>\n                <div style={{ width: '100%' }}>\n                    <Box display=\"flex\" key={'adlaldadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                        <Box key=\"faldirst1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                            Expenses\n                            </Box>\n                        {\n                            headCells.map((headCell, index) =>\n                                <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    {headCell} (Ksh)\n                                </Box>\n                            )\n                        }\n                    </Box>\n                    {\n                        expensesStatements.map((expenseStatement, incomeIndex) => {\n                            const otherColumns = headCells.map((headCell, index) =>\n                                <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    {currencyFormatter.format(expenseStatement[headCell] || 0)}\n                                </Box>\n                            )\n                            return (\n                                <Box display=\"flex\" key={incomeIndex} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                    <Box textAlign=\"left\" width={1} key={incomeIndex + \"iiajl\"} flexGrow={1} p={1} >\n                                        {expenseStatement['expense_name']}\n                                    </Box>\n                                    {otherColumns}\n                                </Box>\n                            )\n                        })\n                    }\n                </div>\n                <div style={{ width: '100%' }}>\n                    <Box display=\"flex\" key={'adlaldadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                        <Box key=\"faldirst1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                            Net Income\n                            </Box>\n                        {\n                            headCells.map((headCell, index) =>\n                                <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    {headCell}\n                                </Box>\n                            )\n                        }\n                    </Box>\n                    {\n                        <Box display=\"flex\" key={'kjb'} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                            <Box textAlign=\"left\" width={1} key={\"iiajl\"} flexGrow={1} p={1} >\n                                Net Income\n                            </Box>\n                            {headCells.map((headCell, index) =>\n                                <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    {currencyFormatter.format(netIncomeObject[headCell] || 0)}\n                                </Box>\n                            )\n                            }\n                        </Box>\n\n                    }\n                </div>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default PropertyIncomeStatement;\n"]},"metadata":{},"sourceType":"module"}