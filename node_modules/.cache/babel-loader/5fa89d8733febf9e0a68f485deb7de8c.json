{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/AccountActions.js\";\nimport React, { useState } from \"react\";\nimport { auth } from \"../firebase\";\nimport Layout from \"../components/GeneralLayout\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport { connect } from \"react-redux\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport queryString from 'query-string';\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport * as Yup from \"yup\";\nconst ResetPasswordSchema = Yup.object().shape({\n  password: Yup.string().min(6, \"Too Short!\").max(20, \"We prefer insecure system, try a shorter password.\").required(\"Pasword is Required\"),\n  email: Yup.string().email(\"Invalid email\").required(\"Email is Required\"),\n  confirmPassword: Yup.string().required(\"Confirm Password Required\").test(\"passwords-match\", \"Passwords must match\", function (value) {\n    return this.parent.password === value;\n  })\n});\n\nlet AccountActions = props => {\n  const [emailVerificationSuccess, setEmailVerificationSuccess] = useState();\n  const [emailVerificationError, setEmailVerificationError] = useState();\n  const classes = commonStyles();\n  let loginValues = {\n    email: '',\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  let params = queryString.parse(props.location.search); // Get the action to complete.\n\n  var mode = params.mode; // Get the one-time code from the query parameter.\n\n  var actionCode = params.oobCode;\n\n  const applyEmailConfirmationCode = async () => {\n    try {\n      await auth.applyActionCode(actionCode); // Email address has been verified.\n      // Display a confirmation message to the user.\n      // You could also provide the user with a link back to the app.\n\n      setEmailVerificationSuccess(true);\n    } catch (error) {\n      // Code is invalid or expired. Ask the user to verify their email address\n      // again.\n      setEmailVerificationError(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    p: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, mode === \"resetPassword\" ? /*#__PURE__*/React.createElement(Formik, {\n    initialValues: loginValues,\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      // Verify the password reset code is valid.\n      try {\n        var accountEmail = await auth.verifyPasswordResetCode(actionCode);\n        var newPassword = values.password;\n\n        try {\n          // TODO: Show the reset screen with the user's email and ask the user for\n          // the new password.\n          // Save the new password.\n          await auth.confirmPasswordReset(actionCode, newPassword); // Password reset has been confirmed and new password updated.\n          //sign-in the user directly\n\n          resetForm({});\n          setStatus({\n            success: \"Password reset successful!\"\n          });\n        } catch (error) {\n          setStatus({\n            error: \"Error occurred during confirmation. The code might have expired or the password is too weak.\"\n          });\n          console.log('Error confirming password reset => ', error);\n        }\n      } catch (error) {\n        setStatus({\n          error: \"Invalid or expired action code.Please try to reset the password again\"\n        });\n        console.log(\"Error verifying code => \", error);\n      }\n    },\n    render: ({\n      values,\n      handleSubmit,\n      touched,\n      status,\n      errors,\n      handleChange,\n      handleBlur,\n      isSubmitting\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      className: classes.form,\n      method: \"post\",\n      id: \"resetPasswordForm\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      direction: \"column\",\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"subtitle1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 53\n      }\n    }, \"Reset Password\")), status && status.error && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormHelperText, {\n      error: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 61\n      }\n    }, status.error))), status && status.success && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 57\n      }\n    }, \"Password reset successful.\"), /*#__PURE__*/React.createElement(Link, {\n      component: RouterLink,\n      to: \"/app/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 57\n      }\n    }, \"Click here to login\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      variant: \"outlined\",\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"email\",\n      label: \"Email Address\",\n      value: values.email,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      helperText: errors.email,\n      error: 'email' in errors,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      variant: \"outlined\",\n      margin: \"dense\",\n      id: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      value: values.password,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      helperText: touched.password && errors.password,\n      error: errors.password && touched.password,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      variant: \"outlined\",\n      margin: \"dense\",\n      id: \"confirmPassword\",\n      label: \"Confirm Password\",\n      type: \"password\",\n      value: values.confirmPassword,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      helperText: errors.confirmPassword,\n      error: 'confirmPassword' in errors,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: isSubmitting,\n      type: \"submit\",\n      variant: \"outlined\",\n      form: \"resetPasswordForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 53\n      }\n    }, \"Reset Password\")))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }) : mode === 'verifyEmail' ?\n  /*#__PURE__*/\n  // Display email verification handler and UI.\n  // Localize the UI to the selected language as determined by the lang\n  // parameter.\n  // Try to apply the email verification code.\n  React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 41\n    }\n  }, \"Email Account Verification\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: applyEmailConfirmationCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 41\n    }\n  }, \"Verify Email\")), emailVerificationSuccess && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 45\n    }\n  }, \"Email Verified Successfully\"), /*#__PURE__*/React.createElement(Link, {\n    component: RouterLink,\n    to: \"/app/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 45\n    }\n  }, \"Click here to login\")), emailVerificationError && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 45\n    }\n  }, \"Email Verification Failed! Code is invalid or expired!\"))) : null));\n};\n\nexport default connect(null)(AccountActions);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/AccountActions.js"],"names":["React","useState","auth","Layout","Box","Button","TextField","FormControl","Typography","FormHelperText","Grid","Link","connect","RouterLink","queryString","Formik","commonStyles","Yup","ResetPasswordSchema","object","shape","password","string","min","max","required","email","confirmPassword","test","value","parent","AccountActions","props","emailVerificationSuccess","setEmailVerificationSuccess","emailVerificationError","setEmailVerificationError","classes","loginValues","params","parse","location","search","mode","actionCode","oobCode","applyEmailConfirmationCode","applyActionCode","error","values","resetForm","setStatus","accountEmail","verifyPasswordResetCode","newPassword","confirmPasswordReset","success","console","log","handleSubmit","touched","status","errors","handleChange","handleBlur","isSubmitting","form","shrink"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASD,IAAI,IAAIE,UAAjB,QAAmC,kBAAnC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAGA,MAAMC,mBAAmB,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,QAAQ,EAAEJ,GAAG,CAACK,MAAJ,GACLC,GADK,CACD,CADC,EACE,YADF,EAELC,GAFK,CAED,EAFC,EAEG,oDAFH,EAGLC,QAHK,CAGI,qBAHJ,CADiC;AAK3CC,EAAAA,KAAK,EAAET,GAAG,CAACK,MAAJ,GAAaI,KAAb,CAAmB,eAAnB,EAAoCD,QAApC,CAA6C,mBAA7C,CALoC;AAM3CE,EAAAA,eAAe,EAAEV,GAAG,CAACK,MAAJ,GACZG,QADY,CACH,2BADG,EAEZG,IAFY,CAEP,iBAFO,EAEY,sBAFZ,EAEoC,UAAUC,KAAV,EAAiB;AAC9D,WAAO,KAAKC,MAAL,CAAYT,QAAZ,KAAyBQ,KAAhC;AACH,GAJY;AAN0B,CAAnB,CAA5B;;AAaA,IAAIE,cAAc,GAAIC,KAAD,IAAW;AAC5B,QAAM,CAACC,wBAAD,EAA2BC,2BAA3B,IAA0DjC,QAAQ,EAAxE;AACA,QAAM,CAACkC,sBAAD,EAAyBC,yBAAzB,IAAsDnC,QAAQ,EAApE;AACA,QAAMoC,OAAO,GAAGrB,YAAY,EAA5B;AAEA,MAAIsB,WAAW,GAAG;AAAEZ,IAAAA,KAAK,EAAE,EAAT;AAAaL,IAAAA,QAAQ,EAAE,EAAvB;AAA2BM,IAAAA,eAAe,EAAE;AAA5C,GAAlB;AAEA,MAAIY,MAAM,GAAGzB,WAAW,CAAC0B,KAAZ,CAAkBR,KAAK,CAACS,QAAN,CAAeC,MAAjC,CAAb,CAP4B,CAQ5B;;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB,CAT4B,CAU5B;;AACA,MAAIC,UAAU,GAAGL,MAAM,CAACM,OAAxB;;AAEA,QAAMC,0BAA0B,GAAG,YAAY;AAC3C,QAAI;AACA,YAAM5C,IAAI,CAAC6C,eAAL,CAAqBH,UAArB,CAAN,CADA,CAEA;AACA;AACA;;AACAV,MAAAA,2BAA2B,CAAC,IAAD,CAA3B;AACH,KAND,CAME,OAAOc,KAAP,EAAc;AACZ;AACA;AACAZ,MAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACH;AAEJ,GAbD;;AAeA,sBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAb;AAAgB,IAAA,YAAY,EAAC,cAA7B;AAA4C,IAAA,WAAW,EAAC,UAAxD;AAAmE,IAAA,CAAC,EAAE,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQO,IAAI,KAAK,eAAT,gBAEQ,oBAAC,MAAD;AACI,IAAA,aAAa,EAAEL,WADnB;AAEI,IAAA,gBAAgB,EAAEpB,mBAFtB;AAGI,IAAA,QAAQ,EAAE,OAAO+B,MAAP,EAAe;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAf,KAA4C;AAClD;AACA,UAAI;AACA,YAAIC,YAAY,GAAG,MAAMlD,IAAI,CAACmD,uBAAL,CAA6BT,UAA7B,CAAzB;AACA,YAAIU,WAAW,GAAGL,MAAM,CAAC5B,QAAzB;;AACA,YAAI;AACA;AACA;AACA;AACA,gBAAMnB,IAAI,CAACqD,oBAAL,CAA0BX,UAA1B,EAAsCU,WAAtC,CAAN,CAJA,CAKA;AACA;;AACAJ,UAAAA,SAAS,CAAC,EAAD,CAAT;AACAC,UAAAA,SAAS,CAAC;AAAEK,YAAAA,OAAO,EAAE;AAAX,WAAD,CAAT;AACH,SATD,CASE,OAAOR,KAAP,EAAc;AACZG,UAAAA,SAAS,CAAC;AAAEH,YAAAA,KAAK,EAAE;AAAT,WAAD,CAAT;AACAS,UAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDV,KAAnD;AACH;AACJ,OAhBD,CAgBE,OAAOA,KAAP,EAAc;AACZG,QAAAA,SAAS,CAAC;AAAEH,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAT;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCV,KAAxC;AACH;AACJ,KAzBL;AA2BI,IAAA,MAAM,EAAE,CAAC;AACLC,MAAAA,MADK;AAELU,MAAAA,YAFK;AAGLC,MAAAA,OAHK;AAILC,MAAAA,MAJK;AAKLC,MAAAA,MALK;AAMLC,MAAAA,YANK;AAOLC,MAAAA,UAPK;AAQLC,MAAAA;AARK,KAAD,kBAUA;AACI,MAAA,SAAS,EAAE5B,OAAO,CAAC6B,IADvB;AAEI,MAAA,MAAM,EAAC,MAFX;AAGI,MAAA,EAAE,EAAC,mBAHP;AAII,MAAA,QAAQ,EAAEP,YAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAiC,MAAA,SAAS,EAAC,QAA3C;AAAoD,MAAA,OAAO,EAAE,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CADJ,EAIKE,MAAM,IAAIA,MAAM,CAACb,KAAjB,iBACG,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAE,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKa,MAAM,CAACb,KADZ,CADJ,CADJ,CALR,EAaKa,MAAM,IAAIA,MAAM,CAACL,OAAjB,iBACG,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE3C,UAAjB;AAA6B,MAAA,EAAE,EAAC,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFJ,CAdR,eAmBI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,SAAS,MADb;AAEI,MAAA,OAAO,EAAC,UAFZ;AAGI,MAAA,SAAS,MAHb;AAII,MAAA,MAAM,EAAC,OAJX;AAKI,MAAA,EAAE,EAAC,OALP;AAMI,MAAA,KAAK,EAAC,eANV;AAOI,MAAA,KAAK,EAAEoC,MAAM,CAACvB,KAPlB;AAQI,MAAA,MAAM,EAAEsC,UARZ;AASI,MAAA,QAAQ,EAAED,YATd;AAUI,MAAA,UAAU,EAAED,MAAM,CAACpC,KAVvB;AAWI,MAAA,KAAK,EAAE,WAAWoC,MAXtB;AAYI,MAAA,eAAe,EAAE;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAZrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAnBJ,eAmCI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,SAAS,MADb;AAEI,MAAA,OAAO,EAAC,UAFZ;AAGI,MAAA,MAAM,EAAC,OAHX;AAII,MAAA,EAAE,EAAC,UAJP;AAKI,MAAA,KAAK,EAAC,UALV;AAMI,MAAA,IAAI,EAAC,UANT;AAOI,MAAA,KAAK,EAAElB,MAAM,CAAC5B,QAPlB;AAQI,MAAA,MAAM,EAAE2C,UARZ;AASI,MAAA,QAAQ,EAAED,YATd;AAUI,MAAA,UAAU,EAAEH,OAAO,CAACvC,QAAR,IAAoByC,MAAM,CAACzC,QAV3C;AAWI,MAAA,KAAK,EAAEyC,MAAM,CAACzC,QAAP,IAAmBuC,OAAO,CAACvC,QAXtC;AAYI,MAAA,eAAe,EAAE;AAAE8C,QAAAA,MAAM,EAAE;AAAV,OAZrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAnCJ,eAmDI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,SAAS,MADb;AAEI,MAAA,OAAO,EAAC,UAFZ;AAGI,MAAA,MAAM,EAAC,OAHX;AAII,MAAA,EAAE,EAAC,iBAJP;AAKI,MAAA,KAAK,EAAC,kBALV;AAMI,MAAA,IAAI,EAAC,UANT;AAOI,MAAA,KAAK,EAAElB,MAAM,CAACtB,eAPlB;AAQI,MAAA,MAAM,EAAEqC,UARZ;AASI,MAAA,QAAQ,EAAED,YATd;AAUI,MAAA,UAAU,EACND,MAAM,CAACnC,eAXf;AAaI,MAAA,KAAK,EAAE,qBAAqBmC,MAbhC;AAcI,MAAA,eAAe,EAAE;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAdrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAnDJ,eAqEI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AACI,MAAA,QAAQ,EAAEF,YADd;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,OAAO,EAAC,UAHZ;AAII,MAAA,IAAI,EAAC,mBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CArEJ,CANJ,CArCZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,GAiIMtB,IAAI,KAAK,aAAT;AAAA;AACE;AACA;AACA;AACA;AAEI,sBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAC,QAAxB;AAAiC,IAAA,UAAU,EAAC,QAA5C;AAAqD,IAAA,SAAS,EAAC,QAA/D;AAAwE,IAAA,OAAO,EAAE,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,CADJ,eAII,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,OAAO,EAAEG,0BAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAJJ,EAQQb,wBAAwB,iBACxB,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAgC,IAAA,KAAK,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,eAII,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEpB,UAAjB;AAA6B,IAAA,EAAE,EAAC,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJJ,CATR,EAiBQsB,sBAAsB,iBACtB,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAgC,IAAA,KAAK,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADJ,CAlBR,CANN,GAiCI,IApKlB,CADJ,CADJ;AA2KH,CAvMD;;AAyMA,eAAevB,OAAO,CAAC,IAAD,CAAP,CAAcmB,cAAd,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { auth } from \"../firebase\";\nimport Layout from \"../components/GeneralLayout\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport { connect } from \"react-redux\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport queryString from 'query-string';\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport * as Yup from \"yup\";\n\n\nconst ResetPasswordSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(6, \"Too Short!\")\n        .max(20, \"We prefer insecure system, try a shorter password.\")\n        .required(\"Pasword is Required\"),\n    email: Yup.string().email(\"Invalid email\").required(\"Email is Required\"),\n    confirmPassword: Yup.string()\n        .required(\"Confirm Password Required\")\n        .test(\"passwords-match\", \"Passwords must match\", function (value) {\n            return this.parent.password === value;\n        }),\n});\n\nlet AccountActions = (props) => {\n    const [emailVerificationSuccess, setEmailVerificationSuccess] = useState()\n    const [emailVerificationError, setEmailVerificationError] = useState()\n    const classes = commonStyles();\n\n    let loginValues = { email: '', password: \"\", confirmPassword: \"\" };\n\n    let params = queryString.parse(props.location.search)\n    // Get the action to complete.\n    var mode = params.mode;\n    // Get the one-time code from the query parameter.\n    var actionCode = params.oobCode;\n\n    const applyEmailConfirmationCode = async () => {\n        try {\n            await auth.applyActionCode(actionCode)\n            // Email address has been verified.\n            // Display a confirmation message to the user.\n            // You could also provide the user with a link back to the app.\n            setEmailVerificationSuccess(true)\n        } catch (error) {\n            // Code is invalid or expired. Ask the user to verify their email address\n            // again.\n            setEmailVerificationError(true)\n        }\n\n    }\n\n    return (\n        <Layout>\n            <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\" p={4}>\n                {\n                    mode === \"resetPassword\" ?\n                        (\n                            <Formik\n                                initialValues={loginValues}\n                                validationSchema={ResetPasswordSchema}\n                                onSubmit={async (values, { resetForm, setStatus }) => {\n                                    // Verify the password reset code is valid.\n                                    try {\n                                        var accountEmail = await auth.verifyPasswordResetCode(actionCode)\n                                        var newPassword = values.password;\n                                        try {\n                                            // TODO: Show the reset screen with the user's email and ask the user for\n                                            // the new password.\n                                            // Save the new password.\n                                            await auth.confirmPasswordReset(actionCode, newPassword)\n                                            // Password reset has been confirmed and new password updated.\n                                            //sign-in the user directly\n                                            resetForm({});\n                                            setStatus({ success: \"Password reset successful!\" });\n                                        } catch (error) {\n                                            setStatus({ error: \"Error occurred during confirmation. The code might have expired or the password is too weak.\" });\n                                            console.log('Error confirming password reset => ', error)\n                                        }\n                                    } catch (error) {\n                                        setStatus({ error: \"Invalid or expired action code.Please try to reset the password again\" })\n                                        console.log(\"Error verifying code => \", error)\n                                    }\n                                }\n                                }\n                                render={({\n                                    values,\n                                    handleSubmit,\n                                    touched,\n                                    status,\n                                    errors,\n                                    handleChange,\n                                    handleBlur,\n                                    isSubmitting,\n                                }) => (\n                                        <form\n                                            className={classes.form}\n                                            method=\"post\"\n                                            id=\"resetPasswordForm\"\n                                            onSubmit={handleSubmit}\n                                        >\n                                            <Grid container justify=\"center\" direction=\"column\" spacing={2}>\n                                                <Grid item>\n                                                    <Typography variant=\"subtitle1\">Reset Password</Typography>\n                                                </Grid>\n                                                {status && status.error && (\n                                                    <Grid item>\n                                                        <FormControl fullWidth>\n                                                            <FormHelperText error={true}>\n                                                                {status.error}\n                                                            </FormHelperText>\n                                                        </FormControl>\n                                                    </Grid>\n                                                )}\n                                                {status && status.success && (\n                                                    <Grid item>\n                                                        <Typography variant=\"h6\">Password reset successful.</Typography>\n                                                        <Link component={RouterLink} to=\"/app/login\">Click here to login</Link>\n                                                    </Grid>\n                                                )}\n                                                <Grid item>\n                                                    <TextField\n                                                        fullWidth\n                                                        variant=\"outlined\"\n                                                        autoFocus\n                                                        margin=\"dense\"\n                                                        id=\"email\"\n                                                        label=\"Email Address\"\n                                                        value={values.email}\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        helperText={errors.email}\n                                                        error={'email' in errors}\n                                                        InputLabelProps={{ shrink: true }}\n                                                    />\n                                                </Grid>\n                                                <Grid item>\n                                                    <TextField\n                                                        fullWidth\n                                                        variant=\"outlined\"\n                                                        margin=\"dense\"\n                                                        id=\"password\"\n                                                        label=\"Password\"\n                                                        type=\"password\"\n                                                        value={values.password}\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        helperText={touched.password && errors.password}\n                                                        error={errors.password && touched.password}\n                                                        InputLabelProps={{ shrink: true }}\n                                                    />\n                                                </Grid>\n                                                <Grid item>\n                                                    <TextField\n                                                        fullWidth\n                                                        variant=\"outlined\"\n                                                        margin=\"dense\"\n                                                        id=\"confirmPassword\"\n                                                        label=\"Confirm Password\"\n                                                        type=\"password\"\n                                                        value={values.confirmPassword}\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        helperText={\n                                                            errors.confirmPassword\n                                                        }\n                                                        error={'confirmPassword' in errors}\n                                                        InputLabelProps={{ shrink: true }}\n                                                    />\n                                                </Grid>\n                                                <Grid item>\n                                                    <Button\n                                                        disabled={isSubmitting}\n                                                        type=\"submit\"\n                                                        variant=\"outlined\"\n                                                        form=\"resetPasswordForm\">\n                                                        Reset Password\n                                                </Button>\n                                                </Grid>\n                                            </Grid>\n                                        </form>\n                                    )\n                                }\n                            />\n                        )\n                        : mode === 'verifyEmail' ?\n                            // Display email verification handler and UI.\n                            // Localize the UI to the selected language as determined by the lang\n                            // parameter.\n                            // Try to apply the email verification code.\n                            (\n                                <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\" spacing={2}>\n                                    <Grid item>\n                                        <Typography variant=\"subtitle1\">Email Account Verification</Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button variant=\"contained\" color=\"primary\" onClick={applyEmailConfirmationCode}>Verify Email</Button>\n                                    </Grid>\n                                    {\n                                        emailVerificationSuccess &&\n                                        <Grid item>\n                                            <Typography variant=\"subtitle1\" align=\"center\">\n                                                Email Verified Successfully\n                                        </Typography>\n                                            <Link component={RouterLink} to=\"/app/login\">Click here to login</Link>\n                                        </Grid>\n                                    }\n                                    {\n                                        emailVerificationError &&\n                                        <Grid item>\n                                            <Typography variant=\"subtitle1\" align=\"center\">\n                                                Email Verification Failed! Code is invalid or expired!\n                                        </Typography>\n                                        </Grid>\n                                    }\n                                </Grid>\n                            )\n\n                            : null\n                }\n            </Box>\n        </Layout>\n    );\n};\n\nexport default connect(null)(AccountActions);\n"]},"metadata":{},"sourceType":"module"}