{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/charges/AddChargeForm.js\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport { getChargeOptions } from \"../../assets/commonAssets\";\nconst CHARGE_OPTIONS = getChargeOptions();\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst PaymentSchema = Yup.object().shape({\n  charge_type: Yup.string().trim().required('Charge type is required'),\n  charge_amount: Yup.number().typeError('Amount must be a number').positive(\"Amount must be a positive number\").required(\"Charge amount is required\"),\n  charge_date: Yup.date().required('Charge Date is Required'),\n  due_date: Yup.date()\n});\n\nlet AddChargeForm = ({\n  open,\n  handleClose,\n  leaseToAddCharge,\n  handleItemSubmit\n}) => {\n  const classes = commonStyles(); // Get the action to complete.\n\n  const chargeValues = {\n    charge_amount: 0,\n    charge_type: '',\n    charge_label: '',\n    charge_date: defaultDate,\n    due_date: defaultDate\n  };\n  return /*#__PURE__*/React.createElement(Dialog, {\n    fullWidth: true,\n    maxWidth: \"sm\",\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Add Charge Details\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: chargeValues,\n    enableReinitialize: true,\n    validationSchema: PaymentSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      //check if it is a legit lease to add charges to\n      if (leaseToAddCharge.tenants) {\n        try {\n          const charge = {\n            charge_amount: values.charge_amount,\n            charge_date: values.charge_date,\n            charge_type: values.charge_type,\n            charge_label: CHARGE_OPTIONS.find(({\n              id\n            }) => id === values.charge_type).displayValue,\n            payed: false,\n            due_date: values.due_date,\n            tenant_id: leaseToAddCharge.tenants[0],\n            property_id: leaseToAddCharge.property_id,\n            unit_id: leaseToAddCharge.unit_id\n          };\n          await handleItemSubmit(charge, 'transactions-charges');\n          resetForm({});\n          setStatus({\n            sent: true,\n            msg: \"Charge saved successfully.\"\n          });\n        } catch (error) {\n          setStatus({\n            sent: false,\n            msg: `Error! ${error}.`\n          });\n        }\n      } else {\n        setStatus({\n          sent: false,\n          msg: `Error cannot add charge to invalid agreement.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    noValidate: true,\n    id: \"chargeEditForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 41\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 54\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"charge_date\",\n    type: \"date\",\n    name: \"charge_date\",\n    label: \"Charge Date\",\n    value: values.charge_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    InputLabelProps: {\n      shrink: true\n    },\n    error: errors.charge_date && touched.charge_date,\n    helperText: touched.charge_date && errors.charge_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"due_date\",\n    type: \"date\",\n    name: \"due_date\",\n    label: \"Due Date\",\n    value: values.due_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    InputLabelProps: {\n      shrink: true\n    },\n    error: errors.due_date && touched.due_date,\n    helperText: touched.due_date && errors.due_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"text\",\n    variant: \"outlined\",\n    name: \"charge_amount\",\n    id: \"charge_amount\",\n    label: \"Charge Amount\",\n    value: values.charge_amount,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.charge_amount && touched.charge_amount,\n    helperText: touched.charge_amount && errors.charge_amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    id: \"charge_type\",\n    name: \"charge_type\",\n    label: \"Charge Type\",\n    value: values.charge_type,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.charge_type && touched.charge_type,\n    helperText: touched.charge_type && errors.charge_type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 41\n    }\n  }, CHARGE_OPTIONS.map((chargeOption, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: chargeOption.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 49\n    }\n  }, chargeOption.displayValue))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    justify: \"flex-start\",\n    direction: \"row\",\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 56\n      }\n    }),\n    onClick: () => handleClose(),\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 41\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 56\n      }\n    }),\n    form: \"chargeEditForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 41\n    }\n  }, \"Save Charge\"))))))));\n};\n\nexport default AddChargeForm;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/charges/AddChargeForm.js"],"names":["React","Grid","TextField","MenuItem","Button","SaveIcon","CancelIcon","CustomSnackbar","Formik","commonStyles","Yup","format","startOfToday","CustomCircularProgress","Dialog","DialogTitle","DialogContent","getChargeOptions","CHARGE_OPTIONS","defaultDate","PaymentSchema","object","shape","charge_type","string","trim","required","charge_amount","number","typeError","positive","charge_date","date","due_date","AddChargeForm","open","handleClose","leaseToAddCharge","handleItemSubmit","classes","chargeValues","charge_label","values","resetForm","setStatus","tenants","charge","find","id","displayValue","payed","tenant_id","property_id","unit_id","sent","msg","error","status","handleSubmit","touched","errors","handleChange","handleBlur","isSubmitting","form","shrink","map","chargeOption","index","buttonBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport { getChargeOptions } from \"../../assets/commonAssets\";\n\nconst CHARGE_OPTIONS = getChargeOptions();\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\nconst PaymentSchema = Yup.object().shape({\n    charge_type: Yup.string().trim().required('Charge type is required'),\n    charge_amount: Yup.number().typeError('Amount must be a number').positive(\"Amount must be a positive number\")\n        .required(\"Charge amount is required\"),\n    charge_date: Yup.date().required('Charge Date is Required'),\n    due_date: Yup.date(),\n});\n\n\nlet AddChargeForm = ({ open, handleClose, leaseToAddCharge, handleItemSubmit }) => {\n    const classes = commonStyles();\n    // Get the action to complete.\n    const chargeValues = {\n        charge_amount: 0,\n        charge_type: '',\n        charge_label: '',\n        charge_date: defaultDate,\n        due_date: defaultDate,\n    };\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">Add Charge Details</DialogTitle>\n            <DialogContent>\n                <Formik\n                    initialValues={chargeValues}\n                    enableReinitialize validationSchema={PaymentSchema}\n                    onSubmit={async (values, { resetForm, setStatus }) => {\n                        //check if it is a legit lease to add charges to\n                        if (leaseToAddCharge.tenants) {\n                            try {\n                                const charge = {\n                                    charge_amount: values.charge_amount,\n                                    charge_date: values.charge_date,\n                                    charge_type: values.charge_type,\n                                    charge_label: CHARGE_OPTIONS.find(({ id }) => id === values.charge_type).displayValue,\n                                    payed: false,\n                                    due_date: values.due_date,\n                                    tenant_id: leaseToAddCharge.tenants[0],\n                                    property_id: leaseToAddCharge.property_id,\n                                    unit_id: leaseToAddCharge.unit_id,\n                                };\n                                await handleItemSubmit(charge, 'transactions-charges')\n                                resetForm({});\n                                setStatus({ sent: true, msg: \"Charge saved successfully.\" })\n                            } catch (error) {\n                                setStatus({ sent: false, msg: `Error! ${error}.` })\n                            }\n                        } else {\n                            setStatus({ sent: false, msg: `Error cannot add charge to invalid agreement.` })\n                        }\n                    }}\n                >\n                    {({\n                        values,\n                        status,\n                        handleSubmit,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                    }) => (\n                        <form\n                            className={classes.form}\n                            method=\"post\"\n                            noValidate\n                            id=\"chargeEditForm\"\n                            onSubmit={handleSubmit}\n                        >\n                            <Grid container>\n                                {\n                                    status && status.msg && (\n                                        <CustomSnackbar\n                                            variant={status.sent ? \"success\" : \"error\"}\n                                            message={status.msg}\n                                        />\n                                    )\n                                }\n                                {\n                                    isSubmitting && (<CustomCircularProgress open={true} />)\n                                }\n                                <Grid item container spacing={2} direction=\"column\">\n                                    <Grid item>\n                                        <TextField\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            id=\"charge_date\"\n                                            type=\"date\"\n                                            name=\"charge_date\"\n                                            label=\"Charge Date\"\n                                            value={values.charge_date}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            InputLabelProps={{ shrink: true }}\n                                            error={errors.charge_date && touched.charge_date}\n                                            helperText={touched.charge_date && errors.charge_date}\n                                        />\n                                    </Grid>\n                                    <Grid item>\n                                        <TextField\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            id=\"due_date\"\n                                            type=\"date\"\n                                            name=\"due_date\"\n                                            label=\"Due Date\"\n                                            value={values.due_date}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            InputLabelProps={{ shrink: true }}\n                                            error={errors.due_date && touched.due_date}\n                                            helperText={touched.due_date && errors.due_date}\n                                        />\n                                    </Grid>\n                                    <Grid item>\n                                        <TextField\n                                            fullWidth\n                                            type=\"text\"\n                                            variant=\"outlined\"\n                                            name=\"charge_amount\"\n                                            id=\"charge_amount\"\n                                            label=\"Charge Amount\"\n                                            value={values.charge_amount}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            error={errors.charge_amount && touched.charge_amount}\n                                            helperText={touched.charge_amount && errors.charge_amount}\n                                        />\n                                    </Grid>\n                                    <Grid item>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            variant=\"outlined\"\n                                            id=\"charge_type\"\n                                            name=\"charge_type\"\n                                            label=\"Charge Type\"\n                                            value={values.charge_type}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            error={errors.charge_type && touched.charge_type}\n                                            helperText={touched.charge_type && errors.charge_type}\n                                        >\n                                            {CHARGE_OPTIONS.map((chargeOption, index) => (\n                                                <MenuItem key={index} value={chargeOption.id}>\n                                                    {chargeOption.displayValue}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    item\n                                    container\n                                    justify=\"flex-start\"\n                                    direction=\"row\"\n                                    className={classes.buttonBox}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            color=\"secondary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<CancelIcon />}\n                                            onClick={() => handleClose()}\n                                            disableElevation\n                                        >\n                                            Cancel\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            type=\"submit\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SaveIcon />}\n                                            form=\"chargeEditForm\"\n                                            disabled={isSubmitting}\n                                        >\n                                            Save Charge\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    )\n                    }\n                </Formik >\n            </DialogContent>\n        </Dialog >\n    );\n};\n\nexport default AddChargeForm;"]},"metadata":{},"sourceType":"module"}