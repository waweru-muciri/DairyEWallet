{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/expenses/ExpenseInputForm.js\";\nimport React from \"react\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport * as Yup from \"yup\";\nimport { getExpensesCategories } from \"../../assets/commonAssets\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst EXPENSE_CATEGORIES = getExpensesCategories();\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst PropertyExpenseSchema = Yup.object().shape({\n  type: Yup.string().required(\"Expenditure Type/Name is required\"),\n  amount: Yup.number().positive(\"Amount must be a positive number\").required(\"Expenditure Amount is required\"),\n  expense_date: Yup.date().required(\"Expenditure Date Required\"),\n  property_id: Yup.string().required(\"Property is Required\"),\n  unit_id: Yup.string().default(\"\"),\n  expense_notes: Yup.string().default(\"\")\n});\n\nconst ExpenseInputForm = props => {\n  const {\n    properties,\n    propertyUnits,\n    handleItemSubmit,\n    history\n  } = props;\n  const classes = commonStyles();\n  const expenseToEdit = props.expenseToEdit || {};\n  const expenseValues = {\n    id: expenseToEdit.id,\n    expense_notes: expenseToEdit.expense_notes || '',\n    expense_date: expenseToEdit.expense_date || defaultDate,\n    amount: expenseToEdit.amount || '',\n    property_id: expenseToEdit.property_id || '',\n    unit_id: expenseToEdit.unit_id || '',\n    type: expenseToEdit.type || ''\n  };\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: expenseValues,\n    enableReinitialize: true,\n    validationSchema: PropertyExpenseSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      try {\n        const expense = {\n          id: values.id,\n          type: values.type,\n          amount: values.amount,\n          unit_id: values.unit_id,\n          property_id: values.property_id,\n          expense_date: values.expense_date,\n          expense_notes: values.expense_notes\n        };\n        await handleItemSubmit(expense, \"expenses\");\n        resetForm({});\n\n        if (values.id) {\n          history.goBack();\n        }\n\n        setStatus({\n          sent: true,\n          msg: \"Details saved successfully.\"\n        });\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    setFieldValue,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"expenseInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"stretch\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_id\",\n    label: \"Property\",\n    id: \"property_id\",\n    onChange: event => {\n      setFieldValue('property_id', event.target.value);\n      setFieldValue('unit_id', '');\n    },\n    value: values.property_id,\n    error: errors.property_id && touched.property_id,\n    helperText: touched.property_id && errors.property_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"unit_id\",\n    label: \"Unit\",\n    id: \"unit_id\",\n    onChange: handleChange,\n    value: values.unit_id,\n    error: errors.unit_id && touched.unit_id,\n    helperText: touched.unit_id && errors.unit_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, propertyUnits.filter(({\n    property_id\n  }) => property_id === values.property_id).map((unit_id, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: unit_id.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, unit_id.ref))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"expense_date\",\n    name: \"expense_date\",\n    label: \"Expenditure Date\",\n    value: values.expense_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.expense_date && touched.expense_date,\n    helperText: touched.expense_date && errors.expense_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    id: \"type\",\n    name: \"type\",\n    label: \"Expense Type\",\n    value: values.type,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.type && touched.type,\n    helperText: touched.type && errors.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, EXPENSE_CATEGORIES.map((category, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: category.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, category.displayValue)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"amount\",\n    name: \"amount\",\n    label: \"Expenditure Amount\",\n    value: values.amount,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.amount && touched.amount,\n    helperText: touched.amount && errors.amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    multiline: true,\n    rows: 2,\n    variant: \"outlined\",\n    id: \"expense_notes\",\n    name: \"expense_notes\",\n    label: \"Notes\",\n    value: values.expense_notes,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: \"Any notes regarding this expense?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 30\n      }\n    }),\n    onClick: () => history.goBack(),\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 30\n      }\n    }),\n    form: \"expenseInputForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, \"Save\"))))));\n};\n\nexport default ExpenseInputForm;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/expenses/ExpenseInputForm.js"],"names":["React","CustomSnackbar","Grid","Button","TextField","MenuItem","Formik","commonStyles","SaveIcon","CancelIcon","Yup","getExpensesCategories","format","startOfToday","CustomCircularProgress","EXPENSE_CATEGORIES","defaultDate","PropertyExpenseSchema","object","shape","type","string","required","amount","number","positive","expense_date","date","property_id","unit_id","default","expense_notes","ExpenseInputForm","props","properties","propertyUnits","handleItemSubmit","history","classes","expenseToEdit","expenseValues","id","values","resetForm","setStatus","expense","goBack","sent","msg","error","status","handleSubmit","touched","errors","handleChange","handleBlur","setFieldValue","isSubmitting","form","event","target","value","map","property","index","ref","filter","shrink","category","displayValue","buttonBox"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,UAArC;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AAEA,MAAMC,kBAAkB,GAAGJ,qBAAqB,EAAhD;AACA,MAAMK,WAAW,GAAGJ,MAAM,CAACC,YAAY,EAAb,EAAiB,YAAjB,CAA1B;AAEA,MAAMI,qBAAqB,GAAGP,GAAG,CAACQ,MAAJ,GAAaC,KAAb,CAAmB;AAC/CC,EAAAA,IAAI,EAAEV,GAAG,CAACW,MAAJ,GAAaC,QAAb,CAAsB,mCAAtB,CADyC;AAE/CC,EAAAA,MAAM,EAAEb,GAAG,CAACc,MAAJ,GAAaC,QAAb,CAAsB,kCAAtB,EAA0DH,QAA1D,CAAmE,gCAAnE,CAFuC;AAG/CI,EAAAA,YAAY,EAAEhB,GAAG,CAACiB,IAAJ,GAAWL,QAAX,CAAoB,2BAApB,CAHiC;AAI/CM,EAAAA,WAAW,EAAElB,GAAG,CAACW,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB,CAJkC;AAK/CO,EAAAA,OAAO,EAAEnB,GAAG,CAACW,MAAJ,GAAaS,OAAb,CAAqB,EAArB,CALsC;AAM/CC,EAAAA,aAAa,EAAErB,GAAG,CAACW,MAAJ,GAAaS,OAAb,CAAqB,EAArB;AANgC,CAAnB,CAA9B;;AASA,MAAME,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BC,IAAAA,gBAA7B;AAA+CC,IAAAA;AAA/C,MAA2DJ,KAAjE;AACA,QAAMK,OAAO,GAAG/B,YAAY,EAA5B;AACA,QAAMgC,aAAa,GAAGN,KAAK,CAACM,aAAN,IAAuB,EAA7C;AACA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,EAAE,EAAEF,aAAa,CAACE,EADE;AAEpBV,IAAAA,aAAa,EAAEQ,aAAa,CAACR,aAAd,IAA+B,EAF1B;AAGpBL,IAAAA,YAAY,EAAEa,aAAa,CAACb,YAAd,IAA8BV,WAHxB;AAIpBO,IAAAA,MAAM,EAAEgB,aAAa,CAAChB,MAAd,IAAwB,EAJZ;AAKpBK,IAAAA,WAAW,EAAEW,aAAa,CAACX,WAAd,IAA6B,EALtB;AAMpBC,IAAAA,OAAO,EAAEU,aAAa,CAACV,OAAd,IAAyB,EANd;AAOpBT,IAAAA,IAAI,EAAEmB,aAAa,CAACnB,IAAd,IAAsB;AAPR,GAAtB;AAUA,sBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAEoB,aADjB;AAEE,IAAA,kBAAkB,MAFpB;AAGE,IAAA,gBAAgB,EAAEvB,qBAHpB;AAIE,IAAA,QAAQ,EAAE,OAAOyB,MAAP,EAAe;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAf,KAA4C;AACpD,UAAI;AACF,cAAMC,OAAO,GAAG;AACdJ,UAAAA,EAAE,EAAEC,MAAM,CAACD,EADG;AAEdrB,UAAAA,IAAI,EAAEsB,MAAM,CAACtB,IAFC;AAGdG,UAAAA,MAAM,EAAEmB,MAAM,CAACnB,MAHD;AAIdM,UAAAA,OAAO,EAAEa,MAAM,CAACb,OAJF;AAKdD,UAAAA,WAAW,EAAEc,MAAM,CAACd,WALN;AAMdF,UAAAA,YAAY,EAAEgB,MAAM,CAAChB,YANP;AAOdK,UAAAA,aAAa,EAAEW,MAAM,CAACX;AAPR,SAAhB;AASA,cAAMK,gBAAgB,CAACS,OAAD,EAAU,UAAV,CAAtB;AACAF,QAAAA,SAAS,CAAC,EAAD,CAAT;;AACA,YAAID,MAAM,CAACD,EAAX,EAAe;AACbJ,UAAAA,OAAO,CAACS,MAAR;AACD;;AACDF,QAAAA,SAAS,CAAC;AAAEG,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,GAAG,EAAE;AAAnB,SAAD,CAAT;AACD,OAhBD,CAgBE,OAAOC,KAAP,EAAc;AACdL,QAAAA,SAAS,CAAC;AAAEG,UAAAA,IAAI,EAAE,KAAR;AAAeC,UAAAA,GAAG,EAAG,UAASC,KAAM;AAApC,SAAD,CAAT;AACD;AACF,KAxBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA0BG,CAAC;AACAP,IAAAA,MADA;AAEAQ,IAAAA,MAFA;AAGAC,IAAAA,YAHA;AAIAC,IAAAA,OAJA;AAKAC,IAAAA,MALA;AAMAC,IAAAA,YANA;AAOAC,IAAAA,UAPA;AAQAC,IAAAA,aARA;AASAC,IAAAA;AATA,GAAD,kBAWC;AACE,IAAA,SAAS,EAAEnB,OAAO,CAACoB,IADrB;AAEE,IAAA,MAAM,EAAC,MAFT;AAGE,IAAA,EAAE,EAAC,kBAHL;AAIE,IAAA,QAAQ,EAAEP,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,UAAU,EAAC,SAJb;AAKE,IAAA,SAAS,EAAC,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQID,MAAM,IAAIA,MAAM,CAACF,GAAjB,iBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAEE,MAAM,CAACH,IAAP,GAAc,SAAd,GAA0B,OADrC;AAEE,IAAA,OAAO,EAAEG,MAAM,CAACF,GAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATN,EAgBIS,YAAY,iBAAK,oBAAC,sBAAD;AAAwB,IAAA,IAAI,EAAE,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBrB,eAkBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAC,KAA/B;AAAqC,IAAA,OAAO,EAAE,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,IAAI,EAAC,aAJP;AAKE,IAAA,KAAK,EAAC,UALR;AAME,IAAA,EAAE,EAAC,aANL;AAOE,IAAA,QAAQ,EAAGE,KAAD,IAAW;AACnBH,MAAAA,aAAa,CAAC,aAAD,EAAgBG,KAAK,CAACC,MAAN,CAAaC,KAA7B,CAAb;AACAL,MAAAA,aAAa,CAAC,SAAD,EAAY,EAAZ,CAAb;AACD,KAVH;AAWE,IAAA,KAAK,EAAEd,MAAM,CAACd,WAXhB;AAYE,IAAA,KAAK,EAAEyB,MAAM,CAACzB,WAAP,IAAsBwB,OAAO,CAACxB,WAZvC;AAaE,IAAA,UAAU,EAAEwB,OAAO,CAACxB,WAAR,IAAuByB,MAAM,CAACzB,WAb5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGM,UAAU,CAAC4B,GAAX,CAAe,CAACC,QAAD,EAAWC,KAAX,kBACd,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAsB,IAAA,KAAK,EAAED,QAAQ,CAACtB,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsB,QAAQ,CAACE,GADZ,CADD,CAhBH,CADF,CADF,eAyBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,IAAI,EAAC,SAJP;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,EAAE,EAAC,SANL;AAOE,IAAA,QAAQ,EAAEX,YAPZ;AAQE,IAAA,KAAK,EAAEZ,MAAM,CAACb,OARhB;AASE,IAAA,KAAK,EAAEwB,MAAM,CAACxB,OAAP,IAAkBuB,OAAO,CAACvB,OATnC;AAUE,IAAA,UAAU,EAAEuB,OAAO,CAACvB,OAAR,IAAmBwB,MAAM,CAACxB,OAVxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGM,aAAa,CAAC+B,MAAd,CAAqB,CAAC;AAAEtC,IAAAA;AAAF,GAAD,KAAqBA,WAAW,KAAKc,MAAM,CAACd,WAAjE,EAA8EkC,GAA9E,CAAkF,CAACjC,OAAD,EAAUmC,KAAV,kBACjF,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAsB,IAAA,KAAK,EAAEnC,OAAO,CAACY,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,OAAO,CAACoC,GADX,CADD,CAZH,CADF,CAzBF,CAlBF,eAgEE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,eAAe,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAHnB;AAIE,IAAA,OAAO,EAAC,UAJV;AAKE,IAAA,EAAE,EAAC,cALL;AAME,IAAA,IAAI,EAAC,cANP;AAOE,IAAA,KAAK,EAAC,kBAPR;AAQE,IAAA,KAAK,EAAEzB,MAAM,CAAChB,YARhB;AASE,IAAA,QAAQ,EAAE4B,YATZ;AAUE,IAAA,MAAM,EAAEC,UAVV;AAWE,IAAA,KAAK,EAAEF,MAAM,CAAC3B,YAAP,IAAuB0B,OAAO,CAAC1B,YAXxC;AAYE,IAAA,UAAU,EAAE0B,OAAO,CAAC1B,YAAR,IAAwB2B,MAAM,CAAC3B,YAZ7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhEF,eAgFE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,EAAE,EAAC,MAJL;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,KAAK,EAAC,cANR;AAOE,IAAA,KAAK,EAAEgB,MAAM,CAACtB,IAPhB;AAQE,IAAA,QAAQ,EAAEkC,YARZ;AASE,IAAA,MAAM,EAAEC,UATV;AAUE,IAAA,KAAK,EAAEF,MAAM,CAACjC,IAAP,IAAegC,OAAO,CAAChC,IAVhC;AAWE,IAAA,UAAU,EAAEgC,OAAO,CAAChC,IAAR,IAAgBiC,MAAM,CAACjC,IAXrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGL,kBAAkB,CAAC+C,GAAnB,CAAuB,CAACM,QAAD,EAAWJ,KAAX,kBACtB,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAsB,IAAA,KAAK,EAAEI,QAAQ,CAAC3B,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG2B,QAAQ,CAACC,YADZ,CADD,CAbH,CADF,CAhFF,eAqGE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,EAAE,EAAC,QAHL;AAIE,IAAA,IAAI,EAAC,QAJP;AAKE,IAAA,KAAK,EAAC,oBALR;AAME,IAAA,KAAK,EAAE3B,MAAM,CAACnB,MANhB;AAOE,IAAA,QAAQ,EAAE+B,YAPZ;AAQE,IAAA,MAAM,EAAEC,UARV;AASE,IAAA,KAAK,EAAEF,MAAM,CAAC9B,MAAP,IAAiB6B,OAAO,CAAC7B,MATlC;AAUE,IAAA,UAAU,EAAE6B,OAAO,CAAC7B,MAAR,IAAkB8B,MAAM,CAAC9B,MAVvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArGF,eAmHE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,IAAI,EAAE,CAHR;AAIE,IAAA,OAAO,EAAC,UAJV;AAKE,IAAA,EAAE,EAAC,eALL;AAME,IAAA,IAAI,EAAC,eANP;AAOE,IAAA,KAAK,EAAC,OAPR;AAQE,IAAA,KAAK,EAAEmB,MAAM,CAACX,aARhB;AASE,IAAA,QAAQ,EAAEuB,YATZ;AAUE,IAAA,MAAM,EAAEC,UAVV;AAWE,IAAA,UAAU,EAAE,mCAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnHF,eAkIE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAC,KAA/B;AAAqC,IAAA,SAAS,EAAEjB,OAAO,CAACgC,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,SAAS,eAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJb;AAKE,IAAA,OAAO,EAAE,MAAMjC,OAAO,CAACS,MAAR,EALjB;AAME,IAAA,gBAAgB,MANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF,eAaE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,IAAI,EAAC,QAJP;AAKE,IAAA,SAAS,eAAE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALb;AAME,IAAA,IAAI,EAAC,kBANP;AAOE,IAAA,QAAQ,EAAEW,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAbF,CAlIF,CANF,CArCJ,CADF;AA8MD,CA5ND;;AA8NA,eAAezB,gBAAf","sourcesContent":["import React from \"react\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport * as Yup from \"yup\";\nimport { getExpensesCategories } from \"../../assets/commonAssets\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\nconst EXPENSE_CATEGORIES = getExpensesCategories();\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\nconst PropertyExpenseSchema = Yup.object().shape({\n  type: Yup.string().required(\"Expenditure Type/Name is required\"),\n  amount: Yup.number().positive(\"Amount must be a positive number\").required(\"Expenditure Amount is required\"),\n  expense_date: Yup.date().required(\"Expenditure Date Required\"),\n  property_id: Yup.string().required(\"Property is Required\"),\n  unit_id: Yup.string().default(\"\"),\n  expense_notes: Yup.string().default(\"\"),\n});\n\nconst ExpenseInputForm = (props) => {\n  const { properties, propertyUnits, handleItemSubmit, history } = props\n  const classes = commonStyles();\n  const expenseToEdit = props.expenseToEdit || {}\n  const expenseValues = {\n    id: expenseToEdit.id,\n    expense_notes: expenseToEdit.expense_notes || '',\n    expense_date: expenseToEdit.expense_date || defaultDate,\n    amount: expenseToEdit.amount || '',\n    property_id: expenseToEdit.property_id || '',\n    unit_id: expenseToEdit.unit_id || '',\n    type: expenseToEdit.type || '',\n  }\n\n  return (\n    <Formik\n      initialValues={expenseValues}\n      enableReinitialize\n      validationSchema={PropertyExpenseSchema}\n      onSubmit={async (values, { resetForm, setStatus }) => {\n        try {\n          const expense = {\n            id: values.id,\n            type: values.type,\n            amount: values.amount,\n            unit_id: values.unit_id,\n            property_id: values.property_id,\n            expense_date: values.expense_date,\n            expense_notes: values.expense_notes,\n          };\n          await handleItemSubmit(expense, \"expenses\")\n          resetForm({});\n          if (values.id) {\n            history.goBack();\n          }\n          setStatus({ sent: true, msg: \"Details saved successfully.\" })\n        } catch (error) {\n          setStatus({ sent: false, msg: `Error! ${error}.` })\n        }\n      }}\n    >\n      {({\n        values,\n        status,\n        handleSubmit,\n        touched,\n        errors,\n        handleChange,\n        handleBlur,\n        setFieldValue,\n        isSubmitting,\n      }) => (\n        <form\n          className={classes.form}\n          method=\"post\"\n          id=\"expenseInputForm\"\n          onSubmit={handleSubmit}\n        >\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n          >\n            {\n              status && status.msg && (\n                <CustomSnackbar\n                  variant={status.sent ? \"success\" : \"error\"}\n                  message={status.msg}\n                />\n              )\n            }\n            {\n              isSubmitting && (<CustomCircularProgress open={true} />)\n            }\n            <Grid item container direction=\"row\" spacing={2}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  variant=\"outlined\"\n                  name=\"property_id\"\n                  label=\"Property\"\n                  id=\"property_id\"\n                  onChange={(event) => {\n                    setFieldValue('property_id', event.target.value);\n                    setFieldValue('unit_id', '');\n                  }}\n                  value={values.property_id}\n                  error={errors.property_id && touched.property_id}\n                  helperText={touched.property_id && errors.property_id}\n\n                >\n                  {properties.map((property, index) => (\n                    <MenuItem key={index} value={property.id}>\n                      {property.ref}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  variant=\"outlined\"\n                  name=\"unit_id\"\n                  label=\"Unit\"\n                  id=\"unit_id\"\n                  onChange={handleChange}\n                  value={values.unit_id}\n                  error={errors.unit_id && touched.unit_id}\n                  helperText={touched.unit_id && errors.unit_id}\n                >\n                  {propertyUnits.filter(({ property_id }) => property_id === values.property_id).map((unit_id, index) => (\n                    <MenuItem key={index} value={unit_id.id}>\n                      {unit_id.ref}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                type=\"date\"\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n                id=\"expense_date\"\n                name=\"expense_date\"\n                label=\"Expenditure Date\"\n                value={values.expense_date}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.expense_date && touched.expense_date}\n                helperText={touched.expense_date && errors.expense_date}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                select\n                variant=\"outlined\"\n                id=\"type\"\n                name=\"type\"\n                label=\"Expense Type\"\n                value={values.type}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.type && touched.type}\n                helperText={touched.type && errors.type}\n              >\n                {EXPENSE_CATEGORIES.map((category, index) => (\n                  <MenuItem key={index} value={category.id}>\n                    {category.displayValue}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"amount\"\n                name=\"amount\"\n                label=\"Expenditure Amount\"\n                value={values.amount}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.amount && touched.amount}\n                helperText={touched.amount && errors.amount}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                multiline\n                rows={2}\n                variant=\"outlined\"\n                id=\"expense_notes\"\n                name=\"expense_notes\"\n                label=\"Notes\"\n                value={values.expense_notes}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                helperText={\"Any notes regarding this expense?\"}\n              />\n            </Grid>\n            <Grid item container direction=\"row\" className={classes.buttonBox}>\n              <Grid item>\n                <Button\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => history.goBack()}\n                  disableElevation\n                >\n                  Cancel\n                  </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<SaveIcon />}\n                  form=\"expenseInputForm\"\n                  disabled={isSubmitting}\n                >\n                  Save\n                  </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ExpenseInputForm;\n"]},"metadata":{},"sourceType":"module"}