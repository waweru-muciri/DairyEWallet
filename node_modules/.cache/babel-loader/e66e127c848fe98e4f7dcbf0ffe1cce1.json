{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/accountDeposits/AccountDepositInputForm.js\";\nimport React from \"react\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst AccountDepositSchema = Yup.object().shape({\n  deposit_amount: Yup.number().positive(\"Amount must be a positive number\").required(\"Deposit Amount is required\"),\n  deposit_date: Yup.date().required(\"Deposit Date Required\"),\n  contact_id: Yup.string().required(\"Client is Required\"),\n  deposit_notes: Yup.string().default(\"\")\n});\n\nconst AccountDepositInputForm = props => {\n  const classes = commonStyles();\n  const {\n    contacts,\n    handleItemSubmit,\n    history\n  } = props;\n  const accountDepositToEdit = props.accountDepositToEdit || {};\n  const accountDepositValues = {\n    id: accountDepositToEdit.id,\n    deposit_notes: accountDepositToEdit.deposit_notes || '',\n    deposit_date: accountDepositToEdit.deposit_date || defaultDate,\n    deposit_amount: accountDepositToEdit.deposit_amount || '',\n    contact_id: accountDepositToEdit.contact_id || ''\n  };\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: accountDepositValues,\n    enableReinitialize: true,\n    validationSchema: AccountDepositSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      try {\n        const product = {\n          id: values.id,\n          deposit_amount: values.deposit_amount,\n          contact_id: values.contact_id,\n          deposit_date: values.deposit_date,\n          deposit_notes: values.deposit_notes\n        };\n        await handleItemSubmit(product, \"products\");\n        resetForm({});\n\n        if (values.id) {\n          history.goBack();\n        }\n\n        setStatus({\n          sent: true,\n          msg: \"Details saved successfully.\"\n        });\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    setFieldValue,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"productInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"stretch\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"deposit_date\",\n    name: \"deposit_date\",\n    label: \"Deposit Date\",\n    value: values.deposit_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.deposit_date && touched.deposit_date,\n    helperText: touched.deposit_date && errors.deposit_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"contact_id\",\n    label: \"Client\",\n    id: \"contact_id\",\n    onChange: event => {\n      setFieldValue('contact_id', event.target.value);\n    },\n    value: values.contact_id,\n    error: errors.contact_id && touched.contact_id,\n    helperText: touched.contact_id && errors.contact_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, contacts.map((contact, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: contact.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, contact.first_name, \" \", contact.last_name))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"deposit_amount\",\n    name: \"deposit_amount\",\n    label: \"Deposit Amount\",\n    value: values.deposit_amount,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.deposit_amount && touched.deposit_amount,\n    helperText: touched.deposit_amount && errors.deposit_amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    multiline: true,\n    rows: 2,\n    variant: \"outlined\",\n    id: \"deposit_notes\",\n    name: \"deposit_notes\",\n    label: \"Notes\",\n    value: values.deposit_notes,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: \"Any notes regarding this deposit?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 30\n      }\n    }),\n    onClick: () => history.goBack(),\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 30\n      }\n    }),\n    form: \"productInputForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, \"Save\"))))));\n};\n\nexport default AccountDepositInputForm;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/accountDeposits/AccountDepositInputForm.js"],"names":["React","CustomSnackbar","Grid","Button","TextField","MenuItem","Formik","commonStyles","SaveIcon","CancelIcon","Yup","format","startOfToday","CustomCircularProgress","defaultDate","AccountDepositSchema","object","shape","deposit_amount","number","positive","required","deposit_date","date","contact_id","string","deposit_notes","default","AccountDepositInputForm","props","classes","contacts","handleItemSubmit","history","accountDepositToEdit","accountDepositValues","id","values","resetForm","setStatus","product","goBack","sent","msg","error","status","handleSubmit","touched","errors","handleChange","handleBlur","setFieldValue","isSubmitting","form","shrink","event","target","value","map","contact","index","first_name","last_name","buttonBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\nconst AccountDepositSchema = Yup.object().shape({\n  deposit_amount: Yup.number().positive(\"Amount must be a positive number\").required(\"Deposit Amount is required\"),\n  deposit_date: Yup.date().required(\"Deposit Date Required\"),\n  contact_id: Yup.string().required(\"Client is Required\"),\n  deposit_notes: Yup.string().default(\"\"),\n});\n\nconst AccountDepositInputForm = (props) => {\n  const classes = commonStyles();\n\n  const { contacts, handleItemSubmit, history } = props\n  const accountDepositToEdit = props.accountDepositToEdit || {}\n  const accountDepositValues = {\n    id: accountDepositToEdit.id,\n    deposit_notes: accountDepositToEdit.deposit_notes || '',\n    deposit_date: accountDepositToEdit.deposit_date || defaultDate,\n    deposit_amount: accountDepositToEdit.deposit_amount || '',\n    contact_id: accountDepositToEdit.contact_id || '',\n  }\n\n  return (\n    <Formik\n      initialValues={accountDepositValues}\n      enableReinitialize\n      validationSchema={AccountDepositSchema}\n      onSubmit={async (values, { resetForm, setStatus }) => {\n        try {\n          const product = {\n            id: values.id,\n            deposit_amount: values.deposit_amount,\n            contact_id: values.contact_id,\n            deposit_date: values.deposit_date,\n            deposit_notes: values.deposit_notes,\n          };\n          await handleItemSubmit(product, \"products\")\n          resetForm({});\n          if (values.id) {\n            history.goBack();\n          }\n          setStatus({ sent: true, msg: \"Details saved successfully.\" })\n        } catch (error) {\n          setStatus({ sent: false, msg: `Error! ${error}.` })\n        }\n      }}\n    >\n      {({\n        values,\n        status,\n        handleSubmit,\n        touched,\n        errors,\n        handleChange,\n        handleBlur,\n        setFieldValue,\n        isSubmitting,\n      }) => (\n        <form\n          className={classes.form}\n          method=\"post\"\n          id=\"productInputForm\"\n          onSubmit={handleSubmit}\n        >\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n          >\n            {\n              status && status.msg && (\n                <CustomSnackbar\n                  variant={status.sent ? \"success\" : \"error\"}\n                  message={status.msg}\n                />\n              )\n            }\n            {\n              isSubmitting && (<CustomCircularProgress open={true} />)\n            }\n            <Grid item container direction=\"row\" spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  type=\"date\"\n                  InputLabelProps={{ shrink: true }}\n                  variant=\"outlined\"\n                  id=\"deposit_date\"\n                  name=\"deposit_date\"\n                  label=\"Deposit Date\"\n                  value={values.deposit_date}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  error={errors.deposit_date && touched.deposit_date}\n                  helperText={touched.deposit_date && errors.deposit_date}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  select\n                  variant=\"outlined\"\n                  name=\"contact_id\"\n                  label=\"Client\"\n                  id=\"contact_id\"\n                  onChange={(event) => {\n                    setFieldValue('contact_id', event.target.value);\n                  }}\n                  value={values.contact_id}\n                  error={errors.contact_id && touched.contact_id}\n                  helperText={touched.contact_id && errors.contact_id}\n\n                >\n                  {contacts.map((contact, index) => (\n                    <MenuItem key={index} value={contact.id}>\n                      {contact.first_name} {contact.last_name}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"deposit_amount\"\n                name=\"deposit_amount\"\n                label=\"Deposit Amount\"\n                value={values.deposit_amount}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.deposit_amount && touched.deposit_amount}\n                helperText={touched.deposit_amount && errors.deposit_amount}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                multiline\n                rows={2}\n                variant=\"outlined\"\n                id=\"deposit_notes\"\n                name=\"deposit_notes\"\n                label=\"Notes\"\n                value={values.deposit_notes}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                helperText={\"Any notes regarding this deposit?\"}\n              />\n            </Grid>\n            <Grid item container direction=\"row\" className={classes.buttonBox}>\n              <Grid item>\n                <Button\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => history.goBack()}\n                  disableElevation\n                >\n                  Cancel\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<SaveIcon />}\n                  form=\"productInputForm\"\n                  disabled={isSubmitting}\n                >\n                  Save\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default AccountDepositInputForm;\n"]},"metadata":{},"sourceType":"module"}