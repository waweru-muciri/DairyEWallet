{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/Payments.js\";\nimport Layout from \"../components/PrivateLayout\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useEffect, useState } from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport { connect } from \"react-redux\";\nimport { handleItemFormSubmit, handleDelete } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getStartEndDatesForPeriod, getTransactionsFilterOptions } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { printReceipt } from \"../assets/PrintingHelper\";\nimport PaymentEditForm from \"../components/payments/PaymentEditForm\";\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions();\nconst headCells = [{\n  id: \"payment_date\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Payment Date\"\n}, {\n  id: \"payment_label\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Payment Type\"\n}, {\n  id: \"unit_ref\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Unit Number/Ref\"\n}, {\n  id: \"tenant_name\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Tenant Name\"\n}, {\n  id: \"tenant_id_number\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Tenant ID\"\n}, {\n  id: \"payment_amount\",\n  numeric: true,\n  disablePadding: true,\n  label: \"Payment Amount\"\n}, {\n  id: \"reference_id\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Reference Id\"\n}, {\n  id: \"edit\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Edit\"\n}, {\n  id: \"delete\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Delete\"\n}];\n\nlet PaymentsPage = ({\n  rentalPayments,\n  contacts,\n  properties,\n  handleItemSubmit,\n  handleItemDelete\n}) => {\n  const classes = commonStyles();\n  let [paymentsItems, setPaymentsItems] = useState([]);\n  const [filteredPaymentsItems, setFilteredPaymentsItems] = useState([]);\n  const [propertyFilter, setPropertyFilter] = useState(\"all\");\n  const [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n  const [fromDateFilter, setFromDateFilter] = useState(\"\");\n  const [toDateFilter, setToDateFilter] = useState(\"\");\n  const [contactFilter, setContactFilter] = useState(null);\n  const [editPaymentModalState, setEditPaymentModalState] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [paymentToEditId, setPaymentToEditId] = useState();\n  useEffect(() => {\n    setPaymentsItems(rentalPayments);\n    setFilteredPaymentsItems(filterPaymentsByCriteria(rentalPayments));\n  }, [rentalPayments]);\n\n  const filterPaymentsByCriteria = paymentsToFilter => {\n    //filter the payments according to the search criteria here\n    let filteredPayments = paymentsToFilter;\n\n    if (periodFilter) {\n      const {\n        startDate,\n        endDate\n      } = getStartEndDatesForPeriod(periodFilter);\n      filteredPayments = filteredPayments.filter(paymentItem => {\n        const paymentDate = parse(paymentItem.payment_date, 'yyyy-MM-dd', new Date());\n        return isWithinInterval(paymentDate, {\n          start: startDate,\n          end: endDate\n        });\n      });\n    }\n\n    filteredPayments = filteredPayments.filter(({\n      payment_date,\n      tenant_id,\n      property_id\n    }) => (!fromDateFilter ? true : payment_date >= fromDateFilter) && (!toDateFilter ? true : payment_date <= toDateFilter) && (propertyFilter === \"all\" ? true : property_id === propertyFilter) && (!contactFilter ? true : tenant_id === contactFilter.id));\n    return filteredPayments;\n  };\n\n  const toggleEditPaymentModalState = () => {\n    setEditPaymentModalState(!editPaymentModalState);\n  };\n\n  const handleSearchFormSubmit = event => {\n    event.preventDefault();\n    setFilteredPaymentsItems(filterPaymentsByCriteria(paymentsItems));\n  };\n\n  const handlePaymentDelete = async (paymentId, url) => {\n    const paymentToDelete = paymentsItems.find(({\n      id\n    }) => id === paymentId) || {};\n    const paymentForSameCharge = paymentsItems.find(({\n      id,\n      charge_id\n    }) => charge_id === paymentToDelete.charge_id && id !== paymentToDelete.id);\n\n    if (!paymentForSameCharge) {\n      await handleItemSubmit({\n        id: paymentToDelete.charge_id,\n        payed: false\n      }, 'transactions-charges');\n    }\n\n    await handleItemDelete(paymentId, url);\n  };\n\n  const resetSearchForm = event => {\n    event.preventDefault();\n    setPropertyFilter(\"all\");\n    setPeriodFilter(\"month-to-date\");\n    setFromDateFilter(\"\");\n    setToDateFilter(\"\");\n    setContactFilter(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageTitle: \"Payments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PageHeading, {\n    text: 'Payments',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PrintArrayToPdf, {\n    disabled: !selected.length,\n    reportName: 'Rental Payments Records',\n    reportTitle: 'Rental Payments Data',\n    headCells: headCells,\n    dataToPrint: filteredPaymentsItems.filter(({\n      id\n    }) => selected.includes(id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    \"aria-label\": \"Print Receipt\",\n    variant: \"contained\",\n    size: \"medium\",\n    color: \"primary\",\n    disabled: !contactFilter || !selected.length,\n    onClick: () => {\n      const tenantDetails = contacts.find(({\n        id\n      }) => id === contactFilter.id);\n      printReceipt(tenantDetails, filteredPaymentsItems.filter(({\n        id\n      }) => selected.includes(id)));\n    },\n    startIcon: /*#__PURE__*/React.createElement(PrintIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 36\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, \"Print Receipt\"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExportToExcelBtn, {\n    disabled: !selected.length,\n    reportName: 'Rental Payments Records',\n    reportTitle: 'Rental Payments Data',\n    headCells: headCells,\n    dataToPrint: filteredPaymentsItems.filter(({\n      id\n    }) => selected.includes(id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"paymentsSearchForm\",\n    onSubmit: handleSearchFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    md: 6,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    type: \"date\",\n    id: \"from_date_filter\",\n    name: \"from_date_filter\",\n    label: \"From Date\",\n    value: fromDateFilter,\n    onChange: event => {\n      setFromDateFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    type: \"date\",\n    name: \"to_date_filter\",\n    label: \"To Date\",\n    id: \"to_date_filter\",\n    onChange: event => {\n      setToDateFilter(event.target.value);\n    },\n    value: toDateFilter,\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 49\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    select: true,\n    id: \"period_filter\",\n    name: \"period_filter\",\n    label: \"Period\",\n    value: periodFilter,\n    onChange: event => {\n      setPeriodFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 45\n    }\n  }, TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: filterOption.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 53\n    }\n  }, filterOption.text))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_filter\",\n    label: \"Property\",\n    id: \"property_filter\",\n    onChange: event => {\n      setPropertyFilter(event.target.value);\n    },\n    value: propertyFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"all\",\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 49\n    }\n  }, \"All\"), properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 57\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"contact_filter\",\n    options: contacts,\n    getOptionSelected: (option, value) => option.id === value.id,\n    name: \"contact_filter\",\n    onChange: (event, newValue) => {\n      setContactFilter(newValue);\n    },\n    value: contactFilter,\n    getOptionLabel: tenant => tenant ? `${tenant.first_name} ${tenant.last_name}` : '',\n    style: {\n      width: \"100%\"\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Tenant\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 74\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 45\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    form: \"paymentsSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 41\n    }\n  }, \"SEARCH\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => resetSearchForm(event),\n    type: \"reset\",\n    form: \"paymentsSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(UndoIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 41\n    }\n  }, \"RESET\"))))))), editPaymentModalState ? /*#__PURE__*/React.createElement(PaymentEditForm, {\n    open: editPaymentModalState,\n    paymentToEdit: paymentsItems.find(({\n      id\n    }) => id === paymentToEditId),\n    handleClose: toggleEditPaymentModalState,\n    handleItemSubmit: handleItemSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 25\n    }\n  }) : null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CommonTable, {\n    selected: selected,\n    setSelected: setSelected,\n    rows: filteredPaymentsItems,\n    headCells: headCells,\n    handleDelete: handlePaymentDelete,\n    optionalEditHandler: selectedRowIndex => {\n      setPaymentToEditId(selectedRowIndex);\n      toggleEditPaymentModalState();\n    },\n    deleteUrl: \"sales\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    rentalPayments: state.rentalPayments.map(payment => {\n      const tenant = state.contacts.find(contact => contact.id === payment.tenant_id) || {};\n      const tenantUnit = state.propertyUnits.find(({\n        id\n      }) => id === payment.unit_id) || {};\n      return Object.assign({}, payment, {\n        tenant_name: `${tenant.first_name} ${tenant.last_name}`,\n        tenant_id_number: tenant.id_number,\n        unit_ref: tenantUnit.ref\n      });\n    }).sort((payment1, payment2) => parse(payment2.payment_date, 'yyyy-MM-dd', new Date()) - parse(payment1.payment_date, 'yyyy-MM-dd', new Date())),\n    properties: state.properties,\n    contacts: state.contacts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n    handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url))\n  };\n};\n\nPaymentsPage = connect(mapStateToProps, mapDispatchToProps)(PaymentsPage);\nexport default withRouter(PaymentsPage);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/Payments.js"],"names":["Layout","Grid","PageHeading","React","useEffect","useState","MenuItem","Button","TextField","Box","SearchIcon","UndoIcon","PrintIcon","ExportToExcelBtn","connect","handleItemFormSubmit","handleDelete","CommonTable","withRouter","commonStyles","PrintArrayToPdf","getStartEndDatesForPeriod","getTransactionsFilterOptions","parse","isWithinInterval","Autocomplete","printReceipt","PaymentEditForm","TRANSACTIONS_FILTER_OPTIONS","headCells","id","numeric","disablePadding","label","PaymentsPage","rentalPayments","contacts","properties","handleItemSubmit","handleItemDelete","classes","paymentsItems","setPaymentsItems","filteredPaymentsItems","setFilteredPaymentsItems","propertyFilter","setPropertyFilter","periodFilter","setPeriodFilter","fromDateFilter","setFromDateFilter","toDateFilter","setToDateFilter","contactFilter","setContactFilter","editPaymentModalState","setEditPaymentModalState","selected","setSelected","paymentToEditId","setPaymentToEditId","filterPaymentsByCriteria","paymentsToFilter","filteredPayments","startDate","endDate","filter","paymentItem","paymentDate","payment_date","Date","start","end","tenant_id","property_id","toggleEditPaymentModalState","handleSearchFormSubmit","event","preventDefault","handlePaymentDelete","paymentId","url","paymentToDelete","find","paymentForSameCharge","charge_id","payed","resetSearchForm","length","includes","tenantDetails","form","target","value","shrink","map","filterOption","index","text","property","ref","option","newValue","tenant","first_name","last_name","width","params","selectedRowIndex","mapStateToProps","state","payment","contact","tenantUnit","propertyUnits","unit_id","Object","assign","tenant_name","tenant_id_number","id_number","unit_ref","sort","payment1","payment2","mapDispatchToProps","dispatch","item","itemId"],"mappings":"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","sourcesContent":["import Layout from \"../components/PrivateLayout\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useEffect, useState } from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport { connect } from \"react-redux\";\nimport { handleItemFormSubmit, handleDelete } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getStartEndDatesForPeriod, getTransactionsFilterOptions } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { printReceipt } from \"../assets/PrintingHelper\";\nimport PaymentEditForm from \"../components/payments/PaymentEditForm\";\n\n\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\n\nconst headCells = [\n    { id: \"payment_date\", numeric: false, disablePadding: true, label: \"Payment Date\" },\n    { id: \"payment_label\", numeric: false, disablePadding: true, label: \"Payment Type\" },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit Number/Ref\" },\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant Name\" },\n    { id: \"tenant_id_number\", numeric: false, disablePadding: true, label: \"Tenant ID\" },\n    { id: \"payment_amount\", numeric: true, disablePadding: true, label: \"Payment Amount\" },\n    { id: \"reference_id\", numeric: false, disablePadding: true, label: \"Reference Id\" },\n    { id: \"edit\", numeric: false, disablePadding: true, label: \"Edit\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n];\n\n\nlet PaymentsPage = ({\n    rentalPayments,\n    contacts,\n    properties,\n    handleItemSubmit,\n    handleItemDelete,\n}) => {\n    const classes = commonStyles();\n    let [paymentsItems, setPaymentsItems] = useState([]);\n    const [filteredPaymentsItems, setFilteredPaymentsItems] = useState([]);\n    const [propertyFilter, setPropertyFilter] = useState(\"all\");\n    const [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n    const [fromDateFilter, setFromDateFilter] = useState(\"\");\n    const [toDateFilter, setToDateFilter] = useState(\"\");\n    const [contactFilter, setContactFilter] = useState(null);\n    const [editPaymentModalState, setEditPaymentModalState] = useState(false);\n\n    const [selected, setSelected] = useState([]);\n    const [paymentToEditId, setPaymentToEditId] = useState();\n\n    useEffect(() => {\n        setPaymentsItems(rentalPayments);\n        setFilteredPaymentsItems(filterPaymentsByCriteria(rentalPayments));\n    }, [rentalPayments]);\n\n    const filterPaymentsByCriteria = (paymentsToFilter) => {\n        //filter the payments according to the search criteria here\n        let filteredPayments = paymentsToFilter\n        if (periodFilter) {\n            const { startDate, endDate } = getStartEndDatesForPeriod(periodFilter)\n            filteredPayments = filteredPayments.filter((paymentItem) => {\n                const paymentDate = parse(paymentItem.payment_date, 'yyyy-MM-dd', new Date())\n                return isWithinInterval(paymentDate, { start: startDate, end: endDate })\n            })\n        }\n        filteredPayments = filteredPayments\n            .filter(({ payment_date, tenant_id, property_id }) =>\n                (!fromDateFilter ? true : payment_date >= fromDateFilter)\n                && (!toDateFilter ? true : payment_date <= toDateFilter)\n                && (propertyFilter === \"all\" ? true : property_id === propertyFilter)\n                && (!contactFilter ? true : tenant_id === contactFilter.id)\n            )\n        return filteredPayments;\n    }\n\n    const toggleEditPaymentModalState = () => {\n        setEditPaymentModalState(!editPaymentModalState)\n    }\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        setFilteredPaymentsItems(filterPaymentsByCriteria(paymentsItems));\n    }\n\n    const handlePaymentDelete = async (paymentId, url) => {\n        const paymentToDelete = paymentsItems.find(({ id }) => id === paymentId) || {}\n        const paymentForSameCharge = paymentsItems\n            .find(({ id, charge_id }) => charge_id === paymentToDelete.charge_id && id !== paymentToDelete.id)\n        if (!paymentForSameCharge) {\n            await handleItemSubmit({ id: paymentToDelete.charge_id, payed: false }, 'transactions-charges')\n        }\n        await handleItemDelete(paymentId, url)\n    }\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setPropertyFilter(\"all\");\n        setPeriodFilter(\"month-to-date\");\n        setFromDateFilter(\"\");\n        setToDateFilter(\"\");\n        setContactFilter(\"\");\n    };\n\n    return (\n        <Layout pageTitle=\"Payments\">\n            <Grid\n                container\n                spacing={3}\n                alignItems=\"center\"\n            >\n                <Grid item key={2}>\n                    <PageHeading text={'Payments'} />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n\n                    <Grid item>\n                        <PrintArrayToPdf\n                            disabled={!selected.length}\n                            reportName={'Rental Payments Records'}\n                            reportTitle={'Rental Payments Data'}\n                            headCells={headCells}\n                            dataToPrint={filteredPaymentsItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Button\n                        aria-label=\"Print Receipt\"\n                        variant=\"contained\"\n                        size=\"medium\"\n                        color=\"primary\"\n                        disabled={!contactFilter || !selected.length}\n                        onClick={() => {\n                            const tenantDetails = contacts.find(({ id }) => id === contactFilter.id)\n                            printReceipt(\n                                tenantDetails,\n                                filteredPaymentsItems.filter(({ id }) => selected.includes(id))\n                            )\n                        }}\n                        startIcon={<PrintIcon />}>\n                        Print Receipt\n                    </Button>\n                    <Grid item>\n                        <ExportToExcelBtn\n                            disabled={!selected.length}\n                            reportName={'Rental Payments Records'}\n                            reportTitle={'Rental Payments Data'}\n                            headCells={headCells}\n                            dataToPrint={filteredPaymentsItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"paymentsSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                            >\n                                <Grid item container spacing={2}>\n                                    <Grid item container direction=\"row\" spacing={2}>\n                                        <Grid item container xs={12} md={6} direction=\"row\" spacing={2}>\n                                            <Grid item xs={12} md={6}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    type=\"date\"\n                                                    id=\"from_date_filter\"\n                                                    name=\"from_date_filter\"\n                                                    label=\"From Date\"\n                                                    value={fromDateFilter}\n                                                    onChange={(event) => {\n                                                        setFromDateFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    InputLabelProps={{ shrink: true }}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    type=\"date\"\n                                                    name=\"to_date_filter\"\n                                                    label=\"To Date\"\n                                                    id=\"to_date_filter\"\n                                                    onChange={(event) => {\n                                                        setToDateFilter(event.target.value);\n                                                    }}\n                                                    value={toDateFilter}\n                                                    InputLabelProps={{ shrink: true }}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                select\n                                                id=\"period_filter\"\n                                                name=\"period_filter\"\n                                                label=\"Period\"\n                                                value={periodFilter}\n                                                onChange={(event) => {\n                                                    setPeriodFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                InputLabelProps={{ shrink: true }}\n                                            >\n                                                {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={filterOption.id}\n                                                    >\n                                                        {filterOption.text}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item container direction=\"row\" spacing={2}>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                select\n                                                variant=\"outlined\"\n                                                name=\"property_filter\"\n                                                label=\"Property\"\n                                                id=\"property_filter\"\n                                                onChange={(event) => {\n                                                    setPropertyFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                value={propertyFilter}\n                                            >\n                                                <MenuItem key={\"all\"} value={\"all\"}>All</MenuItem>\n                                                {properties.map(\n                                                    (property, index) => (\n                                                        <MenuItem\n                                                            key={index}\n                                                            value={property.id}\n                                                        >\n                                                            {property.ref}\n                                                        </MenuItem>\n                                                    )\n                                                )}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <Autocomplete\n                                                id=\"contact_filter\"\n                                                options={contacts}\n                                                getOptionSelected={(option, value) => option.id === value.id}\n                                                name=\"contact_filter\"\n                                                onChange={(event, newValue) => {\n                                                    setContactFilter(newValue);\n                                                }}\n                                                value={contactFilter}\n                                                getOptionLabel={(tenant) => tenant ? `${tenant.first_name} ${tenant.last_name}` : ''}\n                                                style={{ width: \"100%\" }}\n                                                renderInput={(params) => <TextField {...params} label=\"Tenant\" variant=\"outlined\" />}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    item\n                                    justify=\"flex-end\"\n                                    alignItems=\"center\"\n                                    direction=\"row\"\n                                    key={1}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            type=\"submit\"\n                                            form=\"paymentsSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SearchIcon />}\n                                        >\n                                            SEARCH\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) => resetSearchForm(event)}\n                                            type=\"reset\"\n                                            form=\"paymentsSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<UndoIcon />}\n                                        >\n                                            RESET\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n                {\n                    editPaymentModalState ?\n                        <PaymentEditForm open={editPaymentModalState}\n                            paymentToEdit={paymentsItems.find(({ id }) => id === paymentToEditId)}\n                            handleClose={toggleEditPaymentModalState}\n                            handleItemSubmit={handleItemSubmit} /> : null\n                }\n                <Grid item xs={12}>\n                    <CommonTable\n                        selected={selected}\n                        setSelected={setSelected}\n                        rows={filteredPaymentsItems}\n                        headCells={headCells}\n                        handleDelete={handlePaymentDelete}\n                        optionalEditHandler={(selectedRowIndex) => { setPaymentToEditId(selectedRowIndex); toggleEditPaymentModalState() }}\n                        deleteUrl={\"sales\"}\n                    />\n                </Grid>\n\n            </Grid>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        rentalPayments: state.rentalPayments\n            .map((payment) => {\n                const tenant = state.contacts.find((contact) => contact.id === payment.tenant_id) || {};\n                const tenantUnit = state.propertyUnits.find(({ id }) => id === payment.unit_id) || {};\n\n                return Object.assign({}, payment, {\n                    tenant_name: `${tenant.first_name} ${tenant.last_name}`,\n                    tenant_id_number: tenant.id_number,\n                    unit_ref: tenantUnit.ref\n                })\n            })\n            .sort((payment1, payment2) => parse(payment2.payment_date, 'yyyy-MM-dd', new Date()) -\n                parse(payment1.payment_date, 'yyyy-MM-dd', new Date())),\n        properties: state.properties,\n        contacts: state.contacts,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n        handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url)),\n    };\n};\n\nPaymentsPage = connect(mapStateToProps, mapDispatchToProps)(PaymentsPage);\n\nexport default withRouter(PaymentsPage);\n"]},"metadata":{},"sourceType":"module"}