{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/MeterReadings.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Grid, TextField, Button, MenuItem, Box } from \"@material-ui/core\";\nimport { handleDelete, itemsFetchData } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport { connect } from \"react-redux\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getStartEndDatesForPeriod, getTransactionsFilterOptions } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions();\nconst meterReadingsTableHeadCells = [{\n  id: \"reading_date\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Date Recorded\"\n}, {\n  id: \"unit_ref\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Unit Number/Ref\"\n}, {\n  id: \"tenant_name\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Tenant Name\"\n}, {\n  id: \"tenant_id_number\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Tenant Id Number\"\n}, {\n  id: \"meter_type\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Meter Type\"\n}, {\n  id: \"prior_value\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Prior Value\"\n}, {\n  id: \"current_value\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Curent Value\"\n}, {\n  id: \"usage\",\n  numeric: true,\n  disablePadding: true,\n  label: \"Usage\"\n}, {\n  id: \"base_charge\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Base Charge\"\n}, {\n  id: \"unit_charge\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Unit Charge\"\n}, {\n  id: \"amount\",\n  numeric: true,\n  disablePadding: true,\n  label: \"Amount(Ksh)\"\n}, {\n  id: \"edit\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Edit\"\n}, {\n  id: \"delete\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Delete\"\n}];\n\nlet MeterReadingsPage = ({\n  fetchData,\n  meterReadings,\n  handleItemDelete,\n  properties,\n  match\n}) => {\n  const classes = commonStyles();\n  let [meterReadingItems, setMeterReadingItems] = useState([]);\n  let [filteredMeterReadingItems, setFilteredMeterReadingItems] = useState([]);\n  let [fromDateFilter, setFromDateFilter] = useState(\"\");\n  let [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n  let [toDateFilter, setToDateFilter] = useState(\"\");\n  let [meterTypeFilter, setMeterTypeFilter] = useState(\"\");\n  let [propertyFilter, setPropertyFilter] = useState(\"all\");\n  const [selected, setSelected] = useState([]);\n  const METER_TYPE_OPTIONS = Array.from(new Set(meterReadingItems.map(meterReading => meterReading.meter_type)));\n  useEffect(() => {\n    fetchData(['meter_readings']);\n  }, [fetchData]);\n  useEffect(() => {\n    setMeterReadingItems(meterReadings);\n    setFilteredMeterReadingItems(filterMeterReadingsByCriteria(meterReadings));\n  }, [meterReadings]);\n\n  const filterMeterReadingsByCriteria = meterReadingsToFilter => {\n    let filteredMeterReadings = meterReadingsToFilter;\n\n    if (periodFilter) {\n      const {\n        startDate,\n        endDate\n      } = getStartEndDatesForPeriod(periodFilter);\n      filteredMeterReadings = filteredMeterReadings.filter(meterReading => {\n        const meterReadingDate = parse(meterReading.reading_date, 'yyyy-MM-dd', new Date());\n        return isWithinInterval(meterReadingDate, {\n          start: startDate,\n          end: endDate\n        });\n      });\n    }\n\n    filteredMeterReadings = filteredMeterReadings.filter(({\n      meter_type,\n      property,\n      reading_date\n    }) => (!fromDateFilter ? true : reading_date >= fromDateFilter) && (!toDateFilter ? true : reading_date <= toDateFilter) && (propertyFilter === \"all\" ? true : property === propertyFilter) && (!meterTypeFilter ? true : meter_type === meterTypeFilter));\n    return filteredMeterReadings;\n  };\n\n  const handleSearchFormSubmit = event => {\n    event.preventDefault(); //filter the meterReadings here according to search criteria\n\n    setFilteredMeterReadingItems(filterMeterReadingsByCriteria(meterReadingItems));\n  };\n\n  const resetSearchForm = event => {\n    event.preventDefault();\n    setFromDateFilter(\"\");\n    setPeriodFilter(\"month-to-date\");\n    setToDateFilter(\"\");\n    setMeterTypeFilter(\"\");\n    setPropertyFilter(\"all\");\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageTitle: \"Units Meter Readings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PageHeading, {\n    text: \"Units Meter Readings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(AddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 40\n      }\n    }),\n    component: Link,\n    to: `${match.url}/new`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  }, \"NEW\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(EditIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 40\n      }\n    }),\n    disabled: !selected.length,\n    component: Link,\n    to: `${match.url}/${selected[0]}/edit`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, \"Edit\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PrintArrayToPdf, {\n    disabled: !selected.length,\n    reportName: 'Meter Readings Records',\n    reportTitle: 'Meter Readings Records',\n    headCells: meterReadingsTableHeadCells,\n    dataToPrint: meterReadingItems.filter(({\n      id\n    }) => selected.includes(id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExportToExcelBtn, {\n    disabled: !selected.length,\n    reportName: 'Meter Readings Records',\n    reportTitle: 'Meter Readings Records',\n    headCells: meterReadingsTableHeadCells,\n    dataToPrint: meterReadingItems.filter(({\n      id\n    }) => selected.includes(id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"contactSearchForm\",\n    onSubmit: handleSearchFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    spacing: 2,\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    xs: 12,\n    md: 6,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    type: \"date\",\n    id: \"from_date_filter\",\n    name: \"from_date_filter\",\n    label: \"From Date\",\n    value: fromDateFilter,\n    onChange: event => {\n      setFromDateFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    type: \"date\",\n    name: \"to_date_filter\",\n    label: \"To Date\",\n    id: \"to_date_filter\",\n    onChange: event => {\n      setToDateFilter(event.target.value);\n    },\n    value: toDateFilter,\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_filter\",\n    label: \"Property\",\n    id: \"property_filter\",\n    onChange: event => {\n      setPropertyFilter(event.target.value);\n    },\n    value: propertyFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"all\",\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 45\n    }\n  }, \"All\"), properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 53\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"meter_type\",\n    label: \"Select Meter Type\",\n    id: \"meter_type\",\n    onChange: event => {\n      setMeterTypeFilter(event.target.value);\n    },\n    value: meterTypeFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 45\n    }\n  }, METER_TYPE_OPTIONS.map((filterOption, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: filterOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 53\n    }\n  }, filterOption)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    select: true,\n    id: \"from_filter\",\n    name: \"from_filter\",\n    label: \"Period\",\n    value: periodFilter,\n    onChange: event => {\n      setPeriodFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 45\n    }\n  }, TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: filterOption.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 53\n    }\n  }, filterOption.text)))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => handleSearchFormSubmit(event),\n    type: \"submit\",\n    form: \"contactSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 41\n    }\n  }, \"SEARCH\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => resetSearchForm(event),\n    type: \"reset\",\n    form: \"propertySearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(UndoIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 41\n    }\n  }, \"RESET\"))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CommonTable, {\n    selected: selected,\n    setSelected: setSelected,\n    rows: filteredMeterReadingItems,\n    headCells: meterReadingsTableHeadCells,\n    handleDelete: handleItemDelete,\n    deleteUrl: \"meter_readings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    meterReadings: state.meterReadings.map(reading => {\n      const tenant = state.contacts.find(contact => contact.id === reading.tenant_id) || {};\n      const unit = state.propertyUnits.find(unit => unit.id === reading.unit_id) || {};\n      return Object.assign({}, reading, {\n        tenant_name: `${tenant.first_name} ${tenant.last_name}`,\n        tenant_id_number: tenant.id_number,\n        unit_ref: unit.ref\n      });\n    }).sort((meterReading1, meterReading2) => parse(meterReading2.reading_date, 'yyyy-MM-dd', new Date()) - parse(meterReading1.reading_date, 'yyyy-MM-dd', new Date())),\n    properties: state.properties,\n    propertyUnits: state.propertyUnits,\n    contacts: state.contacts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchData: collectionsUrls => dispatch(itemsFetchData(collectionsUrls)),\n    handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url))\n  };\n};\n\nMeterReadingsPage = connect(mapStateToProps, mapDispatchToProps)(MeterReadingsPage);\nexport default withRouter(MeterReadingsPage);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/MeterReadings.js"],"names":["React","useEffect","useState","Link","EditIcon","SearchIcon","UndoIcon","AddIcon","Grid","TextField","Button","MenuItem","Box","handleDelete","itemsFetchData","CommonTable","withRouter","commonStyles","connect","ExportToExcelBtn","Layout","PageHeading","PrintArrayToPdf","getStartEndDatesForPeriod","getTransactionsFilterOptions","parse","isWithinInterval","TRANSACTIONS_FILTER_OPTIONS","meterReadingsTableHeadCells","id","numeric","disablePadding","label","MeterReadingsPage","fetchData","meterReadings","handleItemDelete","properties","match","classes","meterReadingItems","setMeterReadingItems","filteredMeterReadingItems","setFilteredMeterReadingItems","fromDateFilter","setFromDateFilter","periodFilter","setPeriodFilter","toDateFilter","setToDateFilter","meterTypeFilter","setMeterTypeFilter","propertyFilter","setPropertyFilter","selected","setSelected","METER_TYPE_OPTIONS","Array","from","Set","map","meterReading","meter_type","filterMeterReadingsByCriteria","meterReadingsToFilter","filteredMeterReadings","startDate","endDate","filter","meterReadingDate","reading_date","Date","start","end","property","handleSearchFormSubmit","event","preventDefault","resetSearchForm","url","length","includes","form","target","value","shrink","index","ref","filterOption","text","mapStateToProps","state","reading","tenant","contacts","find","contact","tenant_id","unit","propertyUnits","unit_id","Object","assign","tenant_name","first_name","last_name","tenant_id_number","id_number","unit_ref","sort","meterReading1","meterReading2","mapDispatchToProps","dispatch","collectionsUrls","itemId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Grid, TextField, Button, MenuItem, Box } from \"@material-ui/core\";\nimport { handleDelete, itemsFetchData } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport { connect } from \"react-redux\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getStartEndDatesForPeriod, getTransactionsFilterOptions } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\n\n\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\n\n\nconst meterReadingsTableHeadCells = [\n    { id: \"reading_date\", numeric: false, disablePadding: true, label: \"Date Recorded\" },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit Number/Ref\" },\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant Name\" },\n    { id: \"tenant_id_number\", numeric: false, disablePadding: true, label: \"Tenant Id Number\" },\n    { id: \"meter_type\", numeric: false, disablePadding: true, label: \"Meter Type\" },\n    { id: \"prior_value\", numeric: false, disablePadding: true, label: \"Prior Value\" },\n    { id: \"current_value\", numeric: false, disablePadding: true, label: \"Curent Value\" },\n    { id: \"usage\", numeric: true, disablePadding: true, label: \"Usage\" },\n    { id: \"base_charge\", numeric: false, disablePadding: true, label: \"Base Charge\" },\n    { id: \"unit_charge\", numeric: false, disablePadding: true, label: \"Unit Charge\" },\n    { id: \"amount\", numeric: true, disablePadding: true, label: \"Amount(Ksh)\" },\n    { id: \"edit\", numeric: false, disablePadding: true, label: \"Edit\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n];\n\nlet MeterReadingsPage = ({\n    fetchData,\n    meterReadings,\n    handleItemDelete,\n    properties,\n    match,\n}) => {\n    const classes = commonStyles();\n    let [meterReadingItems, setMeterReadingItems] = useState([]);\n    let [filteredMeterReadingItems, setFilteredMeterReadingItems] = useState([]);\n    let [fromDateFilter, setFromDateFilter] = useState(\"\");\n    let [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n    let [toDateFilter, setToDateFilter] = useState(\"\");\n    let [meterTypeFilter, setMeterTypeFilter] = useState(\"\");\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    const [selected, setSelected] = useState([]);\n\n    const METER_TYPE_OPTIONS = Array.from(new Set(meterReadingItems.map((meterReading) => meterReading.meter_type)))\n\n    useEffect(() => {\n\t\tfetchData(['meter_readings']);\n\t}, [fetchData]);\n\n    useEffect(() => {\n        setMeterReadingItems(meterReadings);\n        setFilteredMeterReadingItems(filterMeterReadingsByCriteria(meterReadings));\n    }, [meterReadings]);\n\n    const filterMeterReadingsByCriteria = (meterReadingsToFilter) => {\n        let filteredMeterReadings = meterReadingsToFilter\n        if (periodFilter) {\n            const { startDate, endDate } = getStartEndDatesForPeriod(periodFilter)\n            filteredMeterReadings = filteredMeterReadings.filter((meterReading) => {\n                const meterReadingDate = parse(meterReading.reading_date, 'yyyy-MM-dd', new Date())\n                return isWithinInterval(meterReadingDate, { start: startDate, end: endDate })\n            })\n        }\n        filteredMeterReadings = filteredMeterReadings\n            .filter(({ meter_type, property, reading_date }) =>\n                (!fromDateFilter ? true : reading_date >= fromDateFilter)\n                && (!toDateFilter ? true : reading_date <= toDateFilter)\n                && (propertyFilter === \"all\" ? true : property === propertyFilter)\n                && (!meterTypeFilter ? true : meter_type === meterTypeFilter)\n            )\n        return filteredMeterReadings;\n    }\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the meterReadings here according to search criteria\n        setFilteredMeterReadingItems(filterMeterReadingsByCriteria(meterReadingItems));\n    };\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setFromDateFilter(\"\");\n        setPeriodFilter(\"month-to-date\");\n        setToDateFilter(\"\");\n        setMeterTypeFilter(\"\");\n        setPropertyFilter(\"all\");\n    };\n\n    return (\n        <Layout pageTitle=\"Units Meter Readings\">\n            <Grid\n                container\n                spacing={3}\n                alignItems=\"center\"\n            >\n                <Grid item lg={12}>\n                    <PageHeading text=\"Units Meter Readings\" />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<AddIcon />}\n                            component={Link}\n                            to={`${match.url}/new`}\n                        >\n                            NEW\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<EditIcon />}\n                            disabled={!selected.length}\n                            component={Link}\n                            to={`${match.url}/${selected[0]}/edit`}\n                        >\n                            Edit\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <PrintArrayToPdf\n                            disabled={!selected.length}\n                            reportName={'Meter Readings Records'}\n                            reportTitle={'Meter Readings Records'}\n                            headCells={meterReadingsTableHeadCells}\n                            dataToPrint={meterReadingItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ExportToExcelBtn\n                            disabled={!selected.length}\n                            reportName={'Meter Readings Records'}\n                            reportTitle={'Meter Readings Records'}\n                            headCells={meterReadingsTableHeadCells}\n                            dataToPrint={meterReadingItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"contactSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                                direction=\"column\"\n                            >\n                                <Grid\n                                    container\n                                    item\n                                    spacing={2}\n                                    justify=\"center\"\n                                    direction=\"row\"\n                                >\n                                    <Grid item container direction=\"row\" xs={12} md={6} spacing={2}>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"date\"\n                                                id=\"from_date_filter\"\n                                                name=\"from_date_filter\"\n                                                label=\"From Date\"\n                                                value={fromDateFilter}\n                                                onChange={(event) => {\n                                                    setFromDateFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                InputLabelProps={{ shrink: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"date\"\n                                                name=\"to_date_filter\"\n                                                label=\"To Date\"\n                                                id=\"to_date_filter\"\n                                                onChange={(event) => {\n                                                    setToDateFilter(event.target.value);\n                                                }}\n                                                value={toDateFilter}\n                                                InputLabelProps={{ shrink: true }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            variant=\"outlined\"\n                                            name=\"property_filter\"\n                                            label=\"Property\"\n                                            id=\"property_filter\"\n                                            onChange={(event) => {\n                                                setPropertyFilter(\n                                                    event.target.value\n                                                );\n                                            }}\n                                            value={propertyFilter}\n                                        >\n                                            <MenuItem key={\"all\"} value={\"all\"}>All</MenuItem>\n                                            {properties.map(\n                                                (property, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={property.id}\n                                                    >\n                                                        {property.ref}\n                                                    </MenuItem>\n                                                )\n                                            )}\n                                        </TextField>\n                                    </Grid>\n                                    <Grid item container direction=\"row\" spacing={2}>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                select\n                                                variant=\"outlined\"\n                                                name=\"meter_type\"\n                                                label=\"Select Meter Type\"\n                                                id=\"meter_type\"\n                                                onChange={(event) => {\n                                                    setMeterTypeFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                value={meterTypeFilter}\n                                            >\n                                                {METER_TYPE_OPTIONS.map((filterOption, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={filterOption}\n                                                    >\n                                                        {filterOption}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                select\n                                                id=\"from_filter\"\n                                                name=\"from_filter\"\n                                                label=\"Period\"\n                                                value={periodFilter}\n                                                onChange={(event) => {\n                                                    setPeriodFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                InputLabelProps={{ shrink: true }}>\n                                                {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={filterOption.id}\n                                                    >\n                                                        {filterOption.text}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    item\n                                    justify=\"flex-end\"\n                                    alignItems=\"center\"\n                                    direction=\"row\"\n                                    key={1}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) => handleSearchFormSubmit(event)}\n                                            type=\"submit\"\n                                            form=\"contactSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SearchIcon />}\n                                        >\n                                            SEARCH\n                                    </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) =>\n                                                resetSearchForm(event)\n                                            }\n                                            type=\"reset\"\n                                            form=\"propertySearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<UndoIcon />}\n                                        >\n                                            RESET\n                                    </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n                <Grid item xs={12}>\n                    <CommonTable\n                        selected={selected}\n                        setSelected={setSelected}\n                        rows={filteredMeterReadingItems}\n                        headCells={meterReadingsTableHeadCells}\n                        handleDelete={handleItemDelete}\n                        deleteUrl={\"meter_readings\"}\n                    />\n                </Grid>\n            </Grid>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        meterReadings: state.meterReadings\n            .map(reading => {\n                const tenant = state.contacts.find((contact) => contact.id === reading.tenant_id) || {};\n                const unit = state.propertyUnits.find((unit) => unit.id === reading.unit_id) || {};\n                return Object.assign({}, reading, {\n                    tenant_name: `${tenant.first_name} ${tenant.last_name}`,\n                    tenant_id_number: tenant.id_number,\n                    unit_ref: unit.ref,\n                })\n            })\n            .sort((meterReading1, meterReading2) => parse(meterReading2.reading_date, 'yyyy-MM-dd', new Date()) -\n                parse(meterReading1.reading_date, 'yyyy-MM-dd', new Date())),\n        properties: state.properties,\n        propertyUnits: state.propertyUnits,\n        contacts: state.contacts,\n    };\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchData: (collectionsUrls) => dispatch(itemsFetchData(collectionsUrls)),\n        handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url)),\n    };\n};\n\nMeterReadingsPage = connect(mapStateToProps, mapDispatchToProps)(MeterReadingsPage);\n\nexport default withRouter(MeterReadingsPage);\n"]},"metadata":{},"sourceType":"module"}