{"ast":null,"code":"import { endOfMonth, endOfYear, startOfToday, eachMonthOfInterval, startOfMonth, startOfYear, subMonths, subYears, addMonths, getMonth } from \"date-fns\";\nconst monthsInYear = eachMonthOfInterval({\n  start: startOfYear(startOfToday()),\n  end: endOfYear(startOfToday())\n}); //general contact titles\n\nconst TITLES_LIST = [\"Mr\", \"Sir\", \"Mrs\", \"Miss\", \"Madam\", \"Other\"];\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\nconst EXPENSES_CATEGORIES = [{\n  id: \"security_deposit_refund\",\n  displayValue: \"Security Deposit Refund\"\n}, {\n  id: \"water_deposit_refund\",\n  displayValue: \"Water Deposit Refund\"\n}, {\n  id: \"management_fees\",\n  displayValue: \"Management Fees\"\n}, {\n  id: \"electricity\",\n  displayValue: \"Electricity\"\n}, {\n  id: \"water\",\n  displayValue: \"Water\"\n}, {\n  id: \"sewer\",\n  displayValue: \"Sewer\"\n}, {\n  id: \"Repairs\",\n  displayValue: \"Repairs\"\n}, {\n  id: \"taxes\",\n  displayValue: \"Taxes\"\n}, {\n  id: \"salaries\",\n  displayValue: \"Salaries\"\n}, {\n  id: \"maintenance_cleaning\",\n  displayValue: \"Maintenance & Cleaning\"\n}, {\n  id: \"advertising\",\n  displayValue: \"Advertising\"\n}, {\n  id: \"other_refund\",\n  displayValue: \"Other Refund\"\n}, {\n  id: \"other\",\n  displayValue: \"Other\"\n}];\nconst PROPRERTY_TYPES = [{\n  id: \"residential\",\n  displayValue: \"Residential\"\n}, {\n  id: \"condo_townhouse\",\n  displayValue: \"Condo/Townhouse\"\n}, {\n  id: \"multi_family\",\n  displayValue: \"Multi-family\"\n}, {\n  id: \"single_family\",\n  displayValue: \"Single-family\"\n}];\nconst UNIT_TYPES = [{\n  id: \"bed_sitter\",\n  displayValue: \"Bed Sitter\"\n}, {\n  id: \"one_bedroom\",\n  displayValue: \"One Bedroom\"\n}, {\n  id: \"two_bedroom\",\n  displayValue: \"Two Bedroom\"\n}, {\n  id: \"single_bedroom\",\n  displayValue: \"Single Room\"\n}, {\n  id: \"double_room\",\n  displayValue: \"Double Room\"\n}, {\n  id: \"shop\",\n  displayValue: \"Shop\"\n}, {\n  id: \"other\",\n  displayValue: \"Other\"\n}];\nconst LEASE_OPTIONS = [\"Fixed\", \"Fixed w/rollover\"];\nconst METER_TYPES = [{\n  id: \"electric\",\n  displayValue: \"Electric\"\n}, {\n  id: \"sewer\",\n  displayValue: \"Sewer\"\n}, {\n  id: \"water\",\n  displayValue: \"Water\"\n}];\nconst CHARGE_OPTIONS = [{\n  id: \"rent\",\n  displayValue: \"Rent\"\n}, {\n  id: \"security_deposit\",\n  displayValue: \"Security Deposit\"\n}, {\n  id: \"electric\",\n  displayValue: \"Electric\"\n}, {\n  id: \"sewer\",\n  displayValue: \"Sewer\"\n}, {\n  id: \"water\",\n  displayValue: \"Water\"\n}, {\n  id: \"one_time_charge\",\n  displayValue: \"One Time Charge\"\n}, {\n  id: \"recurring_charge\",\n  displayValue: \"Recurring Charge\"\n}, {\n  id: \"other\",\n  displayValue: \"Other\"\n}];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"]; //functions to get the above values\n\nexport function getContactTitles() {\n  return TITLES_LIST;\n}\nexport function getGendersList() {\n  return GENDERS_LIST;\n}\nexport function getExpensesCategories() {\n  return EXPENSES_CATEGORIES;\n} //general property types\n\nexport function getPropertyTypes() {\n  return PROPRERTY_TYPES;\n} //general unit types\n\nexport function getUnitTypes() {\n  return UNIT_TYPES;\n}\nexport function getPropertyBaths() {\n  const baths = [];\n\n  for (let i = 1; i <= 5; i++) {\n    baths.push(i);\n  }\n\n  return baths.concat('Other');\n}\nexport function getPropertyBeds() {\n  const beds = [];\n\n  for (let i = 1; i <= 5; i++) {\n    beds.push(i);\n  }\n\n  return beds.concat(\"Other\");\n}\nexport function getFrequencyOptions() {\n  return FREQUENCY_OPTIONS;\n}\nexport function getChargeOptions() {\n  return CHARGE_OPTIONS;\n}\nexport function getMeterTypes() {\n  return METER_TYPES;\n}\nexport function getLeaseOptions() {\n  return LEASE_OPTIONS;\n}\nexport function getPaymentOptions() {\n  return PAYMENT_FREQUENCY_OPTIONS;\n}\nexport function getSalesFilterOptions() {\n  return [{\n    id: '',\n    text: 'All'\n  }, {\n    id: 'month-to-date',\n    text: 'Month To Date'\n  }, {\n    id: 'last-month',\n    text: 'Last Month'\n  }, {\n    id: '3-months-to-date',\n    text: '3 Months To Date'\n  }, {\n    id: '6-months-to-date',\n    text: '6 Months To Date'\n  }, {\n    id: 'year-to-date',\n    text: 'Year To Date'\n  }, {\n    id: 'last-year',\n    text: 'Last Year'\n  }];\n}\nexport function getLastMonthFromToDates() {\n  return [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))];\n}\nexport function getLastYearFromToDates() {\n  return [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))];\n}\nexport function getYearToDateFromToDates() {\n  return [startOfYear(startOfToday()), startOfToday()];\n}\nexport function getCurrentMonthFromToDates() {\n  return [startOfMonth(startOfToday()), endOfMonth(startOfToday())];\n}\nexport function getLastThreeMonthsFromToDates() {\n  return [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())];\n}\nexport function getLastSixMonthsFromToDates() {\n  return [startOfMonth(subMonths(startOfToday(), 5)), endOfMonth(startOfToday())];\n}\nexport function getMonthsInYear() {\n  return monthsInYear;\n} // Create our number formatter.\n\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n  style: 'decimal',\n  currency: 'KES'\n});\nexport function getStartEndDatesForPeriod(periodFilter) {\n  let startOfPeriod;\n  let endOfPeriod;\n  let dateRange;\n\n  switch (periodFilter) {\n    case 'last-month':\n      dateRange = getLastMonthFromToDates();\n      startOfPeriod = dateRange[0];\n      endOfPeriod = dateRange[1];\n      break;\n\n    case 'year-to-date':\n      dateRange = getYearToDateFromToDates();\n      startOfPeriod = dateRange[0];\n      endOfPeriod = dateRange[1];\n      break;\n\n    case 'last-year':\n      dateRange = getLastYearFromToDates();\n      startOfPeriod = dateRange[0];\n      endOfPeriod = dateRange[1];\n      break;\n\n    case 'month-to-date':\n      dateRange = getCurrentMonthFromToDates();\n      startOfPeriod = dateRange[0];\n      endOfPeriod = dateRange[1];\n      break;\n\n    case '3-months-to-date':\n      dateRange = getLastThreeMonthsFromToDates();\n      startOfPeriod = dateRange[0];\n      endOfPeriod = dateRange[1];\n      break;\n\n    case '6-months-to-date':\n      dateRange = getLastSixMonthsFromToDates();\n      startOfPeriod = dateRange[0];\n      endOfPeriod = dateRange[1];\n      break;\n\n    default:\n      //it is my hope that by this time we shall moved on to better things\n      startOfPeriod = startOfYear(2010);\n      endOfPeriod = endOfYear(new Date());\n  }\n\n  return {\n    startDate: startOfPeriod,\n    endDate: endOfPeriod\n  };\n}\nexport function getMonthlyDatesFromPeriod(period) {\n  let eachPastMonthDate;\n\n  switch (period) {\n    case 'last-month':\n      eachPastMonthDate = [getLastMonthFromToDates()[0]];\n      break;\n\n    case 'year-to-date':\n      eachPastMonthDate = [...Array(getMonth(startOfToday()) + 1).keys()].map(value => addMonths(getYearToDateFromToDates()[0], value));\n      break;\n\n    case 'last-year':\n      eachPastMonthDate = [...Array(12).keys()].map(value => addMonths(getLastYearFromToDates()[0], value));\n      break;\n\n    case 'month-to-date':\n      eachPastMonthDate = [...Array(1).keys()].reverse().map(value => subMonths(startOfToday(), value));\n      break;\n\n    case '3-months-to-date':\n      eachPastMonthDate = [...Array(3).keys()].reverse().map(value => subMonths(startOfToday(), value));\n      break;\n\n    case '6-months-to-date':\n      eachPastMonthDate = [...Array(6).keys()].reverse().map(value => subMonths(startOfToday(), value));\n      break;\n\n    default:\n      eachPastMonthDate = [getLastMonthFromToDates()[0]];\n  }\n\n  return eachPastMonthDate;\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/assets/commonAssets.js"],"names":["endOfMonth","endOfYear","startOfToday","eachMonthOfInterval","startOfMonth","startOfYear","subMonths","subYears","addMonths","getMonth","monthsInYear","start","end","TITLES_LIST","GENDERS_LIST","EXPENSES_CATEGORIES","id","displayValue","PROPRERTY_TYPES","UNIT_TYPES","LEASE_OPTIONS","METER_TYPES","CHARGE_OPTIONS","FREQUENCY_OPTIONS","PAYMENT_FREQUENCY_OPTIONS","getContactTitles","getGendersList","getExpensesCategories","getPropertyTypes","getUnitTypes","getPropertyBaths","baths","i","push","concat","getPropertyBeds","beds","getFrequencyOptions","getChargeOptions","getMeterTypes","getLeaseOptions","getPaymentOptions","getSalesFilterOptions","text","getLastMonthFromToDates","getLastYearFromToDates","getYearToDateFromToDates","getCurrentMonthFromToDates","getLastThreeMonthsFromToDates","getLastSixMonthsFromToDates","getMonthsInYear","currencyFormatter","Intl","NumberFormat","undefined","style","currency","getStartEndDatesForPeriod","periodFilter","startOfPeriod","endOfPeriod","dateRange","Date","startDate","endDate","getMonthlyDatesFromPeriod","period","eachPastMonthDate","Array","keys","map","value","reverse"],"mappings":"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","sourcesContent":["import {\n\tendOfMonth, endOfYear, startOfToday, eachMonthOfInterval,\n\tstartOfMonth, startOfYear, subMonths, subYears, addMonths, getMonth\n} from \"date-fns\";\n\nconst monthsInYear = eachMonthOfInterval({\n\tstart: startOfYear(startOfToday()),\n\tend: endOfYear(startOfToday()),\n})\n//general contact titles\nconst TITLES_LIST = [\"Mr\", \"Sir\", \"Mrs\", \"Miss\", \"Madam\", \"Other\"]\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\n\nconst EXPENSES_CATEGORIES = [\n\t{ id: \"security_deposit_refund\", displayValue: \"Security Deposit Refund\" },\n\t{ id: \"water_deposit_refund\", displayValue: \"Water Deposit Refund\" },\n\t{ id: \"management_fees\", displayValue: \"Management Fees\" },\n\t{ id: \"electricity\", displayValue: \"Electricity\" },\n\t{ id: \"water\", displayValue: \"Water\" },\n\t{ id: \"sewer\", displayValue: \"Sewer\" },\n\t{ id: \"Repairs\", displayValue: \"Repairs\" },\n\t{ id: \"taxes\", displayValue: \"Taxes\" },\n\t{ id: \"salaries\", displayValue: \"Salaries\" },\n\t{ id: \"maintenance_cleaning\", displayValue: \"Maintenance & Cleaning\" },\n\t{ id: \"advertising\", displayValue: \"Advertising\" },\n\t{ id: \"other_refund\", displayValue: \"Other Refund\" },\n\t{ id: \"other\", displayValue: \"Other\" },\n]\n\nconst PROPRERTY_TYPES = [\n\t{ id: \"residential\", displayValue: \"Residential\" },\n\t{ id: \"condo_townhouse\", displayValue: \"Condo/Townhouse\" },\n\t{ id: \"multi_family\", displayValue: \"Multi-family\" },\n\t{ id: \"single_family\", displayValue: \"Single-family\" },\n]\n\nconst UNIT_TYPES = [\n\t{ id: \"bed_sitter\", displayValue: \"Bed Sitter\" },\n\t{ id: \"one_bedroom\", displayValue: \"One Bedroom\" },\n\t{ id: \"two_bedroom\", displayValue: \"Two Bedroom\" },\n\t{ id: \"single_bedroom\", displayValue: \"Single Room\" },\n\t{ id: \"double_room\", displayValue: \"Double Room\" },\n\t{ id: \"shop\", displayValue: \"Shop\" },\n\t{ id: \"other\", displayValue: \"Other\" },\n];\n\nconst LEASE_OPTIONS = [\n\t\"Fixed\",\n\t\"Fixed w/rollover\",\n];\nconst METER_TYPES = [\n\t{ id: \"electric\", displayValue: \"Electric\" },\n\t{ id: \"sewer\", displayValue: \"Sewer\" },\n\t{ id: \"water\", displayValue: \"Water\" },\n];\n\nconst CHARGE_OPTIONS = [\n\t{ id: \"rent\", displayValue: \"Rent\" },\n\t{ id: \"security_deposit\", displayValue: \"Security Deposit\" },\n\t{ id: \"electric\", displayValue: \"Electric\" },\n\t{ id: \"sewer\", displayValue: \"Sewer\" },\n\t{ id: \"water\", displayValue: \"Water\" },\n\t{ id: \"one_time_charge\", displayValue: \"One Time Charge\" },\n\t{ id: \"recurring_charge\", displayValue: \"Recurring Charge\" },\n\t{ id: \"other\", displayValue: \"Other\" }\n];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"];\n\n//functions to get the above values\nexport function getContactTitles() {\n\treturn TITLES_LIST;\n}\n\nexport function getGendersList() {\n\treturn GENDERS_LIST;\n}\n\nexport function getExpensesCategories() {\n\treturn EXPENSES_CATEGORIES;\n}\n\n//general property types\nexport function getPropertyTypes() {\n\treturn PROPRERTY_TYPES;\n}\n\n//general unit types\nexport function getUnitTypes() {\n\treturn UNIT_TYPES;\n}\n\nexport function getPropertyBaths() {\n\tconst baths = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbaths.push(i);\n\t}\n\treturn baths.concat('Other');\n}\n\nexport function getPropertyBeds() {\n\tconst beds = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbeds.push(i);\n\t}\n\treturn beds.concat(\"Other\");\n}\n\nexport function getFrequencyOptions() {\n\treturn FREQUENCY_OPTIONS;\n}\n\nexport function getChargeOptions() {\n\treturn CHARGE_OPTIONS;\n}\n\nexport function getMeterTypes() {\n\treturn METER_TYPES;\n}\n\nexport function getLeaseOptions() {\n\treturn LEASE_OPTIONS;\n}\n\nexport function getPaymentOptions() {\n\treturn PAYMENT_FREQUENCY_OPTIONS;\n}\n\nexport function getSalesFilterOptions() {\n\treturn [\n\t\t{ id: '', text: 'All' }, { id: 'month-to-date', text: 'Month To Date' }, { id: 'last-month', text: 'Last Month' },\n\t\t{ id: '3-months-to-date', text: '3 Months To Date' }, { id: '6-months-to-date', text: '6 Months To Date' }, \n\t\t{ id: 'year-to-date', text: 'Year To Date' }, { id: 'last-year', text: 'Last Year' },];\n}\n\nexport function getLastMonthFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))]\n}\n\nexport function getLastYearFromToDates() {\n\treturn [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))]\n}\n\nexport function getYearToDateFromToDates() {\n\treturn [startOfYear(startOfToday()), startOfToday()]\n}\n\nexport function getCurrentMonthFromToDates() {\n\treturn [startOfMonth(startOfToday()), endOfMonth(startOfToday())]\n}\n\nexport function getLastThreeMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())]\n}\n\nexport function getLastSixMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 5)), endOfMonth(startOfToday())]\n}\n\nexport function getMonthsInYear() {\n\treturn monthsInYear\n}\n\n// Create our number formatter.\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n\tstyle: 'decimal',\n\tcurrency: 'KES',\n});\n\nexport function getStartEndDatesForPeriod(periodFilter) {\n\tlet startOfPeriod;\n\tlet endOfPeriod;\n\tlet dateRange;\n\tswitch (periodFilter) {\n\t\tcase 'last-month':\n\t\t\tdateRange = getLastMonthFromToDates()\n\t\t\tstartOfPeriod = dateRange[0]\n\t\t\tendOfPeriod = dateRange[1]\n\t\t\tbreak;\n\t\tcase 'year-to-date':\n\t\t\tdateRange = getYearToDateFromToDates()\n\t\t\tstartOfPeriod = dateRange[0]\n\t\t\tendOfPeriod = dateRange[1]\n\t\t\tbreak;\n\t\tcase 'last-year':\n\t\t\tdateRange = getLastYearFromToDates()\n\t\t\tstartOfPeriod = dateRange[0]\n\t\t\tendOfPeriod = dateRange[1]\n\t\t\tbreak;\n\t\tcase 'month-to-date':\n\t\t\tdateRange = getCurrentMonthFromToDates()\n\t\t\tstartOfPeriod = dateRange[0]\n\t\t\tendOfPeriod = dateRange[1]\n\t\t\tbreak;\n\t\tcase '3-months-to-date':\n\t\t\tdateRange = getLastThreeMonthsFromToDates()\n\t\t\tstartOfPeriod = dateRange[0]\n\t\t\tendOfPeriod = dateRange[1]\n\t\t\tbreak;\n\t\tcase '6-months-to-date':\n\t\t\tdateRange = getLastSixMonthsFromToDates()\n\t\t\tstartOfPeriod = dateRange[0]\n\t\t\tendOfPeriod = dateRange[1]\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t//it is my hope that by this time we shall moved on to better things\n\t\t\tstartOfPeriod = startOfYear(2010)\n\t\t\tendOfPeriod = endOfYear(new Date())\n\t}\n\treturn { startDate: startOfPeriod, endDate: endOfPeriod }\n}\n\nexport function getMonthlyDatesFromPeriod(period) {\n\tlet eachPastMonthDate;\n\tswitch (period) {\n\t\tcase 'last-month':\n\t\t\teachPastMonthDate = [getLastMonthFromToDates()[0]]\n\t\t\tbreak;\n\t\tcase 'year-to-date':\n\t\t\teachPastMonthDate = [...Array((getMonth(startOfToday()) + 1)).keys()].map((value) => addMonths(getYearToDateFromToDates()[0], value))\n\t\t\tbreak;\n\t\tcase 'last-year':\n\t\t\teachPastMonthDate = [...Array(12).keys()].map((value) => addMonths(getLastYearFromToDates()[0], value))\n\t\t\tbreak;\n\t\tcase 'month-to-date':\n\t\t\teachPastMonthDate = [...Array(1).keys()].reverse().map((value) => subMonths(startOfToday(), value))\n\t\t\tbreak;\n\t\tcase '3-months-to-date':\n\t\t\teachPastMonthDate = [...Array(3).keys()].reverse().map((value) => subMonths(startOfToday(), value))\n\t\t\tbreak;\n\t\tcase '6-months-to-date':\n\t\t\teachPastMonthDate = [...Array(6).keys()].reverse().map((value) => subMonths(startOfToday(), value))\n\t\t\tbreak;\n\t\tdefault:\n\t\t\teachPastMonthDate = [getLastMonthFromToDates()[0]]\n\t}\n\treturn eachPastMonthDate;\n}"]},"metadata":{},"sourceType":"module"}