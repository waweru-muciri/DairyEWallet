{"ast":null,"code":"import * as actionTypes from \"../assets/actionTypes\";\nimport * as vacatingNoticesActions from \"./notices\";\nimport * as emailTemplatesActions from \"./emailTemplates\";\nimport * as propertyActions from \"./property\";\nimport * as propertySettingsActions from \"./propertySettings\";\nimport * as propertyUnitChargeActions from \"./propertyUnitCharges\";\nimport * as propertyUnitActions from \"./propertyUnits\";\nimport * as managementFeesActions from \"./managementFees\";\nimport * as contactsActions from \"./contacts\";\nimport * as salesActions from \"./sales\";\nimport * as companyProfileActions from \"./companyProfile\";\nimport * as accountBillingActions from \"./accountBilling\";\nimport * as usersActions from \"./users\";\nimport * as rentalChargesActions from \"./rentalCharges\";\nimport * as communicationEmailsActions from \"./CommunicationEmails\";\nimport * as leaseActions from \"./leases\";\nimport * as toDoActions from \"./to-dos\";\nimport * as expensesActions from \"./expenses\";\nimport * as creditNotesActions from \"./CreditNotes\";\nimport * as productsActions from \"./products\";\nimport * as maintenanceRequestsActions from \"./maintenanceRequests\";\nimport { auth, firebaseStorage, firebaseFunctions } from \"../firebase\";\nimport { getDatabaseRef } from \"./firebaseHelpers\";\nconst firebaseStorageRef = firebaseStorage.ref();\nconst setAdminCustomClaim = firebaseFunctions.httpsCallable('setAdminCustomClaim');\nexport const setDatabaseRefCustomClaim = firebaseFunctions.httpsCallable('setDatabaseRefCustomClaim');\nexport const createFirebaseUser = firebaseFunctions.httpsCallable('createFirebaseUser');\nexport const adminCreateFirebaseUser = firebaseFunctions.httpsCallable('adminCreateFirebaseUser');\nexport const updateFirebaseUser = firebaseFunctions.httpsCallable('updateFirebaseUser');\nexport const deleteFirebaseUsers = firebaseFunctions.httpsCallable('deleteFirebaseUsers');\nexport const sendInvoice = firebaseFunctions.httpsCallable('sendInvoice');\nexport function setCurrentUser(user) {\n  return {\n    type: actionTypes.SET_CURRENT_USER,\n    user\n  };\n}\nconst firebaseGetOptions = {\n  source: 'default'\n};\nexport const firebaseSignOutUser = () => {\n  return dispatch => {\n    auth.signOut().then(function () {}).catch(function (error) {// An error happened.\n    }).finally(() => {\n      dispatch(setCurrentUser(null));\n    });\n  };\n};\nexport const getFirebaseUserDetails = async userToken => {\n  const idTokenResult = await userToken.getIdTokenResult();\n  let isAdmin;\n  let tenantId;\n\n  if (idTokenResult.claims) {\n    isAdmin = idTokenResult.claims.admin;\n    tenantId = idTokenResult.claims.databaseRef;\n  }\n\n  const userDetails = {\n    displayName: userToken.displayName,\n    email: userToken.email,\n    emailVerified: userToken.emailVerified,\n    photoURL: userToken.photoURL,\n    uid: userToken.uid,\n    id: userToken.uid,\n    isAdmin: isAdmin,\n    tenant_id: tenantId\n  };\n  return userDetails;\n};\nexport const resetUserPasswordByEmail = async email => {\n  return await auth.sendPasswordResetEmail(email, {\n    handleCodeInApp: false,\n    url: 'https://rentgatepm.com/account-actions/'\n  });\n};\nexport const signUpWithEmailAndPassword = async userDetails => {\n  try {\n    const returnValue = await createFirebaseUser(userDetails);\n    const createdUser = returnValue.data;\n    await setAdminCustomClaim({\n      userId: createdUser.uid,\n      userProfile: userDetails\n    });\n  } catch (error) {\n    // Handle Errors here.\n    console.log(\"Actions error => \", error.message);\n    throw new Error(error);\n  }\n};\nexport const signInUserWithEmailAndPassword = async (email, password) => {\n  try {\n    const authCredential = await auth.signInWithEmailAndPassword(email, password);\n    const user = authCredential.user;\n    const userDetails = getFirebaseUserDetails(user);\n    return userDetails;\n  } catch (error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = errorCode === \"auth/wrong-password\" ? \"Wrong password.\" : errorCode === \"auth/user-disabled\" ? \"User account disabled\" : errorCode === \"auth/invalid-email\" ? \"Email is Invalid\" : errorCode === \"auth/user-not-found\" ? \"No user found with email\" : \"Failed to connect to resource. Check your internet connection\";\n    throw new Error(errorMessage);\n  }\n};\nexport async function sendEmails(from_user, subject, email, recipients) {\n  var sendEmail = firebaseFunctions.httpsCallable('sendEmail');\n\n  try {\n    await sendEmail({\n      replyTo: from_user,\n      subject: subject,\n      email: email,\n      recipients: recipients\n    }); // Read result of the Cloud Function.\n  } catch (error) {\n    //getting the error details\n    var code = error.code;\n    var message = error.message;\n    var details = error.details;\n    console.error(`There was an error when calling the sendEmails Cloud Function.\\n \n        Error Code => ${code}. Error Message => ${message}. Error Details => ${details}`);\n  }\n}\nexport async function deleteUploadedFileByUrl(fileUrl) {\n  return await firebaseStorage.refFromURL(fileUrl).delete().then(() => console.log('Successfully deleted file')).catch(error => console.log('Error deleting file => ', error));\n}\nexport async function uploadFilesToFirebase(fileToUpload) {\n  var fileRef = firebaseStorageRef.child(`propertyImages/${fileToUpload.name}`);\n\n  try {\n    const snapshot = await fileRef.putString(fileToUpload.data, \"data_url\"); // console.log(\"Uploaded files successfully.\");\n\n    try {\n      const url = await snapshot.ref.getDownloadURL();\n      return url;\n    } catch (error) {\n      switch (error.code) {\n        case \"storage/object-not-found\":\n          console.log(\"File doesn't exist\");\n          break;\n\n        case \"storage/unauthorized\":\n          console.log(\"User doesn't have permission to access the object\");\n          break;\n\n        case \"storage/canceled\":\n          console.log(\"User canceled the upload\");\n          break;\n\n        case \"storage/unknown\":\n          console.log(\"Unknown error occurred, inspect the server response\");\n          break;\n\n        default:\n          console.log('Unknown error');\n      }\n    }\n  } catch (error_1) {\n    console.log(\"Error during file upload => \", error_1);\n    return '';\n  }\n}\nexport function itemsFetchData(collectionsUrls) {\n  return dispatch => {\n    dispatch(itemsIsLoading(true));\n    collectionsUrls.forEach(async url => {\n      try {\n        const snapshot = await getDatabaseRef().collection(url).get(firebaseGetOptions);\n        let fetchedItems = [];\n        snapshot.forEach(doc => {\n          let fetchedObject = Object.assign({}, doc.data(), {\n            id: doc.id\n          });\n          fetchedItems.push(fetchedObject);\n        });\n\n        switch (url) {\n          case \"property-settings\":\n            dispatch(propertySettingsActions.propertySettingsFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"company_profile\":\n            dispatch(companyProfileActions.companyProfilesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"account-billing\":\n            dispatch(accountBillingActions.accountBillingsFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"properties\":\n            dispatch(propertyActions.propertiesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"property_units\":\n            dispatch(propertyUnitActions.propertyUnitsFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"leases\":\n            dispatch(leaseActions.leasesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"unit-charges\":\n            dispatch(propertyUnitChargeActions.propertyUnitChargesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"contacts\":\n            dispatch(contactsActions.contactsFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"transactions-charges\":\n            dispatch(rentalChargesActions.rentalChargesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"sales\":\n            dispatch(salesActions.salesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"to-dos\":\n            dispatch(toDoActions.toDosFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"maintenance-requests\":\n            dispatch(maintenanceRequestsActions.maintenanceRequestsFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"notices\":\n            dispatch(vacatingNoticesActions.noticesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"email-templates\":\n            dispatch(emailTemplatesActions.emailTemplatesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"management-fees\":\n            dispatch(managementFeesActions.managementFeesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"expenses\":\n            dispatch(expensesActions.expensesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"credit-notes\":\n            dispatch(creditNotesActions.creditNotesFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"meter_readings\":\n            dispatch(productsActions.productsFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"users\":\n            dispatch(usersActions.usersFetchDataSuccess(fetchedItems));\n            break;\n\n          case \"communication_emails\":\n            dispatch(communicationEmailsActions.communicationEmailsFetchDataSuccess(fetchedItems));\n            break;\n\n          default:\n            break;\n        }\n      } catch (error) {\n        dispatch(itemsHasErrored(error.message));\n        dispatch(itemsIsLoading(false));\n      }\n    });\n    dispatch(itemsIsLoading(false));\n  };\n}\nexport function setPaginationPage(index) {\n  return {\n    type: actionTypes.SET_PAGINATION_PAGE,\n    index\n  };\n}\nexport function toggleDrawer(toggleValue) {\n  return {\n    type: actionTypes.TOGGLE_DRAWER,\n    toggleValue\n  };\n}\nexport function itemsHasErrored(error) {\n  return {\n    type: actionTypes.ITEMS_HAS_ERRORED,\n    error\n  };\n}\nexport function itemsIsLoading(bool) {\n  return {\n    type: actionTypes.ITEMS_IS_LOADING,\n    isLoading: bool\n  };\n}\nexport function handleDelete(itemId, url) {\n  //send request to server to delete selected item\n  return async dispatch => {\n    try {\n      await getDatabaseRef().collection(url).doc(itemId).delete();\n\n      switch (url) {\n        case \"property-settings\":\n          dispatch(propertySettingsActions.deletePropertySetting(itemId));\n          break;\n\n        case \"company_profile\":\n          dispatch(companyProfileActions.deleteCompanyProfile(itemId));\n          break;\n\n        case \"properties\":\n          dispatch(propertyActions.deleteProperty(itemId));\n          break;\n\n        case \"property_units\":\n          dispatch(propertyUnitActions.deletePropertyUnit(itemId));\n          break;\n\n        case \"contacts\":\n          dispatch(contactsActions.deleteContact(itemId));\n          break;\n\n        case \"transactions-charges\":\n          dispatch(rentalChargesActions.deleteSaleCharge(itemId));\n          break;\n\n        case \"leases\":\n          dispatch(leaseActions.deleteLease(itemId));\n          break;\n\n        case \"sales\":\n          dispatch(salesActions.deleteSale(itemId));\n          break;\n\n        case \"to-dos\":\n          dispatch(toDoActions.deleteToDo(itemId));\n          break;\n\n        case \"unit-charges\":\n          dispatch(propertyUnitChargeActions.deletePropertyUnitCharge(itemId));\n          break;\n\n        case \"maintenance-requests\":\n          dispatch(maintenanceRequestsActions.deleteMaintenanceRequest(itemId));\n          break;\n\n        case \"notices\":\n          dispatch(vacatingNoticesActions.deleteNotice(itemId));\n          break;\n\n        case \"email-templates\":\n          dispatch(emailTemplatesActions.deleteEmailTemplate(itemId));\n          break;\n\n        case \"management-fees\":\n          dispatch(managementFeesActions.deleteManagementFee(itemId));\n          break;\n\n        case \"expenses\":\n          dispatch(expensesActions.deleteExpense(itemId));\n          break;\n\n        case \"credit-notes\":\n          dispatch(creditNotesActions.deleteCreditNote(itemId));\n          break;\n\n        case \"users\":\n          dispatch(usersActions.deleteUser(itemId));\n          break;\n\n        case \"meter_readings\":\n          dispatch(productsActions.deleteMeterReading(itemId));\n          break;\n\n        case \"communication_emails\":\n          dispatch(communicationEmailsActions.deleteCommunicationEmail(itemId));\n          break;\n\n        default:\n          break;\n      }\n    } catch (error) {\n      dispatch(itemsHasErrored(error.message));\n      dispatch(itemsIsLoading(false));\n      console.log(\"Failed to Delete Document!\", error);\n    }\n  };\n}\nexport function handleItemFormSubmit(data, url) {\n  if (typeof data.id === \"undefined\") {\n    delete data.id;\n  }\n\n  return dispatch => {\n    return new Promise(function (resolve, reject) {\n      dispatch(itemsIsLoading(true));\n      typeof data.id !== \"undefined\" ? //send post request to edit the item\n      getDatabaseRef().collection(url).doc(data.id).update(data).then(docRef => {\n        let modifiedObject = Object.assign({}, data);\n\n        switch (url) {\n          case \"contacts\":\n            dispatch(contactsActions.editContact(modifiedObject));\n            break;\n\n          case \"sales\":\n            dispatch(salesActions.editSale(modifiedObject));\n            break;\n\n          case \"to-dos\":\n            dispatch(toDoActions.editToDo(modifiedObject));\n            break;\n\n          case \"maintenance-requests\":\n            dispatch(maintenanceRequestsActions.editMaintenanceRequest(modifiedObject));\n            break;\n\n          case \"notices\":\n            dispatch(vacatingNoticesActions.editNotice(modifiedObject));\n            break;\n\n          case \"email-templates\":\n            dispatch(emailTemplatesActions.editEmailTemplate(modifiedObject));\n            break;\n\n          case \"management-fees\":\n            dispatch(managementFeesActions.editManagementFee(modifiedObject));\n            break;\n\n          case \"products\":\n            dispatch(expensesActions.editExpense(modifiedObject));\n            break;\n\n          case \"credit-notes\":\n            dispatch(creditNotesActions.editCreditNote(modifiedObject));\n            break;\n\n          case \"users\":\n            dispatch(usersActions.editUser(modifiedObject));\n            break;\n\n          case \"meter_readings\":\n            dispatch(productsActions.editMeterReading(modifiedObject));\n            break;\n\n          case \"communication_emails\":\n            dispatch(communicationEmailsActions.editCommunicationEmail(modifiedObject));\n            break;\n\n          default:\n            break;\n        }\n\n        resolve(data.id);\n      }).catch(error => {\n        dispatch(itemsHasErrored(error.message));\n        console.log(\"Error updating document => \", error.response);\n        reject(error);\n      }).finally(() => {\n        dispatch(itemsIsLoading(false));\n      }) : //send post to create item\n      getDatabaseRef().collection(url).add(data).then(docRef => {\n        let addedItem = Object.assign({}, data, {\n          id: docRef.id\n        });\n\n        switch (url) {\n          case \"property-settings\":\n            dispatch(propertySettingsActions.addPropertySetting(addedItem));\n            break;\n\n          case \"company_profile\":\n            dispatch(companyProfileActions.addCompanyProfile(addedItem));\n            break;\n\n          case \"properties\":\n            dispatch(propertyActions.addProperty(addedItem));\n            break;\n\n          case \"property_units\":\n            dispatch(propertyUnitActions.addPropertyUnit(addedItem));\n            break;\n\n          case \"unit-charges\":\n            dispatch(propertyUnitChargeActions.addPropertyUnitCharge(addedItem));\n            break;\n\n          case \"contacts\":\n            dispatch(contactsActions.addContact(addedItem));\n            break;\n\n          case \"transactions-charges\":\n            dispatch(rentalChargesActions.addSaleCharge(addedItem));\n            break;\n\n          case \"leases\":\n            dispatch(leaseActions.addLease(addedItem));\n            break;\n\n          case \"sales\":\n            dispatch(salesActions.addSale(addedItem));\n            break;\n\n          case \"to-dos\":\n            dispatch(toDoActions.addToDo(addedItem));\n            break;\n\n          case \"maintenance-requests\":\n            dispatch(maintenanceRequestsActions.addMaintenanceRequest(addedItem));\n            break;\n\n          case \"notices\":\n            dispatch(vacatingNoticesActions.addNotice(addedItem));\n            break;\n\n          case \"email-templates\":\n            dispatch(emailTemplatesActions.addEmailTemplate(addedItem));\n            break;\n\n          case \"management-fees\":\n            dispatch(managementFeesActions.addManagementFee(addedItem));\n            break;\n\n          case \"expenses\":\n            dispatch(expensesActions.addExpense(addedItem));\n            break;\n\n          case \"credit-notes\":\n            dispatch(creditNotesActions.addCreditNote(addedItem));\n            break;\n\n          case \"users\":\n            dispatch(usersActions.addUser(addedItem));\n            break;\n\n          case \"meter_readings\":\n            dispatch(productsActions.addMeterReading(addedItem));\n            break;\n\n          case \"communication_emails\":\n            dispatch(communicationEmailsActions.addCommunicationEmail(addedItem));\n            break;\n\n          default:\n            break;\n        }\n\n        resolve(docRef.id);\n      }).catch(error => {\n        dispatch(itemsHasErrored(error.message));\n        console.log(\"Error adding document => \", error.response);\n        reject(error);\n      }).finally(() => {\n        dispatch(itemsIsLoading(false));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/actions/actions.js"],"names":["actionTypes","vacatingNoticesActions","emailTemplatesActions","propertyActions","propertySettingsActions","propertyUnitChargeActions","propertyUnitActions","managementFeesActions","contactsActions","salesActions","companyProfileActions","accountBillingActions","usersActions","rentalChargesActions","communicationEmailsActions","leaseActions","toDoActions","expensesActions","creditNotesActions","productsActions","maintenanceRequestsActions","auth","firebaseStorage","firebaseFunctions","getDatabaseRef","firebaseStorageRef","ref","setAdminCustomClaim","httpsCallable","setDatabaseRefCustomClaim","createFirebaseUser","adminCreateFirebaseUser","updateFirebaseUser","deleteFirebaseUsers","sendInvoice","setCurrentUser","user","type","SET_CURRENT_USER","firebaseGetOptions","source","firebaseSignOutUser","dispatch","signOut","then","catch","error","finally","getFirebaseUserDetails","userToken","idTokenResult","getIdTokenResult","isAdmin","tenantId","claims","admin","databaseRef","userDetails","displayName","email","emailVerified","photoURL","uid","id","tenant_id","resetUserPasswordByEmail","sendPasswordResetEmail","handleCodeInApp","url","signUpWithEmailAndPassword","returnValue","createdUser","data","userId","userProfile","console","log","message","Error","signInUserWithEmailAndPassword","password","authCredential","signInWithEmailAndPassword","errorCode","code","errorMessage","sendEmails","from_user","subject","recipients","sendEmail","replyTo","details","deleteUploadedFileByUrl","fileUrl","refFromURL","delete","uploadFilesToFirebase","fileToUpload","fileRef","child","name","snapshot","putString","getDownloadURL","error_1","itemsFetchData","collectionsUrls","itemsIsLoading","forEach","collection","get","fetchedItems","doc","fetchedObject","Object","assign","push","propertySettingsFetchDataSuccess","companyProfilesFetchDataSuccess","accountBillingsFetchDataSuccess","propertiesFetchDataSuccess","propertyUnitsFetchDataSuccess","leasesFetchDataSuccess","propertyUnitChargesFetchDataSuccess","contactsFetchDataSuccess","rentalChargesFetchDataSuccess","salesFetchDataSuccess","toDosFetchDataSuccess","maintenanceRequestsFetchDataSuccess","noticesFetchDataSuccess","emailTemplatesFetchDataSuccess","managementFeesFetchDataSuccess","expensesFetchDataSuccess","creditNotesFetchDataSuccess","productsFetchDataSuccess","usersFetchDataSuccess","communicationEmailsFetchDataSuccess","itemsHasErrored","setPaginationPage","index","SET_PAGINATION_PAGE","toggleDrawer","toggleValue","TOGGLE_DRAWER","ITEMS_HAS_ERRORED","bool","ITEMS_IS_LOADING","isLoading","handleDelete","itemId","deletePropertySetting","deleteCompanyProfile","deleteProperty","deletePropertyUnit","deleteContact","deleteSaleCharge","deleteLease","deleteSale","deleteToDo","deletePropertyUnitCharge","deleteMaintenanceRequest","deleteNotice","deleteEmailTemplate","deleteManagementFee","deleteExpense","deleteCreditNote","deleteUser","deleteMeterReading","deleteCommunicationEmail","handleItemFormSubmit","Promise","resolve","reject","update","docRef","modifiedObject","editContact","editSale","editToDo","editMaintenanceRequest","editNotice","editEmailTemplate","editManagementFee","editExpense","editCreditNote","editUser","editMeterReading","editCommunicationEmail","response","add","addedItem","addPropertySetting","addCompanyProfile","addProperty","addPropertyUnit","addPropertyUnitCharge","addContact","addSaleCharge","addLease","addSale","addToDo","addMaintenanceRequest","addNotice","addEmailTemplate","addManagementFee","addExpense","addCreditNote","addUser","addMeterReading","addCommunicationEmail"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../assets/actionTypes\";\nimport * as vacatingNoticesActions from \"./notices\";\nimport * as emailTemplatesActions from \"./emailTemplates\";\nimport * as propertyActions from \"./property\";\nimport * as propertySettingsActions from \"./propertySettings\";\nimport * as propertyUnitChargeActions from \"./propertyUnitCharges\";\nimport * as propertyUnitActions from \"./propertyUnits\";\nimport * as managementFeesActions from \"./managementFees\";\nimport * as contactsActions from \"./contacts\";\nimport * as salesActions from \"./sales\";\nimport * as companyProfileActions from \"./companyProfile\";\nimport * as accountBillingActions from \"./accountBilling\";\nimport * as usersActions from \"./users\";\nimport * as rentalChargesActions from \"./rentalCharges\";\nimport * as communicationEmailsActions from \"./CommunicationEmails\";\nimport * as leaseActions from \"./leases\";\nimport * as toDoActions from \"./to-dos\";\nimport * as expensesActions from \"./expenses\";\nimport * as creditNotesActions from \"./CreditNotes\";\nimport * as productsActions from \"./products\";\nimport * as maintenanceRequestsActions from \"./maintenanceRequests\";\nimport { auth, firebaseStorage, firebaseFunctions } from \"../firebase\";\nimport { getDatabaseRef } from \"./firebaseHelpers\";\n\n\nconst firebaseStorageRef = firebaseStorage.ref();\nconst setAdminCustomClaim = firebaseFunctions.httpsCallable('setAdminCustomClaim');\nexport const setDatabaseRefCustomClaim = firebaseFunctions.httpsCallable('setDatabaseRefCustomClaim');\nexport const createFirebaseUser = firebaseFunctions.httpsCallable('createFirebaseUser');\nexport const adminCreateFirebaseUser = firebaseFunctions.httpsCallable('adminCreateFirebaseUser');\nexport const updateFirebaseUser = firebaseFunctions.httpsCallable('updateFirebaseUser');\nexport const deleteFirebaseUsers = firebaseFunctions.httpsCallable('deleteFirebaseUsers');\nexport const sendInvoice = firebaseFunctions.httpsCallable('sendInvoice');\n\nexport function setCurrentUser(user) {\n    return {\n        type: actionTypes.SET_CURRENT_USER,\n        user,\n    };\n}\n\nconst firebaseGetOptions = {\n    source: 'default'\n};\n\nexport const firebaseSignOutUser = () => {\n    return (dispatch) => {\n        auth\n            .signOut()\n            .then(function () {\n\n            })\n            .catch(function (error) {\n                // An error happened.\n            }).finally(() => {\n                dispatch(setCurrentUser(null))\n            })\n    }\n}\n\nexport const getFirebaseUserDetails = async (userToken) => {\n    const idTokenResult = await userToken.getIdTokenResult()\n    let isAdmin;\n    let tenantId;\n    if (idTokenResult.claims) {\n        isAdmin = idTokenResult.claims.admin\n        tenantId = idTokenResult.claims.databaseRef\n    }\n    const userDetails = {\n        displayName: userToken.displayName,\n        email: userToken.email,\n        emailVerified: userToken.emailVerified,\n        photoURL: userToken.photoURL,\n        uid: userToken.uid,\n        id: userToken.uid,\n        isAdmin: isAdmin,\n        tenant_id: tenantId\n    };\n    return userDetails;\n}\n\nexport const resetUserPasswordByEmail = async (email) => {\n    return await auth.sendPasswordResetEmail(email, { handleCodeInApp: false, url: 'https://rentgatepm.com/account-actions/' })\n}\n\nexport const signUpWithEmailAndPassword = async (userDetails) => {\n    try {\n        const returnValue = await createFirebaseUser(userDetails)\n        const createdUser = returnValue.data\n        await setAdminCustomClaim({ userId: createdUser.uid, userProfile: userDetails })\n    } catch (error) {\n        // Handle Errors here.\n        console.log(\"Actions error => \", error.message)\n        throw new Error(error);\n    }\n};\n\nexport const signInUserWithEmailAndPassword = async (email, password) => {\n    try {\n        const authCredential = await auth.signInWithEmailAndPassword(email, password);\n        const user = authCredential.user;\n        const userDetails = getFirebaseUserDetails(user)\n        return userDetails;\n    }\n    catch (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = errorCode === \"auth/wrong-password\"\n            ? \"Wrong password.\"\n            : errorCode === \"auth/user-disabled\"\n                ? \"User account disabled\"\n                : errorCode === \"auth/invalid-email\"\n                    ? \"Email is Invalid\"\n                    : errorCode === \"auth/user-not-found\"\n                        ? \"No user found with email\"\n                        : \"Failed to connect to resource. Check your internet connection\";\n        throw new Error(errorMessage);\n    }\n\n}\n\nexport async function sendEmails(from_user, subject, email, recipients) {\n    var sendEmail = firebaseFunctions.httpsCallable('sendEmail');\n    try {\n        await sendEmail({ replyTo: from_user, subject: subject, email: email, recipients: recipients })\n        // Read result of the Cloud Function.\n    } catch (error) {\n        //getting the error details\n        var code = error.code;\n        var message = error.message;\n        var details = error.details;\n        console.error(`There was an error when calling the sendEmails Cloud Function.\\n \n        Error Code => ${code}. Error Message => ${message}. Error Details => ${details}`);\n    }\n}\n\nexport async function deleteUploadedFileByUrl(fileUrl) {\n    return await firebaseStorage.refFromURL(fileUrl).delete().then(() => console.log('Successfully deleted file')).catch((error) => console.log('Error deleting file => ', error))\n}\n\nexport async function uploadFilesToFirebase(fileToUpload) {\n    var fileRef = firebaseStorageRef.child(`propertyImages/${fileToUpload.name}`);\n    try {\n        const snapshot = await fileRef\n            .putString(fileToUpload.data, \"data_url\");\n        // console.log(\"Uploaded files successfully.\");\n        try {\n            const url = await snapshot.ref.getDownloadURL();\n            return url;\n        }\n        catch (error) {\n            switch (error.code) {\n                case \"storage/object-not-found\":\n                    console.log(\"File doesn't exist\");\n                    break;\n                case \"storage/unauthorized\":\n                    console.log(\n                        \"User doesn't have permission to access the object\"\n                    );\n                    break;\n                case \"storage/canceled\":\n                    console.log(\"User canceled the upload\");\n                    break;\n                case \"storage/unknown\":\n                    console.log(\n                        \"Unknown error occurred, inspect the server response\"\n                    );\n                    break;\n                default:\n                    console.log('Unknown error');\n            }\n        }\n    }\n    catch (error_1) {\n        console.log(\"Error during file upload => \", error_1);\n        return ''\n    }\n}\n\nexport function itemsFetchData(collectionsUrls) {\n    return (dispatch) => {\n        dispatch(itemsIsLoading(true));\n        collectionsUrls.forEach(async (url) => {\n            try {\n                const snapshot = await getDatabaseRef().collection(url).get(firebaseGetOptions)\n                let fetchedItems = []\n                snapshot.forEach((doc) => {\n                    let fetchedObject = Object.assign(\n                        {},\n                        doc.data(),\n                        {\n                            id: doc.id,\n                        }\n                    );\n                    fetchedItems.push(fetchedObject)\n                });\n                switch (url) {\n                    case \"property-settings\":\n                        dispatch(propertySettingsActions.propertySettingsFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"company_profile\":\n                        dispatch(companyProfileActions.companyProfilesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"account-billing\":\n                        dispatch(accountBillingActions.accountBillingsFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"properties\":\n                        dispatch(propertyActions.propertiesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"property_units\":\n                        dispatch(propertyUnitActions.propertyUnitsFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"leases\":\n                        dispatch(leaseActions.leasesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"unit-charges\":\n                        dispatch(propertyUnitChargeActions.propertyUnitChargesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"contacts\":\n                        dispatch(contactsActions.contactsFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"transactions-charges\":\n                        dispatch(rentalChargesActions.rentalChargesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"sales\":\n                        dispatch(salesActions.salesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"to-dos\":\n                        dispatch(toDoActions.toDosFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"maintenance-requests\":\n                        dispatch(maintenanceRequestsActions.maintenanceRequestsFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"notices\":\n                        dispatch(vacatingNoticesActions.noticesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"email-templates\":\n                        dispatch(emailTemplatesActions.emailTemplatesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"management-fees\":\n                        dispatch(managementFeesActions.managementFeesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"expenses\":\n                        dispatch(expensesActions.expensesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"credit-notes\":\n                        dispatch(creditNotesActions.creditNotesFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"meter_readings\":\n                        dispatch(productsActions.productsFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"users\":\n                        dispatch(usersActions.usersFetchDataSuccess(fetchedItems));\n                        break;\n\n                    case \"communication_emails\":\n                        dispatch(communicationEmailsActions.communicationEmailsFetchDataSuccess(fetchedItems));\n                        break;\n\n                    default:\n                        break;\n                }\n            } catch (error) {\n                dispatch(itemsHasErrored(error.message))\n                dispatch(itemsIsLoading(false));\n            }\n        })\n        dispatch(itemsIsLoading(false));\n    }\n}\n\nexport function setPaginationPage(index) {\n    return {\n        type: actionTypes.SET_PAGINATION_PAGE,\n        index,\n    };\n}\n\nexport function toggleDrawer(toggleValue) {\n    return {\n        type: actionTypes.TOGGLE_DRAWER,\n        toggleValue,\n    };\n}\n\nexport function itemsHasErrored(error) {\n    return {\n        type: actionTypes.ITEMS_HAS_ERRORED,\n        error,\n    };\n}\n\nexport function itemsIsLoading(bool) {\n    return {\n        type: actionTypes.ITEMS_IS_LOADING,\n        isLoading: bool,\n    };\n}\n\nexport function handleDelete(itemId, url) {\n    //send request to server to delete selected item\n    return async (dispatch) => {\n        try {\n            await getDatabaseRef()\n                .collection(url)\n                .doc(itemId)\n                .delete();\n            switch (url) {\n                case \"property-settings\":\n                    dispatch(propertySettingsActions.deletePropertySetting(itemId));\n                    break;\n                case \"company_profile\":\n                    dispatch(companyProfileActions.deleteCompanyProfile(itemId)\n                    );\n                    break;\n\n                case \"properties\":\n                    dispatch(propertyActions.deleteProperty(itemId)\n                    );\n                    break;\n\n                case \"property_units\":\n                    dispatch(propertyUnitActions.deletePropertyUnit(itemId)\n                    );\n                    break;\n\n                case \"contacts\":\n                    dispatch(contactsActions.deleteContact(itemId)\n                    );\n                    break;\n\n                case \"transactions-charges\":\n                    dispatch(rentalChargesActions.deleteSaleCharge(itemId)\n                    );\n                    break;\n\n                case \"leases\":\n                    dispatch(leaseActions.deleteLease(itemId));\n                    break;\n\n                case \"sales\":\n                    dispatch(salesActions.deleteSale(itemId)\n                    );\n                    break;\n\n                case \"to-dos\":\n                    dispatch(toDoActions.deleteToDo(itemId));\n                    break;\n\n                case \"unit-charges\":\n                    dispatch(propertyUnitChargeActions.deletePropertyUnitCharge(itemId));\n                    break;\n\n                case \"maintenance-requests\":\n                    dispatch(maintenanceRequestsActions.deleteMaintenanceRequest(itemId)\n                    );\n                    break;\n\n                case \"notices\":\n                    dispatch(vacatingNoticesActions.deleteNotice(itemId)\n                    );\n                    break;\n\n                case \"email-templates\":\n                    dispatch(emailTemplatesActions.deleteEmailTemplate(itemId)\n                    );\n                    break;\n\n                case \"management-fees\":\n                    dispatch(managementFeesActions.deleteManagementFee(itemId)\n                    );\n                    break;\n\n                case \"expenses\":\n                    dispatch(expensesActions.deleteExpense(itemId)\n                    );\n                    break;\n\n                case \"credit-notes\":\n                    dispatch(creditNotesActions.deleteCreditNote(itemId));\n                    break;\n\n                case \"users\":\n                    dispatch(usersActions.deleteUser(itemId)\n                    );\n                    break;\n\n                case \"meter_readings\":\n                    dispatch(productsActions.deleteMeterReading(itemId)\n                    );\n                    break;\n\n                case \"communication_emails\":\n                    dispatch(communicationEmailsActions.deleteCommunicationEmail(itemId)\n                    );\n                    break;\n\n                default:\n                    break;\n            }\n        }\n        catch (error) {\n            dispatch(itemsHasErrored(error.message))\n            dispatch(itemsIsLoading(false));\n            console.log(\"Failed to Delete Document!\", error);\n        }\n    }\n}\n\nexport function handleItemFormSubmit(data, url) {\n    if (typeof data.id === \"undefined\") {\n        delete data.id;\n    }\n    return (dispatch) => {\n        return new Promise(function (resolve, reject) {\n            dispatch(itemsIsLoading(true))\n            typeof data.id !== \"undefined\"\n                ? //send post request to edit the item\n                getDatabaseRef()\n                    .collection(url)\n                    .doc(data.id)\n                    .update(data)\n                    .then((docRef) => {\n                        let modifiedObject = Object.assign(\n                            {},\n                            data,\n                        );\n                        switch (url) {\n                         \n                            case \"contacts\":\n                                dispatch(contactsActions.editContact(modifiedObject));\n                                break;\n\n                            case \"sales\":\n                                dispatch(salesActions.editSale(modifiedObject));\n                                break;\n\n                            case \"to-dos\":\n                                dispatch(toDoActions.editToDo(modifiedObject));\n                                break;\n\n                            case \"maintenance-requests\":\n                                dispatch(maintenanceRequestsActions.editMaintenanceRequest(modifiedObject));\n                                break;\n\n                            case \"notices\":\n                                dispatch(vacatingNoticesActions.editNotice(modifiedObject));\n                                break;\n\n                            case \"email-templates\":\n                                dispatch(emailTemplatesActions.editEmailTemplate(modifiedObject));\n                                break;\n\n                            case \"management-fees\":\n                                dispatch(managementFeesActions.editManagementFee(modifiedObject));\n                                break;\n\n                            case \"products\":\n                                dispatch(expensesActions.editExpense(modifiedObject));\n                                break;\n\n                            case \"credit-notes\":\n                                dispatch(creditNotesActions.editCreditNote(modifiedObject));\n                                break;\n\n                            case \"users\":\n                                dispatch(usersActions.editUser(modifiedObject));\n                                break;\n\n                            case \"meter_readings\":\n                                dispatch(productsActions.editMeterReading(modifiedObject));\n                                break;\n\n                            case \"communication_emails\":\n                                dispatch(communicationEmailsActions.editCommunicationEmail(modifiedObject));\n                                break;\n\n                            default:\n                                break;\n                        }\n                        resolve(data.id);\n                    })\n                    .catch((error) => {\n                        dispatch(itemsHasErrored(error.message))\n                        console.log(\"Error updating document => \", error.response);\n                        reject(error)\n                    }).finally(() => {\n                        dispatch(itemsIsLoading(false));\n                    })\n                : //send post to create item\n                getDatabaseRef()\n                    .collection(url)\n                    .add(data)\n                    .then((docRef) => {\n                        let addedItem = Object.assign({}, data, {\n                            id: docRef.id,\n                        });\n                        switch (url) {\n                            \n                            case \"property-settings\":\n                                dispatch(propertySettingsActions.addPropertySetting(addedItem));\n                                break;\n\n                            case \"company_profile\":\n                                dispatch(companyProfileActions.addCompanyProfile(addedItem));\n                                break;\n\n                            case \"properties\":\n                                dispatch(propertyActions.addProperty(addedItem));\n                                break;\n\n                            case \"property_units\":\n                                dispatch(propertyUnitActions.addPropertyUnit(addedItem));\n                                break;\n\n                            case \"unit-charges\":\n                                dispatch(propertyUnitChargeActions.addPropertyUnitCharge(addedItem));\n                                break;\n\n                            case \"contacts\":\n                                dispatch(contactsActions.addContact(addedItem));\n                                break;\n\n                            case \"transactions-charges\":\n                                dispatch(rentalChargesActions.addSaleCharge(addedItem));\n                                break;\n\n                            case \"leases\":\n                                dispatch(leaseActions.addLease(addedItem));\n                                break;\n\n                            case \"sales\":\n                                dispatch(salesActions.addSale(addedItem));\n                                break;\n\n                            case \"to-dos\":\n                                dispatch(toDoActions.addToDo(addedItem));\n                                break;\n\n                            case \"maintenance-requests\":\n                                dispatch(maintenanceRequestsActions.addMaintenanceRequest(addedItem));\n                                break;\n\n                            case \"notices\":\n                                dispatch(vacatingNoticesActions.addNotice(addedItem));\n                                break;\n\n                            case \"email-templates\":\n                                dispatch(emailTemplatesActions.addEmailTemplate(addedItem));\n                                break;\n\n                            case \"management-fees\":\n                                dispatch(managementFeesActions.addManagementFee(addedItem));\n                                break;\n\n                            case \"expenses\":\n                                dispatch(expensesActions.addExpense(addedItem));\n                                break;\n\n                            case \"credit-notes\":\n                                dispatch(creditNotesActions.addCreditNote(addedItem));\n                                break;\n\n                            case \"users\":\n                                dispatch(usersActions.addUser(addedItem));\n                                break;\n\n                            case \"meter_readings\":\n                                dispatch(productsActions.addMeterReading(addedItem));\n                                break;\n\n                            case \"communication_emails\":\n                                dispatch(communicationEmailsActions.addCommunicationEmail(addedItem));\n                                break;\n\n                            default:\n                                break;\n                        }\n                        resolve(docRef.id);\n                    })\n                    .catch((error) => {\n                        dispatch(itemsHasErrored(error.message))\n                        console.log(\"Error adding document => \", error.response);\n                        reject(error)\n                    }).finally(() => {\n                        dispatch(itemsIsLoading(false));\n                    });\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}