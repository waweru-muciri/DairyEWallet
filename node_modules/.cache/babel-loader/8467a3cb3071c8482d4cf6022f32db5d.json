{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/charges/AddPaymentToChargesModal.js\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles.js\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst AddPaymentToChargesSchema = Yup.object().shape({\n  payment_date: Yup.date().required('Payment Date is Required'),\n  memo: Yup.string().trim().max(50, \"Memo details should be less than 50 characters\").default('')\n});\nexport default function AddPaymentToChargesModal(props) {\n  const classes = commonStyles();\n  const {\n    chargesToAddPayments,\n    open,\n    handleClose,\n    handleItemSubmit\n  } = props;\n  const paymentValues = {\n    memo: \"Charge Payment\",\n    payment_date: defaultDate,\n    send_email_receipts: false,\n    send_sms_receipts: false\n  };\n  return /*#__PURE__*/React.createElement(Dialog, {\n    fullWidth: true,\n    maxWidth: \"sm\",\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Set Charges Paid In Full\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: paymentValues,\n    validationSchema: AddPaymentToChargesSchema,\n    onSubmit: async (values, {\n      setStatus\n    }) => {\n      try {\n        //edit the charges here to show that they are payed\n        for (let index = 0; index < chargesToAddPayments.length; index++) {\n          const charge = chargesToAddPayments[index];\n          const chargePayment = {\n            charge_id: charge.id,\n            payment_amount: charge.charge_amount,\n            payment_date: values.payment_date,\n            tenant_id: charge.tenant_id,\n            unit_id: charge.unit_id,\n            property_id: charge.property_id,\n            payment_label: charge.charge_label,\n            memo: values.memo,\n            payment_type: charge.charge_type\n          };\n          await handleItemSubmit(chargePayment, 'charge-payments');\n          await handleItemSubmit({\n            id: charge.id,\n            payed: true\n          }, 'transactions-charges');\n        }\n\n        if (values.send_email_receipts) {}\n\n        if (values.send_sms_receipts) {}\n\n        setStatus({\n          sent: true,\n          msg: \"Payments added successfully.\"\n        });\n        setTimeout(() => handleClose(), 1000);\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"AddPaymentToChargesForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 41\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 54\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"payment_date\",\n    type: \"date\",\n    name: \"payment_date\",\n    label: \"Payment Date\",\n    value: values.payment_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    InputLabelProps: {\n      shrink: true\n    },\n    error: errors.payment_date && touched.payment_date,\n    helperText: touched.payment_date && errors.payment_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"text\",\n    multiline: true,\n    rows: 2,\n    variant: \"outlined\",\n    name: \"memo\",\n    id: \"memo\",\n    label: \"Payment Details/Memo\",\n    value: values.memo,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.memo && touched.memo,\n    helperText: \"Include details for the payments here (max 50)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    color: \"secondary\",\n    error: errors.send_email_receipts && touched.send_email_receipts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: values.send_email_receipts,\n      onChange: handleChange,\n      name: \"send_email_receipts\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 53\n      }\n    }),\n    label: \"Send Email Receipts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    color: \"secondary\",\n    error: errors.send_sms_receipts && touched.send_sms_receipts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: values.send_sms_receipts,\n      onChange: handleChange,\n      name: \"send_sms_receipts\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 53\n      }\n    }),\n    label: \"Send SMS Receipts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 45\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 56\n      }\n    }),\n    onClick: () => {\n      handleClose();\n    },\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 41\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 56\n      }\n    }),\n    form: \"AddPaymentToChargesForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 41\n    }\n  }, \"Add Payments\"))))))));\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/charges/AddPaymentToChargesModal.js"],"names":["React","Grid","TextField","Button","SaveIcon","CancelIcon","Dialog","DialogTitle","DialogContent","CustomSnackbar","FormControl","FormControlLabel","Checkbox","Yup","Formik","commonStyles","format","startOfToday","CustomCircularProgress","defaultDate","AddPaymentToChargesSchema","object","shape","payment_date","date","required","memo","string","trim","max","default","AddPaymentToChargesModal","props","classes","chargesToAddPayments","open","handleClose","handleItemSubmit","paymentValues","send_email_receipts","send_sms_receipts","values","setStatus","index","length","charge","chargePayment","charge_id","id","payment_amount","charge_amount","tenant_id","unit_id","property_id","payment_label","charge_label","payment_type","charge_type","payed","sent","msg","setTimeout","error","status","handleSubmit","touched","errors","handleChange","handleBlur","isSubmitting","form","shrink","buttonBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles.js\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\nconst AddPaymentToChargesSchema = Yup.object().shape({\n    payment_date: Yup.date().required('Payment Date is Required'),\n    memo: Yup.string().trim().max(50, \"Memo details should be less than 50 characters\").default(''),\n});\n\nexport default function AddPaymentToChargesModal(props) {\n    const classes = commonStyles();\n    const { chargesToAddPayments, open, handleClose, handleItemSubmit } = props\n\n    const paymentValues = {\n        memo: \"Charge Payment\",\n        payment_date: defaultDate,\n        send_email_receipts: false,\n        send_sms_receipts: false,\n    }\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">Set Charges Paid In Full</DialogTitle>\n            <DialogContent>\n                <Formik\n                    initialValues={paymentValues}\n                    validationSchema={AddPaymentToChargesSchema}\n                    onSubmit={async (values, { setStatus }) => {\n                        try {\n                            //edit the charges here to show that they are payed\n                            for (let index = 0; index < chargesToAddPayments.length; index++) {\n                                const charge = chargesToAddPayments[index];\n                                const chargePayment = {\n                                    charge_id: charge.id,\n                                    payment_amount: charge.charge_amount,\n                                    payment_date: values.payment_date,\n                                    tenant_id: charge.tenant_id,\n                                    unit_id: charge.unit_id,\n                                    property_id: charge.property_id,\n                                    payment_label: charge.charge_label,\n                                    memo: values.memo,\n                                    payment_type: charge.charge_type,\n                                };\n                                await handleItemSubmit(chargePayment, 'charge-payments')\n                                await handleItemSubmit({ id: charge.id, payed: true }, 'transactions-charges')\n\n                            }\n                            if (values.send_email_receipts) {\n                                \n                            }\n                            if (values.send_sms_receipts) {\n                                \n                            }\n                            setStatus({ sent: true, msg: \"Payments added successfully.\" })\n                            setTimeout(() => handleClose(), 1000);\n                        } catch (error) {\n                            setStatus({ sent: false, msg: `Error! ${error}.` })\n                        }\n                    }}>\n                    {({\n                        values,\n                        status,\n                        handleSubmit,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                    }) => (\n                        <form\n                            className={classes.form}\n                            method=\"post\"\n                            id=\"AddPaymentToChargesForm\"\n                            onSubmit={handleSubmit}\n                        >\n                            <Grid\n                                container\n                                direction=\"column\"\n                                spacing={2}\n                            >\n                                {\n                                    status && status.msg && (\n                                        <CustomSnackbar\n                                            variant={status.sent ? \"success\" : \"error\"}\n                                            message={status.msg}\n                                        />\n                                    )\n                                }\n                                {\n                                    isSubmitting && (<CustomCircularProgress open={true} />)\n                                }\n                                <Grid container item direction=\"column\" spacing={2}>\n                                    <Grid item>\n                                        <TextField\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            id=\"payment_date\"\n                                            type=\"date\"\n                                            name=\"payment_date\"\n                                            label=\"Payment Date\"\n                                            value={values.payment_date}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            InputLabelProps={{ shrink: true }}\n                                            error={errors.payment_date && touched.payment_date}\n                                            helperText={touched.payment_date && errors.payment_date}\n                                        />\n                                    </Grid>\n                                    <Grid item>\n                                        <TextField\n                                            fullWidth\n                                            type=\"text\"\n                                            multiline\n                                            rows={2}\n                                            variant=\"outlined\"\n                                            name=\"memo\"\n                                            id=\"memo\"\n                                            label=\"Payment Details/Memo\"\n                                            value={values.memo}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            error={errors.memo && touched.memo}\n                                            helperText={\"Include details for the payments here (max 50)\"}\n                                        />\n                                    </Grid>\n                                    <Grid item>\n                                        <FormControl color=\"secondary\" error={errors.send_email_receipts && touched.send_email_receipts}>\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox\n                                                        checked={values.send_email_receipts}\n                                                        onChange={handleChange}\n                                                        name=\"send_email_receipts\"\n                                                        color=\"primary\"\n                                                    />\n                                                }\n                                                label=\"Send Email Receipts\"\n                                            />\n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item>\n                                        <FormControl color=\"secondary\" error={errors.send_sms_receipts && touched.send_sms_receipts}>\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox\n                                                        checked={values.send_sms_receipts}\n                                                        onChange={handleChange}\n                                                        name=\"send_sms_receipts\"\n                                                        color=\"primary\"\n                                                    />\n                                                }\n                                                label=\"Send SMS Receipts\"\n                                            />\n                                        </FormControl>\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    item\n                                    container\n                                    direction=\"row\"\n                                    className={classes.buttonBox}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            color=\"secondary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<CancelIcon />}\n                                            onClick={() => { handleClose() }}\n                                            disableElevation\n                                        >\n                                            Cancel\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            type=\"submit\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SaveIcon />}\n                                            form=\"AddPaymentToChargesForm\"\n                                            disabled={isSubmitting}\n                                        >\n                                            Add Payments\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    )}\n                </Formik>\n            </DialogContent>\n        </Dialog >\n    );\n}"]},"metadata":{},"sourceType":"module"}