{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/Sales.js\";\nimport Layout from \"../components/PrivateLayout\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useEffect, useState } from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Link } from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport { connect } from \"react-redux\";\nimport { handleItemFormSubmit, handleDelete } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getStartEndDatesForPeriod, getSalesFilterOptions } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { printReceipt } from \"../assets/PrintingHelper\";\nimport AddIcon from \"@material-ui/icons/Add\";\nconst TRANSACTIONS_FILTER_OPTIONS = getSalesFilterOptions();\nconst headCells = [{\n  id: \"sale_date\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Sale Date\"\n}, {\n  id: \"contact_name\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Farmer Name\"\n}, {\n  id: \"contact_id_number\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Farmer ID\"\n}, {\n  id: \"product_name\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Product Name\"\n}, {\n  id: \"sale_quantity\",\n  numeric: true,\n  disablePadding: true,\n  label: \"Sale Quantity\"\n}, {\n  id: \"sale_price\",\n  numeric: true,\n  disablePadding: true,\n  label: \"Sale Amount\"\n}, {\n  id: \"total_sale\",\n  numeric: true,\n  disablePadding: true,\n  label: \"Total Sale(Ksh)\"\n}, {\n  id: \"edit\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Edit\"\n}, {\n  id: \"delete\",\n  numeric: false,\n  disablePadding: true,\n  label: \"Delete\"\n}];\n\nlet SalesPage = ({\n  sales,\n  contacts,\n  products,\n  match,\n  handleItemSubmit,\n  handleItemDelete\n}) => {\n  const classes = commonStyles();\n  let [salesItems, setSalesItems] = useState([]);\n  const [filteredSalesItems, setFilteredSalesItems] = useState([]);\n  const [productFilter, setProductFilter] = useState(\"all\");\n  const [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n  const [fromDateFilter, setFromDateFilter] = useState(\"\");\n  const [toDateFilter, setToDateFilter] = useState(\"\");\n  const [contactFilter, setContactFilter] = useState(null);\n  const [selected, setSelected] = useState([]);\n  useEffect(() => {\n    setSalesItems(sales);\n    setFilteredSalesItems(filterSalesByCriteria(sales));\n  }, [sales]);\n\n  const filterSalesByCriteria = salesToFilter => {\n    //filter the sales according to the search criteria here\n    let filteredSales = salesToFilter;\n\n    if (periodFilter) {\n      const {\n        startDate,\n        endDate\n      } = getStartEndDatesForPeriod(periodFilter);\n      filteredSales = filteredSales.filter(saleItem => {\n        const saleDate = parse(saleItem.sale_date, 'yyyy-MM-dd', new Date());\n        return isWithinInterval(saleDate, {\n          start: startDate,\n          end: endDate\n        });\n      });\n    }\n\n    filteredSales = filteredSales.filter(({\n      sale_date,\n      contact_id,\n      product_id\n    }) => (!fromDateFilter ? true : sale_date >= fromDateFilter) && (!toDateFilter ? true : sale_date <= toDateFilter) && (productFilter === \"all\" ? true : product_id === productFilter) && (!contactFilter ? true : contact_id === contactFilter.id));\n    return filteredSales;\n  };\n\n  const handleSearchFormSubmit = event => {\n    event.preventDefault();\n    setFilteredSalesItems(filterSalesByCriteria(salesItems));\n  };\n\n  const handleSaleDelete = async (saleId, url) => {\n    const saleToDelete = salesItems.find(({\n      id\n    }) => id === saleId) || {};\n    const saleForSameCharge = salesItems.find(({\n      id,\n      charge_id\n    }) => charge_id === saleToDelete.charge_id && id !== saleToDelete.id);\n\n    if (!saleForSameCharge) {\n      await handleItemSubmit({\n        id: saleToDelete.charge_id,\n        payed: false\n      }, 'transactions-charges');\n    }\n\n    await handleItemDelete(saleId, url);\n  };\n\n  const resetSearchForm = event => {\n    event.preventDefault();\n    setProductFilter(\"all\");\n    setPeriodFilter(\"month-to-date\");\n    setFromDateFilter(\"\");\n    setToDateFilter(\"\");\n    setContactFilter(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageTitle: \"Sales\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PageHeading, {\n    text: 'Sales',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(AddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 40\n      }\n    }),\n    component: Link,\n    to: `${match.url}/new`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, \"NEW\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(EditIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 40\n      }\n    }),\n    disabled: !selected.length,\n    component: Link,\n    to: `${match.url}/${selected[0]}/edit`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }\n  }, \"Edit\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PrintArrayToPdf, {\n    disabled: !selected.length,\n    reportName: 'Rental Sales Records',\n    reportTitle: 'Rental Sales Data',\n    headCells: headCells,\n    dataToPrint: filteredSalesItems.filter(({\n      id\n    }) => selected.includes(id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    \"aria-label\": \"Print Receipt\",\n    variant: \"contained\",\n    size: \"medium\",\n    color: \"primary\",\n    disabled: !contactFilter || !selected.length,\n    onClick: () => {\n      const contactDetails = contacts.find(({\n        id\n      }) => id === contactFilter.id);\n      printReceipt(contactDetails, filteredSalesItems.filter(({\n        id\n      }) => selected.includes(id)));\n    },\n    startIcon: /*#__PURE__*/React.createElement(PrintIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 36\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, \"Print Receipt\"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExportToExcelBtn, {\n    disabled: !selected.length,\n    reportName: 'Rental Sales Records',\n    reportTitle: 'Rental Sales Data',\n    headCells: headCells,\n    dataToPrint: filteredSalesItems.filter(({\n      id\n    }) => selected.includes(id)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"salesSearchForm\",\n    onSubmit: handleSearchFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    md: 6,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    type: \"date\",\n    id: \"from_date_filter\",\n    name: \"from_date_filter\",\n    label: \"From Date\",\n    value: fromDateFilter,\n    onChange: event => {\n      setFromDateFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    type: \"date\",\n    name: \"to_date_filter\",\n    label: \"To Date\",\n    id: \"to_date_filter\",\n    onChange: event => {\n      setToDateFilter(event.target.value);\n    },\n    value: toDateFilter,\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 49\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    select: true,\n    id: \"period_filter\",\n    name: \"period_filter\",\n    label: \"Period\",\n    value: periodFilter,\n    onChange: event => {\n      setPeriodFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 45\n    }\n  }, TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: filterOption.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 53\n    }\n  }, filterOption.text))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"product_filter\",\n    label: \"Product\",\n    id: \"product_filter\",\n    onChange: event => {\n      setProductFilter(event.target.value);\n    },\n    value: productFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"all\",\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 49\n    }\n  }, \"All\"), products.map((product, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: product.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 57\n    }\n  }, product.product_name)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    id: \"contact_filter\",\n    options: contacts,\n    getOptionSelected: (option, value) => option.id === value.id,\n    name: \"contact_filter\",\n    onChange: (event, newValue) => {\n      setContactFilter(newValue);\n    },\n    value: contactFilter,\n    getOptionLabel: contact => contact ? `${contact.first_name} ${contact.last_name}` : '',\n    style: {\n      width: \"100%\"\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Farmer\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 74\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 45\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    form: \"salesSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 41\n    }\n  }, \"SEARCH\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => resetSearchForm(event),\n    type: \"reset\",\n    form: \"salesSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(UndoIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 41\n    }\n  }, \"RESET\"))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CommonTable, {\n    selected: selected,\n    setSelected: setSelected,\n    rows: filteredSalesItems,\n    headCells: headCells,\n    handleDelete: handleSaleDelete,\n    deleteUrl: \"sales\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    sales: state.sales.map(sale => {\n      const contact = state.contacts.find(contact => contact.id === sale.contact_id) || {};\n      const product = state.products.find(product => product.id === sale.product_id || {});\n      return Object.assign({}, sale, {\n        contact_name: `${contact.first_name} ${contact.last_name}`,\n        product_name: product.product_name,\n        total_sale: parseFloat(sale.sale_price) * parseFloat(sale.sale_quantity)\n      });\n    }).sort((sale1, sale2) => parse(sale2.sale_date, 'yyyy-MM-dd', new Date()) - parse(sale1.sale_date, 'yyyy-MM-dd', new Date())),\n    products: state.products,\n    contacts: state.contacts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n    handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url))\n  };\n};\n\nSalesPage = connect(mapStateToProps, mapDispatchToProps)(SalesPage);\nexport default withRouter(SalesPage);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/Sales.js"],"names":["Layout","Grid","PageHeading","React","useEffect","useState","MenuItem","Button","TextField","Box","SearchIcon","Link","EditIcon","UndoIcon","PrintIcon","ExportToExcelBtn","connect","handleItemFormSubmit","handleDelete","CommonTable","withRouter","commonStyles","PrintArrayToPdf","getStartEndDatesForPeriod","getSalesFilterOptions","parse","isWithinInterval","Autocomplete","printReceipt","AddIcon","TRANSACTIONS_FILTER_OPTIONS","headCells","id","numeric","disablePadding","label","SalesPage","sales","contacts","products","match","handleItemSubmit","handleItemDelete","classes","salesItems","setSalesItems","filteredSalesItems","setFilteredSalesItems","productFilter","setProductFilter","periodFilter","setPeriodFilter","fromDateFilter","setFromDateFilter","toDateFilter","setToDateFilter","contactFilter","setContactFilter","selected","setSelected","filterSalesByCriteria","salesToFilter","filteredSales","startDate","endDate","filter","saleItem","saleDate","sale_date","Date","start","end","contact_id","product_id","handleSearchFormSubmit","event","preventDefault","handleSaleDelete","saleId","url","saleToDelete","find","saleForSameCharge","charge_id","payed","resetSearchForm","length","includes","contactDetails","form","target","value","shrink","map","filterOption","index","text","product","product_name","option","newValue","contact","first_name","last_name","width","params","mapStateToProps","state","sale","Object","assign","contact_name","total_sale","parseFloat","sale_price","sale_quantity","sort","sale1","sale2","mapDispatchToProps","dispatch","item","itemId"],"mappings":"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","sourcesContent":["import Layout from \"../components/PrivateLayout\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useEffect, useState } from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Link } from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport { connect } from \"react-redux\";\nimport { handleItemFormSubmit, handleDelete } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getStartEndDatesForPeriod, getSalesFilterOptions } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { printReceipt } from \"../assets/PrintingHelper\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\n\nconst TRANSACTIONS_FILTER_OPTIONS = getSalesFilterOptions()\n\nconst headCells = [\n    { id: \"sale_date\", numeric: false, disablePadding: true, label: \"Sale Date\" },\n    { id: \"contact_name\", numeric: false, disablePadding: true, label: \"Farmer Name\" },\n    { id: \"contact_id_number\", numeric: false, disablePadding: true, label: \"Farmer ID\" },\n    { id: \"product_name\", numeric: false, disablePadding: true, label: \"Product Name\" },\n    { id: \"sale_quantity\", numeric: true, disablePadding: true, label: \"Sale Quantity\" },\n    { id: \"sale_price\", numeric: true, disablePadding: true, label: \"Sale Amount\" },\n    { id: \"total_sale\", numeric: true, disablePadding: true, label: \"Total Sale(Ksh)\" },\n    { id: \"edit\", numeric: false, disablePadding: true, label: \"Edit\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n];\n\n\nlet SalesPage = ({\n    sales,\n    contacts,\n    products,\n    match,\n    handleItemSubmit,\n    handleItemDelete,\n}) => {\n    const classes = commonStyles();\n    let [salesItems, setSalesItems] = useState([]);\n    const [filteredSalesItems, setFilteredSalesItems] = useState([]);\n    const [productFilter, setProductFilter] = useState(\"all\");\n    const [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n    const [fromDateFilter, setFromDateFilter] = useState(\"\");\n    const [toDateFilter, setToDateFilter] = useState(\"\");\n    const [contactFilter, setContactFilter] = useState(null);\n\n    const [selected, setSelected] = useState([]);\n\n    useEffect(() => {\n        setSalesItems(sales);\n        setFilteredSalesItems(filterSalesByCriteria(sales));\n    }, [sales]);\n\n    const filterSalesByCriteria = (salesToFilter) => {\n        //filter the sales according to the search criteria here\n        let filteredSales = salesToFilter\n        if (periodFilter) {\n            const { startDate, endDate } = getStartEndDatesForPeriod(periodFilter)\n            filteredSales = filteredSales.filter((saleItem) => {\n                const saleDate = parse(saleItem.sale_date, 'yyyy-MM-dd', new Date())\n                return isWithinInterval(saleDate, { start: startDate, end: endDate })\n            })\n        }\n        filteredSales = filteredSales\n            .filter(({ sale_date, contact_id, product_id }) =>\n                (!fromDateFilter ? true : sale_date >= fromDateFilter)\n                && (!toDateFilter ? true : sale_date <= toDateFilter)\n                && (productFilter === \"all\" ? true : product_id === productFilter)\n                && (!contactFilter ? true : contact_id === contactFilter.id)\n            )\n        return filteredSales;\n    }\n\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        setFilteredSalesItems(filterSalesByCriteria(salesItems));\n    }\n\n    const handleSaleDelete = async (saleId, url) => {\n        const saleToDelete = salesItems.find(({ id }) => id === saleId) || {}\n        const saleForSameCharge = salesItems\n            .find(({ id, charge_id }) => charge_id === saleToDelete.charge_id && id !== saleToDelete.id)\n        if (!saleForSameCharge) {\n            await handleItemSubmit({ id: saleToDelete.charge_id, payed: false }, 'transactions-charges')\n        }\n        await handleItemDelete(saleId, url)\n    }\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setProductFilter(\"all\");\n        setPeriodFilter(\"month-to-date\");\n        setFromDateFilter(\"\");\n        setToDateFilter(\"\");\n        setContactFilter(\"\");\n    };\n\n    return (\n        <Layout pageTitle=\"Sales\">\n            <Grid\n                container\n                spacing={3}\n                alignItems=\"center\"\n            >\n                <Grid item key={2}>\n                    <PageHeading text={'Sales'} />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<AddIcon />}\n                            component={Link}\n                            to={`${match.url}/new`}\n                        >\n                            NEW\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<EditIcon />}\n                            disabled={!selected.length}\n                            component={Link}\n                            to={`${match.url}/${selected[0]}/edit`}\n                        >\n                            Edit\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <PrintArrayToPdf\n                            disabled={!selected.length}\n                            reportName={'Rental Sales Records'}\n                            reportTitle={'Rental Sales Data'}\n                            headCells={headCells}\n                            dataToPrint={filteredSalesItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Button\n                        aria-label=\"Print Receipt\"\n                        variant=\"contained\"\n                        size=\"medium\"\n                        color=\"primary\"\n                        disabled={!contactFilter || !selected.length}\n                        onClick={() => {\n                            const contactDetails = contacts.find(({ id }) => id === contactFilter.id)\n                            printReceipt(\n                                contactDetails,\n                                filteredSalesItems.filter(({ id }) => selected.includes(id))\n                            )\n                        }}\n                        startIcon={<PrintIcon />}>\n                        Print Receipt\n                    </Button>\n                    <Grid item>\n                        <ExportToExcelBtn\n                            disabled={!selected.length}\n                            reportName={'Rental Sales Records'}\n                            reportTitle={'Rental Sales Data'}\n                            headCells={headCells}\n                            dataToPrint={filteredSalesItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"salesSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                            >\n                                <Grid item container spacing={2}>\n                                    <Grid item container direction=\"row\" spacing={2}>\n                                        <Grid item container xs={12} md={6} direction=\"row\" spacing={2}>\n                                            <Grid item xs={12} md={6}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    type=\"date\"\n                                                    id=\"from_date_filter\"\n                                                    name=\"from_date_filter\"\n                                                    label=\"From Date\"\n                                                    value={fromDateFilter}\n                                                    onChange={(event) => {\n                                                        setFromDateFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    InputLabelProps={{ shrink: true }}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    type=\"date\"\n                                                    name=\"to_date_filter\"\n                                                    label=\"To Date\"\n                                                    id=\"to_date_filter\"\n                                                    onChange={(event) => {\n                                                        setToDateFilter(event.target.value);\n                                                    }}\n                                                    value={toDateFilter}\n                                                    InputLabelProps={{ shrink: true }}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                select\n                                                id=\"period_filter\"\n                                                name=\"period_filter\"\n                                                label=\"Period\"\n                                                value={periodFilter}\n                                                onChange={(event) => {\n                                                    setPeriodFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                InputLabelProps={{ shrink: true }}\n                                            >\n                                                {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={filterOption.id}\n                                                    >\n                                                        {filterOption.text}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item container direction=\"row\" spacing={2}>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                select\n                                                variant=\"outlined\"\n                                                name=\"product_filter\"\n                                                label=\"Product\"\n                                                id=\"product_filter\"\n                                                onChange={(event) => {\n                                                    setProductFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                value={productFilter}\n                                            >\n                                                <MenuItem key={\"all\"} value={\"all\"}>All</MenuItem>\n                                                {products.map(\n                                                    (product, index) => (\n                                                        <MenuItem\n                                                            key={index}\n                                                            value={product.id}\n                                                        >\n                                                            {product.product_name}\n                                                        </MenuItem>\n                                                    )\n                                                )}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <Autocomplete\n                                                id=\"contact_filter\"\n                                                options={contacts}\n                                                getOptionSelected={(option, value) => option.id === value.id}\n                                                name=\"contact_filter\"\n                                                onChange={(event, newValue) => {\n                                                    setContactFilter(newValue);\n                                                }}\n                                                value={contactFilter}\n                                                getOptionLabel={(contact) => contact ? `${contact.first_name} ${contact.last_name}` : ''}\n                                                style={{ width: \"100%\" }}\n                                                renderInput={(params) => <TextField {...params} label=\"Farmer\" variant=\"outlined\" />}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    item\n                                    justify=\"flex-end\"\n                                    alignItems=\"center\"\n                                    direction=\"row\"\n                                    key={1}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            type=\"submit\"\n                                            form=\"salesSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SearchIcon />}\n                                        >\n                                            SEARCH\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) => resetSearchForm(event)}\n                                            type=\"reset\"\n                                            form=\"salesSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<UndoIcon />}\n                                        >\n                                            RESET\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n                <Grid item xs={12}>\n                    <CommonTable\n                        selected={selected}\n                        setSelected={setSelected}\n                        rows={filteredSalesItems}\n                        headCells={headCells}\n                        handleDelete={handleSaleDelete}\n                        deleteUrl={\"sales\"}\n                    />\n                </Grid>\n\n            </Grid>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        sales: state.sales\n            .map((sale) => {\n                const contact = state.contacts.find((contact) => contact.id === sale.contact_id) || {};\n                const product = state.products.find((product) => product.id === sale.product_id || {})\n                return Object.assign({}, sale, {\n                    contact_name: `${contact.first_name} ${contact.last_name}`,\n                    product_name: product.product_name,\n                    total_sale: parseFloat(sale.sale_price) * parseFloat(sale.sale_quantity)\n                })\n            })\n            .sort((sale1, sale2) => parse(sale2.sale_date, 'yyyy-MM-dd', new Date()) -\n                parse(sale1.sale_date, 'yyyy-MM-dd', new Date())),\n        products: state.products,\n        contacts: state.contacts,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n        handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url)),\n    };\n};\n\nSalesPage = connect(mapStateToProps, mapDispatchToProps)(SalesPage);\n\nexport default withRouter(SalesPage);\n"]},"metadata":{},"sourceType":"module"}