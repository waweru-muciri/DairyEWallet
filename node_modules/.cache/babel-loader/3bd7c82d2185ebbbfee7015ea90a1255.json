{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/ImageCropper.js\";\nimport React, { useState } from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport PropTypes from 'prop-types';\n\nconst ImageCropper = ({\n  open,\n  selectedFile,\n  setCroppedImageData,\n  cropHeight,\n  cropWidth\n}) => {\n  const [cropper, setCropper] = useState();\n  const [image, setImage] = useState();\n  const fileToLoad = selectedFile;\n  const reader = new FileReader();\n\n  reader.onloadend = () => {\n    setImage(reader.result);\n  };\n\n  reader.readAsDataURL(fileToLoad);\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      const croppedImageData = cropper.getCroppedCanvas().toDataURL();\n      fileToLoad.data = croppedImageData;\n      setCroppedImageData(fileToLoad);\n    }\n  };\n\n  const handleClose = () => {\n    setCroppedImageData(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Cropper, {\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n    initialAspectRatio: cropWidth === cropHeight ? 1 : 16 / 9,\n    src: image,\n    viewMode: 0.5,\n    guides: true,\n    minCropBoxHeight: cropHeight,\n    minCropBoxWidth: cropWidth,\n    background: false,\n    responsive: true,\n    autoCropArea: 0.5,\n    checkOrientation: false,\n    onInitialized: instance => {\n      setCropper(instance);\n    },\n    cropBoxResizable: false,\n    data: {\n      height: cropHeight,\n      width: cropWidth\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    onClick: () => handleClose(),\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    onClick: () => getCropData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, \"Crop Image\"))))));\n};\n\nImageCropper.propTypes = {\n  cropHeight: PropTypes.number.isRequired,\n  cropWidth: PropTypes.number.isRequired\n};\nexport default ImageCropper;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/ImageCropper.js"],"names":["React","useState","Grid","Button","Dialog","DialogContent","Cropper","PropTypes","ImageCropper","open","selectedFile","setCroppedImageData","cropHeight","cropWidth","cropper","setCropper","image","setImage","fileToLoad","reader","FileReader","onloadend","result","readAsDataURL","getCropData","croppedImageData","getCroppedCanvas","toDataURL","data","handleClose","height","width","instance","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport PropTypes from 'prop-types';\n\nconst ImageCropper = ({ open, selectedFile, setCroppedImageData, cropHeight, cropWidth }) => {\n\n    const [cropper, setCropper] = useState()\n    const [image, setImage] = useState()\n\n    const fileToLoad = selectedFile;\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n        setImage(reader.result)\n    };\n    reader.readAsDataURL(fileToLoad);\n\n    const getCropData = () => {\n        if (typeof cropper !== \"undefined\") {\n            const croppedImageData = cropper.getCroppedCanvas().toDataURL()\n            fileToLoad.data = croppedImageData\n            setCroppedImageData(fileToLoad)\n\n        }\n    };\n\n    const handleClose = () => {\n        setCroppedImageData(\"\")\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogContent>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <Cropper\n                            style={{ height: \"100%\", width: \"100%\" }}\n                            initialAspectRatio={cropWidth === cropHeight ? 1 : (16 / 9)}\n                            src={image}\n                            viewMode={0.5}\n                            guides={true}\n                            minCropBoxHeight={cropHeight}\n                            minCropBoxWidth={cropWidth}\n                            background={false}\n                            responsive={true}\n                            autoCropArea={0.5}\n                            checkOrientation={false}\n                            onInitialized={(instance) => {\n                                setCropper(instance);\n                            }}\n                            cropBoxResizable={false}\n                            data={{height: cropHeight, width: cropWidth}}\n                        />\n                    </Grid>\n                    <Grid item container justify=\"center\" direction=\"row\" spacing={2}>\n                        <Grid item>\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                size=\"medium\"\n                                onClick={() => handleClose()}\n                                disableElevation\n                            >\n                                Cancel\n\t\t\t\t\t        </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                size=\"medium\"\n                                onClick={() => getCropData()}\n                            >\n                                Crop Image\n\t\t\t\t\t        </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog >\n    )\n}\n\nImageCropper.propTypes = {\n    cropHeight: PropTypes.number.isRequired,\n    cropWidth: PropTypes.number.isRequired,\n}\n\nexport default ImageCropper;"]},"metadata":{},"sourceType":"module"}