{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/ImportItemsBtn.js\";\nimport Button from \"@material-ui/core/Button\";\nimport React, { useState } from \"react\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { readXlsxFile } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\nimport { handleItemFormSubmit } from '../actions/actions';\nimport { connect } from \"react-redux\";\nimport CustomCircularProgress from \"./CustomCircularProgress\";\n\nfunction ImportItemsBtn(props) {\n  const {\n    disabled,\n    text,\n    savingUrl,\n    baseObjectToAddProperties,\n    handleItemSubmit\n  } = props;\n  const [isSaving, setSaving] = useState(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, isSaving && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    dialogTitle: \"Uploading...\",\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 30\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    accept: \".xls,.xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel\",\n    style: {\n      display: \"none\"\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: event => {\n      const files = event.target.files;\n\n      if (files.length) {\n        const file = files[0];\n        const reader = new FileReader();\n\n        reader.onload = function (e) {\n          try {\n            var fileData = e.target.result;\n            const dataToSave = readXlsxFile(fileData); //since there is no error after reading the data,\n            // show that we are uploading the data\n\n            setSaving(true);\n            dataToSave.map(async dataItem => {\n              if (baseObjectToAddProperties) {\n                Object.assign(dataItem, baseObjectToAddProperties);\n              }\n\n              return await handleItemSubmit(dataItem, savingUrl);\n            });\n          } catch (error) {\n            console.log(\"Error during uploading items => \", error);\n          } finally {\n            setTimeout(() => {\n              setSaving(false);\n            }, 1000);\n          }\n        };\n\n        reader.readAsBinaryString(file);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    component: \"span\",\n    disabled: disabled,\n    startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 52\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, text ? text : \"Upload\")));\n}\n\nImportItemsBtn.propTypes = {\n  savingUrl: PropTypes.string.isRequired\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ImportItemsBtn);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/ImportItemsBtn.js"],"names":["Button","React","useState","CloudUploadIcon","readXlsxFile","PropTypes","handleItemFormSubmit","connect","CustomCircularProgress","ImportItemsBtn","props","disabled","text","savingUrl","baseObjectToAddProperties","handleItemSubmit","isSaving","setSaving","display","event","files","target","length","file","reader","FileReader","onload","e","fileData","result","dataToSave","map","dataItem","Object","assign","error","console","log","setTimeout","readAsBinaryString","propTypes","string","isRequired","mapDispatchToProps","dispatch","item","url"],"mappings":"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","sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport React, { useState } from \"react\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { readXlsxFile } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\nimport { handleItemFormSubmit } from '../actions/actions'\nimport { connect } from \"react-redux\";\nimport CustomCircularProgress from \"./CustomCircularProgress\";\n\nfunction ImportItemsBtn(props) {\n    const { disabled, text, savingUrl, baseObjectToAddProperties, handleItemSubmit } = props\n    const [isSaving, setSaving] = useState(false);\n    return (\n        <div>\n            {\n                isSaving && (<CustomCircularProgress dialogTitle=\"Uploading...\" open={true} />)\n            }\n            <input\n                accept=\".xls,.xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel\"\n                style={{ display: \"none\" }}\n                id=\"contained-button-file\"\n                type=\"file\"\n                onChange={(event) => {\n                    const files = event.target.files\n                    if (files.length) {\n                        const file = files[0];\n                        const reader = new FileReader();\n                        reader.onload = function (e) {\n                            try {\n                                var fileData = e.target.result;\n                                const dataToSave = readXlsxFile(fileData)\n                                //since there is no error after reading the data,\n                                // show that we are uploading the data\n                                setSaving(true);\n                                dataToSave.map(async dataItem => {\n                                    if (baseObjectToAddProperties) {\n                                        Object.assign(dataItem, baseObjectToAddProperties)\n                                    }\n                                    return await handleItemSubmit(dataItem, savingUrl)\n                                })\n                            } catch (error) {\n                                console.log(\"Error during uploading items => \", error)\n                            } finally {\n                                setTimeout(() => { setSaving(false) }, 1000)\n                            }\n                        };\n                        reader.readAsBinaryString(file)\n                    }\n                }}\n            />\n            <label htmlFor=\"contained-button-file\">\n                <Button variant=\"contained\" color=\"primary\" component=\"span\"\n                    disabled={disabled} startIcon={<CloudUploadIcon />}>\n                    {text ? text : \"Upload\"}\n                </Button>\n            </label>\n        </div>\n    );\n}\n\nImportItemsBtn.propTypes = {\n    savingUrl: PropTypes.string.isRequired,\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(ImportItemsBtn);\n"]},"metadata":{},"sourceType":"module"}