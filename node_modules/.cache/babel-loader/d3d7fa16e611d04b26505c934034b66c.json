{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/PropertyIncomeStatement.js\";\nimport Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport { getTransactionsFilterOptions, getExpensesCategories, currencyFormatter, getMonthlyDatesFromPeriod } from \"../assets/commonAssets\";\nimport { parse, format, isSameMonth } from 'date-fns';\nimport { ExportStatementToExcelBtn } from \"../components/ExportToExcelBtn\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions();\nconst EXPENSES_CATEGORIES = getExpensesCategories();\n\nlet PropertyIncomeStatement = ({\n  rentalPayments,\n  expenses,\n  leases,\n  properties\n}) => {\n  const classes = commonStyles();\n  const [expensesItems, setExpensesItems] = useState([]);\n  const [leaseItems, setLeaseItems] = useState([]);\n  const [paymentItems, setPaymentItems] = useState([]);\n  const [netIncomeObject, setNetIncomeObject] = useState({});\n  const [incomeStatements, setIncomeStatements] = useState([]);\n  const [headCells, setHeadCells] = useState([]);\n  const [expensesStatements, setExpensesStatements] = useState([]);\n  const [propertyFilter, setPropertyFilter] = useState(\"all\");\n  const [fromFilter, setFromFilter] = useState('month-to-date');\n  useEffect(() => {\n    //go back [numMonths] months from current date\n    const eachPastMonthDate = getMonthlyDatesFromPeriod(fromFilter);\n    const headCellsForMonths = [...eachPastMonthDate.map(monthDate => format(monthDate, 'MMMM yyyy')), `Total as of ${format(eachPastMonthDate[eachPastMonthDate.length - 1], 'MMMM yyyy')}`]; // calculate income from rent\n\n    const incomeMappedByMonth = [];\n    const rentalIncomeObject = {\n      income_type: 'Rental Income'\n    };\n    const totalIncomeObject = {\n      income_type: 'Total Income'\n    };\n    const totalNetIncomeObject = {\n      income_type: 'Net Income'\n    };\n    let totalRentalIncomeForPeriod = 0;\n    eachPastMonthDate.forEach(monthDate => {\n      //get rentalPayments recorded in the same month and year as monthDate\n      const totalRentalIncomeForMonth = paymentItems.filter(({\n        payment_type\n      }) => payment_type === 'rent').filter(payment => {\n        const paymentDate = parse(payment.payment_date, 'yyyy-MM-dd', new Date());\n        return isSameMonth(monthDate, paymentDate);\n      }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payment_amount) || 0), 0);\n      totalRentalIncomeForPeriod += totalRentalIncomeForMonth;\n      rentalIncomeObject[format(monthDate, 'MMMM yyyy')] = totalRentalIncomeForMonth;\n    });\n    rentalIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalRentalIncomeForPeriod;\n    incomeMappedByMonth.push(rentalIncomeObject); // calculate income from other sources\n\n    const otherIncomeObject = {\n      income_type: 'Other Income'\n    };\n    let totalOtherIncomeForPeriod = 0;\n    eachPastMonthDate.forEach(monthDate => {\n      //get rentalPayments recorded in the same month and year as monthDate\n      const totalOtherIncome = paymentItems.filter(({\n        payment_type\n      }) => payment_type !== 'rent').filter(payment => {\n        const paymentDate = parse(payment.payment_date, 'yyyy-MM-dd', new Date());\n        return isSameMonth(monthDate, paymentDate);\n      }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payment_amount) || 0), 0);\n      totalOtherIncomeForPeriod += totalOtherIncome;\n      otherIncomeObject[format(monthDate, 'MMMM yyyy')] = totalOtherIncome;\n    });\n    otherIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalOtherIncomeForPeriod;\n    incomeMappedByMonth.push(otherIncomeObject); // get total of all incomes\n\n    incomeMappedByMonth.forEach(incomeObject => {\n      headCellsForMonths.forEach(headCell => {\n        const incomeAmount = parseFloat(incomeObject[headCell]) || 0;\n        totalIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) + incomeAmount;\n      });\n    });\n    incomeMappedByMonth.push(totalIncomeObject); //calucate expenses\n\n    const expensesMappedByMonth = [];\n    const totalExpensesObject = {\n      expense_type: 'Total Expenses',\n      expense_name: \"Total Expenses\"\n    };\n    const expenseObjectsInMonth = [];\n    eachPastMonthDate.forEach(monthDate => {\n      //get expenses recorded in the same month and year\n      //as monthDate\n      expensesItems.filter(expense => {\n        const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date());\n        return isSameMonth(monthDate, expenseDate);\n      }).forEach(monthExpense => {\n        const {\n          type,\n          amount\n        } = monthExpense;\n        const expenseObject = {};\n        expenseObject['expense_type'] = type;\n        expenseObject['amount'] = parseFloat(amount) || 0;\n        expenseObject['month'] = format(monthDate, 'MMMM yyyy');\n        expenseObjectsInMonth.push(expenseObject);\n      });\n    });\n    const expensesTypesSet = new Set(expenseObjectsInMonth.map(expenseObject => expenseObject.expense_type));\n    expensesTypesSet.forEach(expenseType => {\n      expenseObjectsInMonth.filter(expenseObject => expenseObject.expense_type === expenseType).forEach(expenseObject => {\n        //make or obtain an object and push it to the expenses array\n        const expenseObjectByType = expensesMappedByMonth.find(expense => expense.expense_type === expenseType);\n\n        if (typeof expenseObjectByType !== 'undefined') {\n          expenseObjectByType[expenseObject.month] = (parseFloat(expenseObjectByType[expenseObject.month]) || 0) + parseFloat(expenseObject.amount);\n          expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]] = (parseFloat(expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]]) || 0) + parseFloat(expenseObject.amount);\n        } else {\n          const totalExpensesByTypeObject = {};\n          totalExpensesByTypeObject['expense_type'] = expenseType;\n          const EXPENSE_IN_FULL_DETAILS = EXPENSES_CATEGORIES.find(({\n            id\n          }) => id === expenseType) || {};\n          totalExpensesByTypeObject['expense_name'] = EXPENSE_IN_FULL_DETAILS.displayValue;\n          totalExpensesByTypeObject[expenseObject.month] = parseFloat(expenseObject.amount) || 0;\n          totalExpensesByTypeObject[headCellsForMonths[headCellsForMonths.length - 1]] = parseFloat(expenseObject.amount) || 0;\n          expensesMappedByMonth.push(totalExpensesByTypeObject);\n        }\n      });\n    });\n    expensesMappedByMonth.forEach(expenseObject => {\n      headCellsForMonths.forEach(headCell => {\n        const expenseAmount = parseFloat(expenseObject[headCell]) || 0;\n        totalExpensesObject[headCell] = (parseFloat(totalExpensesObject[headCell]) || 0) + expenseAmount;\n      });\n    });\n    expensesMappedByMonth.push(totalExpensesObject); // get net income\n\n    headCellsForMonths.forEach(headCell => {\n      totalNetIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) - (parseFloat(totalExpensesObject[headCell]) || 0);\n    });\n    setHeadCells(headCellsForMonths);\n    setNetIncomeObject(totalNetIncomeObject);\n    setIncomeStatements(incomeMappedByMonth);\n    setExpensesStatements(expensesMappedByMonth);\n  }, [expensesItems, paymentItems]);\n  useEffect(() => {\n    setExpensesItems(expenses);\n  }, [expenses]);\n  useEffect(() => {\n    setPaymentItems(rentalPayments);\n  }, [rentalPayments]);\n  useEffect(() => {\n    setLeaseItems(leases);\n  }, [leases]); //for each lease item calculate the amount of the above liabilities\n\n  const TOTAL_SECURITY_DEPOSIT_LIABILITY = leaseItems.reduce((total, currentValue) => total + (parseFloat(currentValue.security_deposit) || 0), 0);\n  const TOTAL_WATER_DEPOSIT_LIABILITY = leaseItems.reduce((total, currentValue) => total + (parseFloat(currentValue.water_deposit) || 0), 0);\n  const TOTAL_ELECTRICITY_DEPOSIT_LIABILITY = leaseItems.reduce((total, currentValue) => total + (parseFloat(currentValue.electricity_deposit) || 0), 0);\n\n  const handleSearchFormSubmit = event => {\n    event.preventDefault(); //filter the rentalPayments according to the search criteria here\n\n    const filteredTransactions = rentalPayments.filter(({\n      property_id\n    }) => propertyFilter === \"all\" ? true : property_id === propertyFilter);\n    const filteredExpenses = expenses.filter(({\n      property_id\n    }) => propertyFilter === \"all\" ? true : property_id === propertyFilter);\n    const filteredLeases = leases.filter(({\n      property_id\n    }) => propertyFilter === \"all\" ? true : property_id === propertyFilter);\n    setPaymentItems(filteredTransactions);\n    setLeaseItems(filteredLeases);\n    setExpensesItems(filteredExpenses);\n  };\n\n  const resetSearchForm = event => {\n    event.preventDefault();\n    setPropertyFilter(\"all\");\n    setFromFilter(\"month-to-date\");\n    setExpensesItems(expenses);\n    setPaymentItems(rentalPayments);\n    setLeaseItems(leases);\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageTitle: \"Properties Income Statement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PageHeading, {\n    text: 'Properties Income Statement',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExportStatementToExcelBtn, {\n    displayText: \"Export Income\",\n    reportName: 'Properties Income Records',\n    reportTitle: 'Properties Income Records',\n    headCells: headCells,\n    dataToPrint: incomeStatements,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExportStatementToExcelBtn, {\n    displayText: \"Export Expenses\",\n    reportName: \"Properties Expenses  Records\",\n    reportTitle: \"Properties Expenses Data\",\n    headCells: headCells,\n    dataToPrint: expensesStatements,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"contactSearchForm\",\n    onSubmit: handleSearchFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_filter\",\n    label: \"Select Property\",\n    id: \"property_filter\",\n    value: propertyFilter,\n    onChange: event => {\n      setPropertyFilter(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"all\",\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 41\n    }\n  }, \"All\"), properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 45\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    select: true,\n    id: \"from_filter\",\n    name: \"from_filter\",\n    label: \"Period\",\n    value: fromFilter,\n    onChange: event => {\n      setFromFilter(event.target.value);\n    },\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 37\n    }\n  }, TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: filterOption.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 45\n    }\n  }, filterOption.text))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    item: true,\n    justify: \"flex-end\",\n    alignItems: \"center\",\n    direction: \"row\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => handleSearchFormSubmit(event),\n    type: \"submit\",\n    form: \"contactSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 52\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 37\n    }\n  }, \"SEARCH\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: event => resetSearchForm(event),\n    type: \"reset\",\n    form: \"contactSearchForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(UndoIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 52\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 37\n    }\n  }, \"RESET\")))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    sm: 12,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    value: TOTAL_SECURITY_DEPOSIT_LIABILITY,\n    title: \"Total Security Deposit Liability\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    value: TOTAL_WATER_DEPOSIT_LIABILITY,\n    title: \"Total Water Deposit Liability\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    value: TOTAL_ELECTRICITY_DEPOSIT_LIABILITY,\n    title: \"Total Electricity Deposit Liability\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'adadf',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"grey.300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    key: \"first1\",\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 33\n    }\n  }, \"Income\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 41\n    }\n  }, headCell, \" (Ksh)\"))), incomeStatements.map((incomeStatement, incomeIndex) => {\n    const otherColumns = headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      width: 1,\n      textAlign: \"left\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 41\n      }\n    }, currencyFormatter.format(incomeStatement[headCell])));\n    return /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      key: incomeIndex,\n      flexDirection: \"row\",\n      p: 1,\n      bgcolor: \"background.paper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"left\",\n      width: 1,\n      key: incomeIndex + \"jl\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 45\n      }\n    }, incomeStatement['income_type']), otherColumns);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'adlaldadf',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"grey.300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    key: \"faldirst1\",\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 33\n    }\n  }, \"Expenses\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 41\n    }\n  }, headCell))), expensesStatements.map((expenseStatement, incomeIndex) => {\n    const otherColumns = headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      width: 1,\n      textAlign: \"left\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 41\n      }\n    }, currencyFormatter.format(expenseStatement[headCell] || 0)));\n    return /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      key: incomeIndex,\n      flexDirection: \"row\",\n      p: 1,\n      bgcolor: \"background.paper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"left\",\n      width: 1,\n      key: incomeIndex + \"iiajl\",\n      flexGrow: 1,\n      p: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 45\n      }\n    }, expenseStatement['expense_name']), otherColumns);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'adlaldadf',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"grey.300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    key: \"faldirst1\",\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 33\n    }\n  }, \"Net Income\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 41\n    }\n  }, headCell))), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    key: 'kjb',\n    flexDirection: \"row\",\n    p: 1,\n    bgcolor: \"background.paper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    textAlign: \"left\",\n    width: 1,\n    key: \"iiajl\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 37\n    }\n  }, \"Net Income\"), headCells.map((headCell, index) => /*#__PURE__*/React.createElement(Box, {\n    key: index,\n    width: 1,\n    textAlign: \"left\",\n    flexGrow: 1,\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 41\n    }\n  }, currencyFormatter.format(netIncomeObject[headCell] || 0)))))))));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    rentalPayments: state.rentalPayments,\n    expenses: state.expenses,\n    properties: state.properties,\n    leases: state.leases\n  };\n};\n\nPropertyIncomeStatement = connect(mapStateToProps)(PropertyIncomeStatement);\nexport default withRouter(PropertyIncomeStatement);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/PropertyIncomeStatement.js"],"names":["Layout","PageHeading","React","useState","useEffect","Grid","Box","Button","TextField","MenuItem","SearchIcon","UndoIcon","connect","withRouter","commonStyles","getTransactionsFilterOptions","getExpensesCategories","currencyFormatter","getMonthlyDatesFromPeriod","parse","format","isSameMonth","ExportStatementToExcelBtn","InfoDisplayPaper","TRANSACTIONS_FILTER_OPTIONS","EXPENSES_CATEGORIES","PropertyIncomeStatement","rentalPayments","expenses","leases","properties","classes","expensesItems","setExpensesItems","leaseItems","setLeaseItems","paymentItems","setPaymentItems","netIncomeObject","setNetIncomeObject","incomeStatements","setIncomeStatements","headCells","setHeadCells","expensesStatements","setExpensesStatements","propertyFilter","setPropertyFilter","fromFilter","setFromFilter","eachPastMonthDate","headCellsForMonths","map","monthDate","length","incomeMappedByMonth","rentalIncomeObject","income_type","totalIncomeObject","totalNetIncomeObject","totalRentalIncomeForPeriod","forEach","totalRentalIncomeForMonth","filter","payment_type","payment","paymentDate","payment_date","Date","reduce","total","currentTransaction","parseFloat","payment_amount","push","otherIncomeObject","totalOtherIncomeForPeriod","totalOtherIncome","incomeObject","headCell","incomeAmount","expensesMappedByMonth","totalExpensesObject","expense_type","expense_name","expenseObjectsInMonth","expense","expenseDate","expense_date","monthExpense","type","amount","expenseObject","expensesTypesSet","Set","expenseType","expenseObjectByType","find","month","totalExpensesByTypeObject","EXPENSE_IN_FULL_DETAILS","id","displayValue","expenseAmount","TOTAL_SECURITY_DEPOSIT_LIABILITY","currentValue","security_deposit","TOTAL_WATER_DEPOSIT_LIABILITY","water_deposit","TOTAL_ELECTRICITY_DEPOSIT_LIABILITY","electricity_deposit","handleSearchFormSubmit","event","preventDefault","filteredTransactions","property_id","filteredExpenses","filteredLeases","resetSearchForm","form","target","value","property","index","ref","shrink","filterOption","text","width","incomeStatement","incomeIndex","otherColumns","expenseStatement","mapStateToProps","state","ownProps"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,6BAAnB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,4BAAT,EAAuCC,qBAAvC,EAA8DC,iBAA9D,EAAiFC,yBAAjF,QAAkH,wBAAlH;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,WAAxB,QAA2C,UAA3C;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAEA,MAAMC,2BAA2B,GAAGT,4BAA4B,EAAhE;AACA,MAAMU,mBAAmB,GAAGT,qBAAqB,EAAjD;;AAGA,IAAIU,uBAAuB,GAAG,CAAC;AAC3BC,EAAAA,cAD2B;AAE3BC,EAAAA,QAF2B;AAG3BC,EAAAA,MAH2B;AAI3BC,EAAAA;AAJ2B,CAAD,KAKxB;AACF,QAAMC,OAAO,GAAGjB,YAAY,EAA5B;AACA,QAAM,CAACkB,aAAD,EAAgBC,gBAAhB,IAAoC9B,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAAC+B,UAAD,EAAaC,aAAb,IAA8BhC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACiC,YAAD,EAAeC,eAAf,IAAkClC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmC,eAAD,EAAkBC,kBAAlB,IAAwCpC,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACqC,gBAAD,EAAmBC,mBAAnB,IAA0CtC,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACuC,SAAD,EAAYC,YAAZ,IAA4BxC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACyC,kBAAD,EAAqBC,qBAArB,IAA8C1C,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAAC2C,cAAD,EAAiBC,iBAAjB,IAAsC5C,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAC6C,UAAD,EAAaC,aAAb,IAA8B9C,QAAQ,CAAC,eAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAM8C,iBAAiB,GAAGhC,yBAAyB,CAAC8B,UAAD,CAAnD;AACA,UAAMG,kBAAkB,GAAG,CAAC,GAAGD,iBAAiB,CAACE,GAAlB,CAAuBC,SAAD,IAAejC,MAAM,CAACiC,SAAD,EAAY,WAAZ,CAA3C,CAAJ,EAA2E,eAAcjC,MAAM,CAAC8B,iBAAiB,CAACA,iBAAiB,CAACI,MAAlB,GAA2B,CAA5B,CAAlB,EAAkD,WAAlD,CAA+D,EAA9J,CAA3B,CAHY,CAIZ;;AACA,UAAMC,mBAAmB,GAAG,EAA5B;AACA,UAAMC,kBAAkB,GAAG;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAA3B;AACA,UAAMC,iBAAiB,GAAG;AAAED,MAAAA,WAAW,EAAE;AAAf,KAA1B;AACA,UAAME,oBAAoB,GAAG;AAAEF,MAAAA,WAAW,EAAE;AAAf,KAA7B;AACA,QAAIG,0BAA0B,GAAG,CAAjC;AACAV,IAAAA,iBAAiB,CAACW,OAAlB,CAA2BR,SAAD,IAAe;AACrC;AACA,YAAMS,yBAAyB,GAAG1B,YAAY,CAAC2B,MAAb,CAAoB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAsBA,YAAY,KAAK,MAA3D,EAC7BD,MAD6B,CACrBE,OAAD,IAAa;AACjB,cAAMC,WAAW,GAAG/C,KAAK,CAAC8C,OAAO,CAACE,YAAT,EAAuB,YAAvB,EAAqC,IAAIC,IAAJ,EAArC,CAAzB;AACA,eAAO/C,WAAW,CAACgC,SAAD,EAAYa,WAAZ,CAAlB;AACH,OAJ6B,EAI3BG,MAJ2B,CAIpB,CAACC,KAAD,EAAQC,kBAAR,KAA+BD,KAAK,IAAIE,UAAU,CAACD,kBAAkB,CAACE,cAApB,CAAV,IAAiD,CAArD,CAJhB,EAIyE,CAJzE,CAAlC;AAKAb,MAAAA,0BAA0B,IAAIE,yBAA9B;AACAN,MAAAA,kBAAkB,CAACpC,MAAM,CAACiC,SAAD,EAAY,WAAZ,CAAP,CAAlB,GAAqDS,yBAArD;AACH,KATD;AAUAN,IAAAA,kBAAkB,CAACL,kBAAkB,CAACA,kBAAkB,CAACG,MAAnB,GAA4B,CAA7B,CAAnB,CAAlB,GAAwEM,0BAAxE;AACAL,IAAAA,mBAAmB,CAACmB,IAApB,CAAyBlB,kBAAzB,EArBY,CAsBZ;;AACA,UAAMmB,iBAAiB,GAAG;AAAElB,MAAAA,WAAW,EAAE;AAAf,KAA1B;AACA,QAAImB,yBAAyB,GAAG,CAAhC;AACA1B,IAAAA,iBAAiB,CAACW,OAAlB,CAA2BR,SAAD,IAAe;AACrC;AACA,YAAMwB,gBAAgB,GAAGzC,YAAY,CAAC2B,MAAb,CAAoB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAsBA,YAAY,KAAK,MAA3D,EACpBD,MADoB,CACZE,OAAD,IAAa;AACjB,cAAMC,WAAW,GAAG/C,KAAK,CAAC8C,OAAO,CAACE,YAAT,EAAuB,YAAvB,EAAqC,IAAIC,IAAJ,EAArC,CAAzB;AACA,eAAO/C,WAAW,CAACgC,SAAD,EAAYa,WAAZ,CAAlB;AACH,OAJoB,EAIlBG,MAJkB,CAIX,CAACC,KAAD,EAAQC,kBAAR,KAA+BD,KAAK,IAAIE,UAAU,CAACD,kBAAkB,CAACE,cAApB,CAAV,IAAiD,CAArD,CAJzB,EAIkF,CAJlF,CAAzB;AAKAG,MAAAA,yBAAyB,IAAIC,gBAA7B;AACAF,MAAAA,iBAAiB,CAACvD,MAAM,CAACiC,SAAD,EAAY,WAAZ,CAAP,CAAjB,GAAoDwB,gBAApD;AACH,KATD;AAUAF,IAAAA,iBAAiB,CAACxB,kBAAkB,CAACA,kBAAkB,CAACG,MAAnB,GAA4B,CAA7B,CAAnB,CAAjB,GAAuEsB,yBAAvE;AACArB,IAAAA,mBAAmB,CAACmB,IAApB,CAAyBC,iBAAzB,EApCY,CAqCZ;;AACApB,IAAAA,mBAAmB,CAACM,OAApB,CAA6BiB,YAAD,IAAkB;AAC1C3B,MAAAA,kBAAkB,CAACU,OAAnB,CAA4BkB,QAAD,IAAc;AACrC,cAAMC,YAAY,GAAGR,UAAU,CAACM,YAAY,CAACC,QAAD,CAAb,CAAV,IAAsC,CAA3D;AACArB,QAAAA,iBAAiB,CAACqB,QAAD,CAAjB,GAA8B,CAACP,UAAU,CAACd,iBAAiB,CAACqB,QAAD,CAAlB,CAAV,IAA2C,CAA5C,IAAiDC,YAA/E;AACH,OAHD;AAIH,KALD;AAMAzB,IAAAA,mBAAmB,CAACmB,IAApB,CAAyBhB,iBAAzB,EA5CY,CA6CZ;;AACA,UAAMuB,qBAAqB,GAAG,EAA9B;AACA,UAAMC,mBAAmB,GAAG;AAAEC,MAAAA,YAAY,EAAE,gBAAhB;AAAkCC,MAAAA,YAAY,EAAE;AAAhD,KAA5B;AACA,UAAMC,qBAAqB,GAAG,EAA9B;AACAnC,IAAAA,iBAAiB,CAACW,OAAlB,CAA2BR,SAAD,IAAe;AACrC;AACA;AACArB,MAAAA,aAAa,CAAC+B,MAAd,CAAsBuB,OAAD,IAAa;AAC9B,cAAMC,WAAW,GAAGpE,KAAK,CAACmE,OAAO,CAACE,YAAT,EAAuB,YAAvB,EAAqC,IAAIpB,IAAJ,EAArC,CAAzB;AACA,eAAO/C,WAAW,CAACgC,SAAD,EAAYkC,WAAZ,CAAlB;AACH,OAHD,EAGG1B,OAHH,CAGY4B,YAAD,IAAkB;AACzB,cAAM;AAAEC,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAmBF,YAAzB;AACA,cAAMG,aAAa,GAAG,EAAtB;AACAA,QAAAA,aAAa,CAAC,cAAD,CAAb,GAAgCF,IAAhC;AACAE,QAAAA,aAAa,CAAC,QAAD,CAAb,GAA2BpB,UAAU,CAACmB,MAAD,CAAV,IAAsB,CAAjD;AACAC,QAAAA,aAAa,CAAC,OAAD,CAAb,GAAyBxE,MAAM,CAACiC,SAAD,EAAY,WAAZ,CAA/B;AACAgC,QAAAA,qBAAqB,CAACX,IAAtB,CAA2BkB,aAA3B;AACH,OAVD;AAWH,KAdD;AAeA,UAAMC,gBAAgB,GAAG,IAAIC,GAAJ,CAAQT,qBAAqB,CAACjC,GAAtB,CAA2BwC,aAAD,IAAmBA,aAAa,CAACT,YAA3D,CAAR,CAAzB;AACAU,IAAAA,gBAAgB,CAAChC,OAAjB,CAA0BkC,WAAD,IAAiB;AACtCV,MAAAA,qBAAqB,CAACtB,MAAtB,CAA8B6B,aAAD,IAAmBA,aAAa,CAACT,YAAd,KAA+BY,WAA/E,EAA4FlC,OAA5F,CAAqG+B,aAAD,IAAmB;AACnH;AACA,cAAMI,mBAAmB,GAAGf,qBAAqB,CAACgB,IAAtB,CAA4BX,OAAD,IAAaA,OAAO,CAACH,YAAR,KAAyBY,WAAjE,CAA5B;;AACA,YAAI,OAAOC,mBAAP,KAA+B,WAAnC,EAAgD;AAC5CA,UAAAA,mBAAmB,CAACJ,aAAa,CAACM,KAAf,CAAnB,GAA2C,CAAC1B,UAAU,CAACwB,mBAAmB,CAACJ,aAAa,CAACM,KAAf,CAApB,CAAV,IAAwD,CAAzD,IAA8D1B,UAAU,CAACoB,aAAa,CAACD,MAAf,CAAnH;AACAK,UAAAA,mBAAmB,CAAC7C,kBAAkB,CAACA,kBAAkB,CAACG,MAAnB,GAA4B,CAA7B,CAAnB,CAAnB,GAAyE,CAACkB,UAAU,CAACwB,mBAAmB,CAAC7C,kBAAkB,CAACA,kBAAkB,CAACG,MAAnB,GAA4B,CAA7B,CAAnB,CAApB,CAAV,IAAsF,CAAvF,IAA4FkB,UAAU,CAACoB,aAAa,CAACD,MAAf,CAA/K;AACH,SAHD,MAGO;AACH,gBAAMQ,yBAAyB,GAAG,EAAlC;AACAA,UAAAA,yBAAyB,CAAC,cAAD,CAAzB,GAA4CJ,WAA5C;AACA,gBAAMK,uBAAuB,GAAG3E,mBAAmB,CAACwE,IAApB,CAAyB,CAAC;AAAEI,YAAAA;AAAF,WAAD,KAAYA,EAAE,KAAKN,WAA5C,KAA4D,EAA5F;AACAI,UAAAA,yBAAyB,CAAC,cAAD,CAAzB,GAA4CC,uBAAuB,CAACE,YAApE;AACAH,UAAAA,yBAAyB,CAACP,aAAa,CAACM,KAAf,CAAzB,GAAiD1B,UAAU,CAACoB,aAAa,CAACD,MAAf,CAAV,IAAoC,CAArF;AACAQ,UAAAA,yBAAyB,CAAChD,kBAAkB,CAACA,kBAAkB,CAACG,MAAnB,GAA4B,CAA7B,CAAnB,CAAzB,GAA+EkB,UAAU,CAACoB,aAAa,CAACD,MAAf,CAAV,IAAoC,CAAnH;AACAV,UAAAA,qBAAqB,CAACP,IAAtB,CAA2ByB,yBAA3B;AACH;AACJ,OAfD;AAgBH,KAjBD;AAkBAlB,IAAAA,qBAAqB,CAACpB,OAAtB,CAA+B+B,aAAD,IAAmB;AAC7CzC,MAAAA,kBAAkB,CAACU,OAAnB,CAA4BkB,QAAD,IAAc;AACrC,cAAMwB,aAAa,GAAG/B,UAAU,CAACoB,aAAa,CAACb,QAAD,CAAd,CAAV,IAAuC,CAA7D;AACAG,QAAAA,mBAAmB,CAACH,QAAD,CAAnB,GAAgC,CAACP,UAAU,CAACU,mBAAmB,CAACH,QAAD,CAApB,CAAV,IAA6C,CAA9C,IAAmDwB,aAAnF;AACH,OAHD;AAIH,KALD;AAMAtB,IAAAA,qBAAqB,CAACP,IAAtB,CAA2BQ,mBAA3B,EAzFY,CA0FZ;;AACA/B,IAAAA,kBAAkB,CAACU,OAAnB,CAA4BkB,QAAD,IAAc;AACrCpB,MAAAA,oBAAoB,CAACoB,QAAD,CAApB,GAAiC,CAACP,UAAU,CAACd,iBAAiB,CAACqB,QAAD,CAAlB,CAAV,IAA2C,CAA5C,KAAkDP,UAAU,CAACU,mBAAmB,CAACH,QAAD,CAApB,CAAV,IAA6C,CAA/F,CAAjC;AACH,KAFD;AAGApC,IAAAA,YAAY,CAACQ,kBAAD,CAAZ;AACAZ,IAAAA,kBAAkB,CAACoB,oBAAD,CAAlB;AACAlB,IAAAA,mBAAmB,CAACc,mBAAD,CAAnB;AACAV,IAAAA,qBAAqB,CAACoC,qBAAD,CAArB;AACH,GAlGQ,EAkGN,CAACjD,aAAD,EAAgBI,YAAhB,CAlGM,CAAT;AAoGAhC,EAAAA,SAAS,CAAC,MAAM;AACZ6B,IAAAA,gBAAgB,CAACL,QAAD,CAAhB;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAxB,EAAAA,SAAS,CAAC,MAAM;AACZiC,IAAAA,eAAe,CAACV,cAAD,CAAf;AACH,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIAvB,EAAAA,SAAS,CAAC,MAAM;AACZ+B,IAAAA,aAAa,CAACN,MAAD,CAAb;AACH,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT,CAxHE,CA4HF;;AACA,QAAM2E,gCAAgC,GAAGtE,UAAU,CAC9CmC,MADoC,CAC7B,CAACC,KAAD,EAAQmC,YAAR,KAAyBnC,KAAK,IAAIE,UAAU,CAACiC,YAAY,CAACC,gBAAd,CAAV,IAA6C,CAAjD,CADD,EACsD,CADtD,CAAzC;AAEA,QAAMC,6BAA6B,GAAGzE,UAAU,CAC3CmC,MADiC,CAC1B,CAACC,KAAD,EAAQmC,YAAR,KAAyBnC,KAAK,IAAIE,UAAU,CAACiC,YAAY,CAACG,aAAd,CAAV,IAA0C,CAA9C,CADJ,EACsD,CADtD,CAAtC;AAEA,QAAMC,mCAAmC,GAAG3E,UAAU,CACjDmC,MADuC,CAChC,CAACC,KAAD,EAAQmC,YAAR,KAAyBnC,KAAK,IAAIE,UAAU,CAACiC,YAAY,CAACK,mBAAd,CAAV,IAAgD,CAApD,CADE,EACsD,CADtD,CAA5C;;AAGA,QAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACtCA,IAAAA,KAAK,CAACC,cAAN,GADsC,CAEtC;;AACA,UAAMC,oBAAoB,GAAGvF,cAAc,CACtCoC,MADwB,CACjB,CAAC;AAAEoD,MAAAA;AAAF,KAAD,KAAqBrE,cAAc,KAAK,KAAnB,GAA2B,IAA3B,GAAkCqE,WAAW,KAAKrE,cADtD,CAA7B;AAEA,UAAMsE,gBAAgB,GAAGxF,QAAQ,CAC5BmC,MADoB,CACb,CAAC;AAAEoD,MAAAA;AAAF,KAAD,KAAqBrE,cAAc,KAAK,KAAnB,GAA2B,IAA3B,GAAkCqE,WAAW,KAAKrE,cAD1D,CAAzB;AAEA,UAAMuE,cAAc,GAAGxF,MAAM,CACxBkC,MADkB,CACX,CAAC;AAAEoD,MAAAA;AAAF,KAAD,KAAqBrE,cAAc,KAAK,KAAnB,GAA2B,IAA3B,GAAkCqE,WAAW,KAAKrE,cAD5D,CAAvB;AAEAT,IAAAA,eAAe,CAAC6E,oBAAD,CAAf;AACA/E,IAAAA,aAAa,CAACkF,cAAD,CAAb;AACApF,IAAAA,gBAAgB,CAACmF,gBAAD,CAAhB;AACH,GAZD;;AAcA,QAAME,eAAe,GAAIN,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACC,cAAN;AACAlE,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAE,IAAAA,aAAa,CAAC,eAAD,CAAb;AACAhB,IAAAA,gBAAgB,CAACL,QAAD,CAAhB;AACAS,IAAAA,eAAe,CAACV,cAAD,CAAf;AACAQ,IAAAA,aAAa,CAACN,MAAD,CAAb;AACH,GAPD;;AASA,sBACI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,6BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,OAAO,EAAE,CAFb;AAGI,IAAA,UAAU,EAAC,QAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,GAAG,EAAE,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAE,6BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,eAQI,oBAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,OAAO,EAAE,CAFb;AAGI,IAAA,IAAI,MAHR;AAII,IAAA,UAAU,EAAC,QAJf;AAKI,IAAA,SAAS,EAAC,KALd;AAMI,IAAA,GAAG,EAAE,CANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,yBAAD;AACI,IAAA,WAAW,EAAE,eADjB;AAEI,IAAA,UAAU,EAAE,2BAFhB;AAGI,IAAA,WAAW,EAAE,2BAHjB;AAII,IAAA,SAAS,EAAEa,SAJf;AAKI,IAAA,WAAW,EAAEF,gBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CARJ,eAiBI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,yBAAD;AACI,IAAA,WAAW,EAAE,iBADjB;AAEI,IAAA,UAAU,EAAE,8BAFhB;AAGI,IAAA,WAAW,EAAE,0BAHjB;AAII,IAAA,SAAS,EAAEE,SAJf;AAKI,IAAA,WAAW,EAAEE,kBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAjBJ,CARJ,eAmCI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AACI,IAAA,MAAM,EAAE,CADZ;AAEI,IAAA,YAAY,EAAC,cAFjB;AAGI,IAAA,WAAW,EAAC,UAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI;AACI,IAAA,SAAS,EAAEb,OAAO,CAACwF,IADvB;AAEI,IAAA,EAAE,EAAC,mBAFP;AAGI,IAAA,QAAQ,EAAER,sBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,OAAO,EAAE,CAFb;AAGI,IAAA,OAAO,EAAC,QAHZ;AAII,IAAA,SAAS,EAAC,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,MAAM,MAFV;AAGI,IAAA,OAAO,EAAC,UAHZ;AAII,IAAA,IAAI,EAAC,iBAJT;AAKI,IAAA,KAAK,EAAC,iBALV;AAMI,IAAA,EAAE,EAAC,iBANP;AAOI,IAAA,KAAK,EAAEjE,cAPX;AAQI,IAAA,QAAQ,EAAGkE,KAAD,IAAW;AACjBjE,MAAAA,iBAAiB,CACbiE,KAAK,CAACQ,MAAN,CAAaC,KADA,CAAjB;AAGH,KAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAcI,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAE,KAAf;AAAsB,IAAA,KAAK,EAAE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAdJ,EAeK3F,UAAU,CAACsB,GAAX,CAAe,CAACsE,QAAD,EAAWC,KAAX,kBACZ,oBAAC,QAAD;AACI,IAAA,GAAG,EAAEA,KADT;AAEI,IAAA,KAAK,EAAED,QAAQ,CAACrB,EAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKqB,QAAQ,CAACE,GAJd,CADH,CAfL,CADJ,CANJ,eAgCI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,OAAO,EAAC,UAFZ;AAGI,IAAA,MAAM,MAHV;AAII,IAAA,EAAE,EAAC,aAJP;AAKI,IAAA,IAAI,EAAC,aALT;AAMI,IAAA,KAAK,EAAC,QANV;AAOI,IAAA,KAAK,EAAE5E,UAPX;AAQI,IAAA,QAAQ,EAAGgE,KAAD,IAAW;AACjB/D,MAAAA,aAAa,CACT+D,KAAK,CAACQ,MAAN,CAAaC,KADJ,CAAb;AAGH,KAZL;AAaI,IAAA,eAAe,EAAE;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAbrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcKrG,2BAA2B,CAAC4B,GAA5B,CAAgC,CAAC0E,YAAD,EAAeH,KAAf,kBAC7B,oBAAC,QAAD;AACI,IAAA,GAAG,EAAEA,KADT;AAEI,IAAA,KAAK,EAAEG,YAAY,CAACzB,EAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKyB,YAAY,CAACC,IAJlB,CADH,CAdL,CADJ,CAhCJ,CALJ,eA+DI,oBAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,OAAO,EAAE,CAFb;AAGI,IAAA,IAAI,MAHR;AAII,IAAA,OAAO,EAAC,UAJZ;AAKI,IAAA,UAAU,EAAC,QALf;AAMI,IAAA,SAAS,EAAC,KANd;AAOI,IAAA,GAAG,EAAE,CAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAGf,KAAD,IAAWD,sBAAsB,CAACC,KAAD,CAD9C;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,IAAI,EAAC,mBAHT;AAII,IAAA,KAAK,EAAC,SAJV;AAKI,IAAA,OAAO,EAAC,WALZ;AAMI,IAAA,IAAI,EAAC,QANT;AAOI,IAAA,SAAS,eAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CATJ,eAsBI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAGA,KAAD,IAAWM,eAAe,CAACN,KAAD,CADvC;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,IAAI,EAAC,mBAHT;AAII,IAAA,KAAK,EAAC,SAJV;AAKI,IAAA,OAAO,EAAC,WALZ;AAMI,IAAA,IAAI,EAAC,QANT;AAOI,IAAA,SAAS,eAAE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CAtBJ,CA/DJ,CALJ,CADJ,CAnCJ,eA+II,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAA6B,IAAA,OAAO,EAAE,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAC,KAA/B;AAAqC,IAAA,OAAO,EAAE,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAER,gCAAzB;AAA2D,IAAA,KAAK,EAAC,kCAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEG,6BAAzB;AAAwD,IAAA,KAAK,EAAC,+BAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEE,mCAAzB;AAA8D,IAAA,KAAK,EAAC,qCAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,eAMI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAE;AAAEmB,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,GAAG,EAAE,OAAzB;AAAkC,IAAA,aAAa,EAAC,KAAhD;AAAsD,IAAA,CAAC,EAAE,CAAzD;AAA4D,IAAA,OAAO,EAAC,UAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAC,QAAT;AAAkB,IAAA,KAAK,EAAE,CAAzB;AAA4B,IAAA,SAAS,EAAC,MAAtC;AAA6C,IAAA,QAAQ,EAAE,CAAvD;AAA0D,IAAA,CAAC,EAAE,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAKQtF,SAAS,CAACU,GAAV,CAAc,CAAC2B,QAAD,EAAW4C,KAAX,kBACV,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAiB,IAAA,KAAK,EAAE,CAAxB;AAA2B,IAAA,SAAS,EAAC,MAArC;AAA4C,IAAA,QAAQ,EAAE,CAAtD;AAAyD,IAAA,CAAC,EAAE,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5C,QADL,WADJ,CALR,CADJ,EAcQvC,gBAAgB,CAACY,GAAjB,CAAqB,CAAC6E,eAAD,EAAkBC,WAAlB,KAAkC;AACnD,UAAMC,YAAY,GAAGzF,SAAS,CAACU,GAAV,CAAc,CAAC2B,QAAD,EAAW4C,KAAX,kBAC/B,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAiB,MAAA,KAAK,EAAE,CAAxB;AAA2B,MAAA,SAAS,EAAC,MAArC;AAA4C,MAAA,QAAQ,EAAE,CAAtD;AAAyD,MAAA,CAAC,EAAE,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK1G,iBAAiB,CAACG,MAAlB,CAAyB6G,eAAe,CAAClD,QAAD,CAAxC,CADL,CADiB,CAArB;AAKA,wBACI,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAC,MAAb;AAAoB,MAAA,GAAG,EAAEmD,WAAzB;AAAsC,MAAA,aAAa,EAAC,KAApD;AAA0D,MAAA,CAAC,EAAE,CAA7D;AAAgE,MAAA,OAAO,EAAC,kBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAE,CAA7B;AAAgC,MAAA,GAAG,EAAEA,WAAW,GAAG,IAAnD;AAAyD,MAAA,QAAQ,EAAE,CAAnE;AAAsE,MAAA,CAAC,EAAE,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,eAAe,CAAC,aAAD,CADpB,CADJ,EAIKE,YAJL,CADJ;AAQH,GAdD,CAdR,CADJ,eAgCI;AAAK,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,GAAG,EAAE,WAAzB;AAAsC,IAAA,aAAa,EAAC,KAApD;AAA0D,IAAA,CAAC,EAAE,CAA7D;AAAgE,IAAA,OAAO,EAAC,UAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAC,WAAT;AAAqB,IAAA,KAAK,EAAE,CAA5B;AAA+B,IAAA,SAAS,EAAC,MAAzC;AAAgD,IAAA,QAAQ,EAAE,CAA1D;AAA6D,IAAA,CAAC,EAAE,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAKQtF,SAAS,CAACU,GAAV,CAAc,CAAC2B,QAAD,EAAW4C,KAAX,kBACV,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAiB,IAAA,KAAK,EAAE,CAAxB;AAA2B,IAAA,SAAS,EAAC,MAArC;AAA4C,IAAA,QAAQ,EAAE,CAAtD;AAAyD,IAAA,CAAC,EAAE,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5C,QADL,CADJ,CALR,CADJ,EAcQnC,kBAAkB,CAACQ,GAAnB,CAAuB,CAACgF,gBAAD,EAAmBF,WAAnB,KAAmC;AACtD,UAAMC,YAAY,GAAGzF,SAAS,CAACU,GAAV,CAAc,CAAC2B,QAAD,EAAW4C,KAAX,kBAC/B,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAiB,MAAA,KAAK,EAAE,CAAxB;AAA2B,MAAA,SAAS,EAAC,MAArC;AAA4C,MAAA,QAAQ,EAAE,CAAtD;AAAyD,MAAA,CAAC,EAAE,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK1G,iBAAiB,CAACG,MAAlB,CAAyBgH,gBAAgB,CAACrD,QAAD,CAAhB,IAA8B,CAAvD,CADL,CADiB,CAArB;AAKA,wBACI,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAC,MAAb;AAAoB,MAAA,GAAG,EAAEmD,WAAzB;AAAsC,MAAA,aAAa,EAAC,KAApD;AAA0D,MAAA,CAAC,EAAE,CAA7D;AAAgE,MAAA,OAAO,EAAC,kBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAE,CAA7B;AAAgC,MAAA,GAAG,EAAEA,WAAW,GAAG,OAAnD;AAA4D,MAAA,QAAQ,EAAE,CAAtE;AAAyE,MAAA,CAAC,EAAE,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKE,gBAAgB,CAAC,cAAD,CADrB,CADJ,EAIKD,YAJL,CADJ;AAQH,GAdD,CAdR,CAhCJ,eA+DI;AAAK,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,GAAG,EAAE,WAAzB;AAAsC,IAAA,aAAa,EAAC,KAApD;AAA0D,IAAA,CAAC,EAAE,CAA7D;AAAgE,IAAA,OAAO,EAAC,UAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAC,WAAT;AAAqB,IAAA,KAAK,EAAE,CAA5B;AAA+B,IAAA,SAAS,EAAC,MAAzC;AAAgD,IAAA,QAAQ,EAAE,CAA1D;AAA6D,IAAA,CAAC,EAAE,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAKQtF,SAAS,CAACU,GAAV,CAAc,CAAC2B,QAAD,EAAW4C,KAAX,kBACV,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAiB,IAAA,KAAK,EAAE,CAAxB;AAA2B,IAAA,SAAS,EAAC,MAArC;AAA4C,IAAA,QAAQ,EAAE,CAAtD;AAAyD,IAAA,CAAC,EAAE,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5C,QADL,CADJ,CALR,CADJ,eAcQ,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,GAAG,EAAE,KAAzB;AAAgC,IAAA,aAAa,EAAC,KAA9C;AAAoD,IAAA,CAAC,EAAE,CAAvD;AAA0D,IAAA,OAAO,EAAC,kBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAE,CAA7B;AAAgC,IAAA,GAAG,EAAE,OAArC;AAA8C,IAAA,QAAQ,EAAE,CAAxD;AAA2D,IAAA,CAAC,EAAE,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAIKrC,SAAS,CAACU,GAAV,CAAc,CAAC2B,QAAD,EAAW4C,KAAX,kBACX,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAiB,IAAA,KAAK,EAAE,CAAxB;AAA2B,IAAA,SAAS,EAAC,MAArC;AAA4C,IAAA,QAAQ,EAAE,CAAtD;AAAyD,IAAA,CAAC,EAAE,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK1G,iBAAiB,CAACG,MAAlB,CAAyBkB,eAAe,CAACyC,QAAD,CAAf,IAA6B,CAAtD,CADL,CADH,CAJL,CAdR,CA/DJ,CANJ,CA/IJ,CADJ,CADJ;AAuPH,CAvZD;;AA0ZA,MAAMsD,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AACH5G,IAAAA,cAAc,EAAE2G,KAAK,CAAC3G,cADnB;AAEHC,IAAAA,QAAQ,EAAE0G,KAAK,CAAC1G,QAFb;AAGHE,IAAAA,UAAU,EAAEwG,KAAK,CAACxG,UAHf;AAIHD,IAAAA,MAAM,EAAEyG,KAAK,CAACzG;AAJX,GAAP;AAMH,CAPD;;AASAH,uBAAuB,GAAGd,OAAO,CAACyH,eAAD,CAAP,CAAyB3G,uBAAzB,CAA1B;AAEA,eAAeb,UAAU,CAACa,uBAAD,CAAzB","sourcesContent":["import Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport { getTransactionsFilterOptions, getExpensesCategories, currencyFormatter, getMonthlyDatesFromPeriod } from \"../assets/commonAssets\";\nimport { parse, format, isSameMonth } from 'date-fns'\nimport { ExportStatementToExcelBtn } from \"../components/ExportToExcelBtn\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\n\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\nconst EXPENSES_CATEGORIES = getExpensesCategories()\n\n\nlet PropertyIncomeStatement = ({\n    rentalPayments,\n    expenses,\n    leases,\n    properties,\n}) => {\n    const classes = commonStyles();\n    const [expensesItems, setExpensesItems] = useState([]);\n    const [leaseItems, setLeaseItems] = useState([]);\n    const [paymentItems, setPaymentItems] = useState([]);\n    const [netIncomeObject, setNetIncomeObject] = useState({});\n    const [incomeStatements, setIncomeStatements] = useState([]);\n    const [headCells, setHeadCells] = useState([]);\n    const [expensesStatements, setExpensesStatements] = useState([]);\n    const [propertyFilter, setPropertyFilter] = useState(\"all\");\n    const [fromFilter, setFromFilter] = useState('month-to-date');\n\n    useEffect(() => {\n        //go back [numMonths] months from current date\n        const eachPastMonthDate = getMonthlyDatesFromPeriod(fromFilter);\n        const headCellsForMonths = [...eachPastMonthDate.map((monthDate) => format(monthDate, 'MMMM yyyy')), `Total as of ${format(eachPastMonthDate[eachPastMonthDate.length - 1], 'MMMM yyyy')}`]\n        // calculate income from rent\n        const incomeMappedByMonth = []\n        const rentalIncomeObject = { income_type: 'Rental Income' }\n        const totalIncomeObject = { income_type: 'Total Income' }\n        const totalNetIncomeObject = { income_type: 'Net Income' }\n        let totalRentalIncomeForPeriod = 0\n        eachPastMonthDate.forEach((monthDate) => {\n            //get rentalPayments recorded in the same month and year as monthDate\n            const totalRentalIncomeForMonth = paymentItems.filter(({ payment_type }) => payment_type === 'rent')\n                .filter((payment) => {\n                    const paymentDate = parse(payment.payment_date, 'yyyy-MM-dd', new Date())\n                    return isSameMonth(monthDate, paymentDate)\n                }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payment_amount) || 0), 0)\n            totalRentalIncomeForPeriod += totalRentalIncomeForMonth\n            rentalIncomeObject[format(monthDate, 'MMMM yyyy')] = totalRentalIncomeForMonth\n        })\n        rentalIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalRentalIncomeForPeriod\n        incomeMappedByMonth.push(rentalIncomeObject)\n        // calculate income from other sources\n        const otherIncomeObject = { income_type: 'Other Income' }\n        let totalOtherIncomeForPeriod = 0\n        eachPastMonthDate.forEach((monthDate) => {\n            //get rentalPayments recorded in the same month and year as monthDate\n            const totalOtherIncome = paymentItems.filter(({ payment_type }) => payment_type !== 'rent')\n                .filter((payment) => {\n                    const paymentDate = parse(payment.payment_date, 'yyyy-MM-dd', new Date())\n                    return isSameMonth(monthDate, paymentDate)\n                }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payment_amount) || 0), 0)\n            totalOtherIncomeForPeriod += totalOtherIncome\n            otherIncomeObject[format(monthDate, 'MMMM yyyy')] = totalOtherIncome\n        })\n        otherIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalOtherIncomeForPeriod\n        incomeMappedByMonth.push(otherIncomeObject)\n        // get total of all incomes\n        incomeMappedByMonth.forEach((incomeObject) => {\n            headCellsForMonths.forEach((headCell) => {\n                const incomeAmount = parseFloat(incomeObject[headCell]) || 0\n                totalIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) + incomeAmount\n            })\n        })\n        incomeMappedByMonth.push(totalIncomeObject)\n        //calucate expenses\n        const expensesMappedByMonth = []\n        const totalExpensesObject = { expense_type: 'Total Expenses', expense_name: \"Total Expenses\" }\n        const expenseObjectsInMonth = []\n        eachPastMonthDate.forEach((monthDate) => {\n            //get expenses recorded in the same month and year\n            //as monthDate\n            expensesItems.filter((expense) => {\n                const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date())\n                return isSameMonth(monthDate, expenseDate)\n            }).forEach((monthExpense) => {\n                const { type, amount } = monthExpense\n                const expenseObject = {};\n                expenseObject['expense_type'] = type\n                expenseObject['amount'] = (parseFloat(amount) || 0)\n                expenseObject['month'] = format(monthDate, 'MMMM yyyy')\n                expenseObjectsInMonth.push(expenseObject)\n            })\n        })\n        const expensesTypesSet = new Set(expenseObjectsInMonth.map((expenseObject) => expenseObject.expense_type))\n        expensesTypesSet.forEach((expenseType) => {\n            expenseObjectsInMonth.filter((expenseObject) => expenseObject.expense_type === expenseType).forEach((expenseObject) => {\n                //make or obtain an object and push it to the expenses array\n                const expenseObjectByType = expensesMappedByMonth.find((expense) => expense.expense_type === expenseType)\n                if (typeof expenseObjectByType !== 'undefined') {\n                    expenseObjectByType[expenseObject.month] = (parseFloat(expenseObjectByType[expenseObject.month]) || 0) + parseFloat(expenseObject.amount)\n                    expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]] = (parseFloat(expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]]) || 0) + parseFloat(expenseObject.amount)\n                } else {\n                    const totalExpensesByTypeObject = {}\n                    totalExpensesByTypeObject['expense_type'] = expenseType\n                    const EXPENSE_IN_FULL_DETAILS = EXPENSES_CATEGORIES.find(({ id }) => id === expenseType) || {}\n                    totalExpensesByTypeObject['expense_name'] = EXPENSE_IN_FULL_DETAILS.displayValue\n                    totalExpensesByTypeObject[expenseObject.month] = parseFloat(expenseObject.amount) || 0\n                    totalExpensesByTypeObject[headCellsForMonths[headCellsForMonths.length - 1]] = parseFloat(expenseObject.amount) || 0\n                    expensesMappedByMonth.push(totalExpensesByTypeObject)\n                }\n            })\n        })\n        expensesMappedByMonth.forEach((expenseObject) => {\n            headCellsForMonths.forEach((headCell) => {\n                const expenseAmount = parseFloat(expenseObject[headCell]) || 0\n                totalExpensesObject[headCell] = (parseFloat(totalExpensesObject[headCell]) || 0) + expenseAmount\n            })\n        })\n        expensesMappedByMonth.push(totalExpensesObject)\n        // get net income\n        headCellsForMonths.forEach((headCell) => {\n            totalNetIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) - (parseFloat(totalExpensesObject[headCell]) || 0)\n        })\n        setHeadCells(headCellsForMonths)\n        setNetIncomeObject(totalNetIncomeObject);\n        setIncomeStatements(incomeMappedByMonth);\n        setExpensesStatements(expensesMappedByMonth);\n    }, [expensesItems, paymentItems])\n\n    useEffect(() => {\n        setExpensesItems(expenses)\n    }, [expenses])\n\n    useEffect(() => {\n        setPaymentItems(rentalPayments)\n    }, [rentalPayments])\n\n    useEffect(() => {\n        setLeaseItems(leases)\n    }, [leases])\n\n    //for each lease item calculate the amount of the above liabilities\n    const TOTAL_SECURITY_DEPOSIT_LIABILITY = leaseItems\n        .reduce((total, currentValue) => total + (parseFloat(currentValue.security_deposit) || 0), 0);\n    const TOTAL_WATER_DEPOSIT_LIABILITY = leaseItems\n        .reduce((total, currentValue) => total + (parseFloat(currentValue.water_deposit) || 0), 0);\n    const TOTAL_ELECTRICITY_DEPOSIT_LIABILITY = leaseItems\n        .reduce((total, currentValue) => total + (parseFloat(currentValue.electricity_deposit) || 0), 0);\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the rentalPayments according to the search criteria here\n        const filteredTransactions = rentalPayments\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        const filteredExpenses = expenses\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        const filteredLeases = leases\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        setPaymentItems(filteredTransactions)\n        setLeaseItems(filteredLeases)\n        setExpensesItems(filteredExpenses)\n    };\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setPropertyFilter(\"all\");\n        setFromFilter(\"month-to-date\");\n        setExpensesItems(expenses)\n        setPaymentItems(rentalPayments)\n        setLeaseItems(leases)\n    };\n\n    return (\n        <Layout pageTitle=\"Properties Income Statement\">\n            <Grid\n                container\n                spacing={3}\n                alignItems=\"center\"\n            >\n                <Grid item key={2}>\n                    <PageHeading text={'Properties Income Statement'} />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <ExportStatementToExcelBtn\n                            displayText={\"Export Income\"}\n                            reportName={'Properties Income Records'}\n                            reportTitle={'Properties Income Records'}\n                            headCells={headCells}\n                            dataToPrint={incomeStatements}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ExportStatementToExcelBtn\n                            displayText={\"Export Expenses\"}\n                            reportName={\"Properties Expenses  Records\"}\n                            reportTitle={\"Properties Expenses Data\"}\n                            headCells={headCells}\n                            dataToPrint={expensesStatements}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"contactSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                                direction=\"row\"\n                            >\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        variant=\"outlined\"\n                                        name=\"property_filter\"\n                                        label=\"Select Property\"\n                                        id=\"property_filter\"\n                                        value={propertyFilter}\n                                        onChange={(event) => {\n                                            setPropertyFilter(\n                                                event.target.value\n                                            );\n                                        }}\n                                    >\n                                        <MenuItem key={\"all\"} value={\"all\"}>All</MenuItem>\n                                        {properties.map((property, index) => (\n                                            <MenuItem\n                                                key={index}\n                                                value={property.id}\n                                            >\n                                                {property.ref}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        select\n                                        id=\"from_filter\"\n                                        name=\"from_filter\"\n                                        label=\"Period\"\n                                        value={fromFilter}\n                                        onChange={(event) => {\n                                            setFromFilter(\n                                                event.target.value\n                                            );\n                                        }}\n                                        InputLabelProps={{ shrink: true }}>\n                                        {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                            <MenuItem\n                                                key={index}\n                                                value={filterOption.id}\n                                            >\n                                                {filterOption.text}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                            <Grid\n                                container\n                                spacing={2}\n                                item\n                                justify=\"flex-end\"\n                                alignItems=\"center\"\n                                direction=\"row\"\n                                key={1}\n                            >\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => handleSearchFormSubmit(event)}\n                                        type=\"submit\"\n                                        form=\"contactSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<SearchIcon />}\n                                    >\n                                        SEARCH\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => resetSearchForm(event)}\n                                        type=\"reset\"\n                                        form=\"contactSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<UndoIcon />}\n                                    >\n                                        RESET\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n                <Grid item container sm={12} spacing={2}>\n                    <Grid item container direction=\"row\" spacing={2}>\n                        <InfoDisplayPaper value={TOTAL_SECURITY_DEPOSIT_LIABILITY} title=\"Total Security Deposit Liability\" />\n                        <InfoDisplayPaper value={TOTAL_WATER_DEPOSIT_LIABILITY} title=\"Total Water Deposit Liability\" />\n                        <InfoDisplayPaper value={TOTAL_ELECTRICITY_DEPOSIT_LIABILITY} title=\"Total Electricity Deposit Liability\" />\n                    </Grid>\n                    <Grid item sm={12}>\n                        <div style={{ width: '100%' }}>\n                            <Box display=\"flex\" key={'adadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                                <Box key=\"first1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    Income\n                                </Box>\n                                {\n                                    headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {headCell} (Ksh)\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            {\n                                incomeStatements.map((incomeStatement, incomeIndex) => {\n                                    const otherColumns = headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {currencyFormatter.format(incomeStatement[headCell])}\n                                        </Box>\n                                    )\n                                    return (\n                                        <Box display=\"flex\" key={incomeIndex} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                            <Box textAlign=\"left\" width={1} key={incomeIndex + \"jl\"} flexGrow={1} p={1} >\n                                                {incomeStatement['income_type']}\n                                            </Box>\n                                            {otherColumns}\n                                        </Box>\n                                    )\n                                })\n                            }\n                        </div>\n                        <div style={{ width: '100%' }}>\n                            <Box display=\"flex\" key={'adlaldadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                                <Box key=\"faldirst1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    Expenses\n                                </Box>\n                                {\n                                    headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {headCell}\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            {\n                                expensesStatements.map((expenseStatement, incomeIndex) => {\n                                    const otherColumns = headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {currencyFormatter.format(expenseStatement[headCell] || 0)}\n                                        </Box>\n                                    )\n                                    return (\n                                        <Box display=\"flex\" key={incomeIndex} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                            <Box textAlign=\"left\" width={1} key={incomeIndex + \"iiajl\"} flexGrow={1} p={1} >\n                                                {expenseStatement['expense_name']}\n                                            </Box>\n                                            {otherColumns}\n                                        </Box>\n                                    )\n                                })\n                            }\n                        </div>\n                        <div style={{ width: '100%' }}>\n                            <Box display=\"flex\" key={'adlaldadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                                <Box key=\"faldirst1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    Net Income\n                                </Box>\n                                {\n                                    headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {headCell}\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            {\n                                <Box display=\"flex\" key={'kjb'} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                    <Box textAlign=\"left\" width={1} key={\"iiajl\"} flexGrow={1} p={1} >\n                                        Net Income\n                                    </Box>\n                                    {headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {currencyFormatter.format(netIncomeObject[headCell] || 0)}\n                                        </Box>\n                                    )\n                                    }\n                                </Box>\n\n                            }\n                        </div>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Layout>\n    );\n};\n\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        rentalPayments: state.rentalPayments,\n        expenses: state.expenses,\n        properties: state.properties,\n        leases: state.leases,\n    };\n};\n\nPropertyIncomeStatement = connect(mapStateToProps)(PropertyIncomeStatement);\n\nexport default withRouter(PropertyIncomeStatement);\n"]},"metadata":{},"sourceType":"module"}