{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/meterReadings/MeterReadingInputForm.js\";\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from '@mui/material/Button';\nimport TextField from \"@mui/material/TextField\";\nimport CustomSnackbar from './CustomSnackBar';\nimport { Formik } from \"formik\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport * as Yup from \"yup\";\nimport CustomCircularProgress from \"./CustomCircularProgress\";\nimport { format, startOfToday } from \"date-fns\";\nimport CancelButton from \"./CancelButton\";\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst ProductSchema = Yup.object().shape({\n  product_name: Yup.string().trim().required(\"product Type is required\"),\n  product_quantity: Yup.number().required(\"Quantity is required\").min(0, \"Amount must be greater than 0\"),\n  product_purchase_price: Yup.number().min(0, \"Amount must be greater than 0\"),\n  purchase_date: Yup.date().required(\"Date Required\")\n});\n\nconst ProductInputForm = ({\n  history,\n  ProductToEdit,\n  handleItemSubmit\n}) => {\n  const ProductValues = {\n    id: ProductToEdit.id,\n    purchase_date: ProductToEdit.purchase_date || defaultDate,\n    product_name: ProductToEdit.product_name || '',\n    product_quantity: ProductToEdit.product_quantity || '',\n    product_purchase_price: ProductToEdit.product_purchase_price || ''\n  };\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: ProductValues,\n    enableReinitialize: true,\n    validationSchema: ProductSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      try {\n        const Product = {\n          id: values.id,\n          product_name: values.product_name,\n          product_quantity: values.product_quantity,\n          product_purchase_price: values.product_purchase_price,\n          purchase_date: values.purchase_date\n        };\n        await handleItemSubmit(Product, \"products\");\n        resetForm({});\n\n        if (values.id) {\n          history.goBack();\n        }\n\n        setStatus({\n          sent: true,\n          msg: \"Product Saved.\"\n        });\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    method: \"post\",\n    id: \"productInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"stretch\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 33\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 46\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"purchase_date\",\n    name: \"purchase_date\",\n    label: \"Purchase Date\",\n    value: values.purchase_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.purchase_date && touched.purchase_date,\n    helperText: touched.purchase_date && errors.purchase_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"product_name\",\n    name: \"product_name\",\n    label: \"Product Name\",\n    value: values.product_name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.product_name && touched.product_name,\n    helperText: touched.product_name && errors.product_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"product_quantity\",\n    name: \"product_quantity\",\n    label: \"Product Quantity\",\n    value: values.product_quantity,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.product_quantity && touched.product_quantity,\n    helperText: touched.product_quantity && errors.product_quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"product_purchase_price\",\n    name: \"product_purchase_price\",\n    label: \"Purchase Price\",\n    value: values.product_purchase_price,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.product_purchase_price && touched.product_purchase_price,\n    helperText: touched.product_purchase_price && errors.product_purchase_price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(CancelButton, {\n    onClickFunction: () => history.goBack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 52\n      }\n    }),\n    form: \"productInputForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 37\n    }\n  }, \"Save\")))))));\n};\n\nexport default ProductInputForm;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/meterReadings/MeterReadingInputForm.js"],"names":["React","Grid","Button","TextField","CustomSnackbar","Formik","SaveIcon","Yup","CustomCircularProgress","format","startOfToday","CancelButton","defaultDate","ProductSchema","object","shape","product_name","string","trim","required","product_quantity","number","min","product_purchase_price","purchase_date","date","ProductInputForm","history","ProductToEdit","handleItemSubmit","ProductValues","id","values","resetForm","setStatus","Product","goBack","sent","msg","error","status","handleSubmit","errors","touched","handleChange","handleBlur","isSubmitting","shrink"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from '@mui/material/Button';\nimport TextField from \"@mui/material/TextField\";\nimport CustomSnackbar from './CustomSnackBar';\nimport { Formik } from \"formik\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport * as Yup from \"yup\";\nimport CustomCircularProgress from \"./CustomCircularProgress\";\nimport { format, startOfToday } from \"date-fns\";\nimport CancelButton from \"./CancelButton\";\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\n\nconst ProductSchema = Yup.object().shape({\n    product_name: Yup.string().trim().required(\"product Type is required\"),\n    product_quantity: Yup.number().required(\"Quantity is required\").min(0, \"Amount must be greater than 0\"),\n    product_purchase_price: Yup.number().min(0, \"Amount must be greater than 0\"),\n    purchase_date: Yup.date().required(\"Date Required\"),\n});\n\n\nconst ProductInputForm = ({ history, ProductToEdit, handleItemSubmit }) => {\n\n    const ProductValues = {\n        id: ProductToEdit.id,\n        purchase_date: ProductToEdit.purchase_date || defaultDate,\n        product_name: ProductToEdit.product_name || '',\n        product_quantity: ProductToEdit.product_quantity || '',\n        product_purchase_price: ProductToEdit.product_purchase_price || '',\n    }\n\n    return (\n        <Formik\n            initialValues={ProductValues}\n            enableReinitialize\n            validationSchema={ProductSchema}\n            onSubmit={async (values, { resetForm, setStatus }) => {\n                try {\n                    const Product = {\n                        id: values.id,\n                        product_name: values.product_name,\n                        product_quantity: values.product_quantity,\n                        product_purchase_price: values.product_purchase_price,\n                        purchase_date: values.purchase_date,\n                    };\n                    await handleItemSubmit(Product, \"products\")\n                    resetForm({})\n                    if (values.id) {\n                        history.goBack();\n                    }\n                    setStatus({ sent: true, msg: \"Product Saved.\" })\n                } catch (error) {\n                    setStatus({ sent: false, msg: `Error! ${error}.` })\n                }\n            }}\n        >\n            {({\n                values,\n                status,\n                handleSubmit,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                isSubmitting,\n            }) => (\n                <form\n                    method=\"post\"\n                    id=\"productInputForm\"\n                    onSubmit={handleSubmit}\n                >\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"center\"\n                        alignItems=\"stretch\"\n                        direction=\"column\"\n                    >\n                        {\n                            status && status.msg && (\n                                <CustomSnackbar\n                                    variant={status.sent ? \"success\" : \"error\"}\n                                    message={status.msg}\n                                />\n                            )\n                        }\n                        {\n                            isSubmitting && (<CustomCircularProgress open={true} />)\n                        }\n                        <Grid item container spacing={2}>\n                            <Grid item>\n                                <TextField\n                                    fullWidth\n                                    type=\"date\"\n                                    InputLabelProps={{ shrink: true }}\n                                    variant=\"outlined\"\n                                    id=\"purchase_date\"\n                                    name=\"purchase_date\"\n                                    label=\"Purchase Date\"\n                                    value={values.purchase_date}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error={errors.purchase_date && touched.purchase_date}\n                                    helperText={touched.purchase_date && errors.purchase_date}\n\n                                />\n                            </Grid>\n                            <Grid item>\n                                <TextField\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    id=\"product_name\"\n                                    name=\"product_name\"\n                                    label=\"Product Name\"\n                                    value={values.product_name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error={errors.product_name && touched.product_name}\n                                    helperText={touched.product_name && errors.product_name}\n                                />\n                            </Grid>\n                            <Grid item>\n                                <TextField\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    id=\"product_quantity\"\n                                    name=\"product_quantity\"\n                                    label=\"Product Quantity\"\n                                    value={values.product_quantity}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error={errors.product_quantity && touched.product_quantity}\n                                    helperText={touched.product_quantity && errors.product_quantity}\n                                />\n                            </Grid>\n                            <Grid item>\n                                <TextField\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    id=\"product_purchase_price\"\n                                    name=\"product_purchase_price\"\n                                    label=\"Purchase Price\"\n                                    value={values.product_purchase_price}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error={errors.product_purchase_price && touched.product_purchase_price}\n                                    helperText={touched.product_purchase_price && errors.product_purchase_price}\n                                />\n                            </Grid>\n                            <Grid item container>\n                                <Grid item>\n                                    <CancelButton onClickFunction={() => history.goBack()}/>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        type=\"submit\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<SaveIcon />}\n                                        form=\"productInputForm\"\n                                        disabled={isSubmitting}\n                                    >\n                                        Save\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nexport default ProductInputForm;\n\n"]},"metadata":{},"sourceType":"module"}