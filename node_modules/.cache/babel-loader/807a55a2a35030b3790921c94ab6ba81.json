{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/property/ChargeInputModal.js\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { getPaymentOptions } from \"../../assets/commonAssets.js\";\nimport { commonStyles } from \"../commonStyles.js\";\nimport { DialogTitle } from \"@material-ui/core\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst RENT_CYCLES = getPaymentOptions();\nconst CHARGE_TYPES = [{\n  id: 'one_time_charge',\n  name: 'One Time Charge'\n}, {\n  id: 'recurring_charge',\n  name: 'Recurring Charge'\n}];\nconst UnitChargeSchema = Yup.object().shape({\n  type: Yup.string().trim().required('Charge Type is Required'),\n  due_date: Yup.date().required(\"Due Date is required\"),\n  charge_label: Yup.string().trim().required(\"Charge Name is required\"),\n  frequency: Yup.string().trim().when('type', {\n    is: 'recurring_charge',\n    then: Yup.string().required('Frequency to make charge is required')\n  }),\n  amount: Yup.number().typeError('Amount must be a number').positive(\"Amount must be a positive number\").required('Charge Amount is required')\n});\nexport default function FormDialog(props) {\n  const classes = commonStyles();\n  const {\n    open,\n    handleClose,\n    handleItemSubmit,\n    chargeValues\n  } = props;\n  return /*#__PURE__*/React.createElement(Dialog, {\n    fullWidth: true,\n    maxWidth: \"sm\",\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, chargeValues.charge_label ? 'Edit Charge' : 'Add Charge'), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: chargeValues,\n    validationSchema: UnitChargeSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      try {\n        let unitChargeToSave = {\n          id: values.id,\n          property_id: values.property_id,\n          unit_id: values.unit_id,\n          charge_label: values.charge_label,\n          type: values.type,\n          amount: values.amount,\n          due_date: values.due_date,\n          frequency: values.frequency\n        }; //save the unit charge with unit and property details\n\n        await handleItemSubmit(unitChargeToSave, 'unit-charges');\n        resetForm({\n          type: values.type\n        });\n        setStatus({\n          sent: true,\n          msg: \"Unit charge saved successfully\"\n        });\n\n        if (values.id) {\n          handleClose();\n        }\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"chargeInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 41\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 54\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    select: true,\n    name: \"type\",\n    label: \"Charge Type\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.type,\n    error: errors.type && touched.type,\n    helperText: touched.type && errors.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 41\n    }\n  }, CHARGE_TYPES.map((type, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: type.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 49\n    }\n  }, type.name)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Charge Name\",\n    variant: \"outlined\",\n    type: \"text\",\n    value: values.charge_label,\n    name: \"charge_label\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.charge_label && touched.charge_label,\n    helperText: touched.charge_label && errors.charge_label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"due_date\",\n    type: \"date\",\n    name: \"due_date\",\n    label: \"Next Due Date\",\n    value: values.due_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    InputLabelProps: {\n      shrink: true\n    },\n    error: errors.due_date && touched.due_date,\n    helperText: touched.due_date && errors.due_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Amount\",\n    variant: \"outlined\",\n    type: \"text\",\n    value: values.amount,\n    name: \"amount\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.amount && touched.amount,\n    helperText: touched.amount && errors.amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 41\n    }\n  })), values.type === 'recurring_charge' ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    select: true,\n    name: \"frequency\",\n    label: \"Frequency\",\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.frequency,\n    error: errors.frequency && touched.frequency,\n    helperText: touched.frequency && errors.frequency,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 49\n    }\n  }, RENT_CYCLES.map((frequency, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: frequency,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 57\n    }\n  }, frequency)))) : null), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 56\n      }\n    }),\n    onClick: () => {\n      handleClose();\n    },\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 41\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 56\n      }\n    }),\n    form: \"chargeInputForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 41\n    }\n  }, \"Save\"))))))));\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/property/ChargeInputModal.js"],"names":["React","Grid","MenuItem","TextField","Button","SaveIcon","CancelIcon","Dialog","DialogContent","CustomSnackbar","Yup","Formik","getPaymentOptions","commonStyles","DialogTitle","CustomCircularProgress","RENT_CYCLES","CHARGE_TYPES","id","name","UnitChargeSchema","object","shape","type","string","trim","required","due_date","date","charge_label","frequency","when","is","then","amount","number","typeError","positive","FormDialog","props","classes","open","handleClose","handleItemSubmit","chargeValues","values","resetForm","setStatus","unitChargeToSave","property_id","unit_id","sent","msg","error","status","handleSubmit","touched","errors","handleChange","handleBlur","isSubmitting","form","map","index","shrink","buttonBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { getPaymentOptions } from \"../../assets/commonAssets.js\";\nimport { commonStyles } from \"../commonStyles.js\";\nimport { DialogTitle } from \"@material-ui/core\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\nconst RENT_CYCLES = getPaymentOptions();\nconst CHARGE_TYPES = [\n    { id: 'one_time_charge', name: 'One Time Charge' },\n    { id: 'recurring_charge', name: 'Recurring Charge' },\n];\n\nconst UnitChargeSchema = Yup.object().shape({\n    type: Yup.string().trim().required('Charge Type is Required'),\n    due_date: Yup.date().required(\"Due Date is required\"),\n    charge_label: Yup.string().trim().required(\"Charge Name is required\"),\n    frequency: Yup.string().trim().when('type', { is: 'recurring_charge', then: Yup.string().required('Frequency to make charge is required') }),\n    amount: Yup.number().typeError('Amount must be a number').positive(\"Amount must be a positive number\").required('Charge Amount is required'),\n});\n\nexport default function FormDialog(props) {\n    const classes = commonStyles();\n    const { open, handleClose, handleItemSubmit, chargeValues } = props\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle>{chargeValues.charge_label ? 'Edit Charge' : 'Add Charge'}</DialogTitle>\n            <DialogContent>\n                <Formik\n                    initialValues={chargeValues}\n                    validationSchema={UnitChargeSchema}\n                    onSubmit={async (values, { resetForm, setStatus }) => {\n                        try {\n                            let unitChargeToSave = {\n                                id: values.id,\n                                property_id: values.property_id,\n                                unit_id: values.unit_id,\n                                charge_label: values.charge_label,\n                                type: values.type,\n                                amount: values.amount,\n                                due_date: values.due_date,\n                                frequency: values.frequency,\n                            };\n                            //save the unit charge with unit and property details\n                            await handleItemSubmit(unitChargeToSave, 'unit-charges')\n                            resetForm({ type: values.type });\n                            setStatus({ sent: true, msg: \"Unit charge saved successfully\" })\n                            if (values.id) {\n                                handleClose()\n                            }\n                        } catch (error) {\n                            setStatus({ sent: false, msg: `Error! ${error}.` })\n                        }\n                    }}>\n                    {({\n                        values,\n                        status,\n                        handleSubmit,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                    }) => (\n                        <form\n                            className={classes.form}\n                            method=\"post\"\n                            id=\"chargeInputForm\"\n                            onSubmit={handleSubmit}\n                        >\n                            <Grid\n                                container\n                                direction=\"column\"\n                                spacing={2}\n                            >\n                                {\n                                    status && status.msg && (\n                                        <CustomSnackbar\n                                            variant={status.sent ? \"success\" : \"error\"}\n                                            message={status.msg}\n                                        />\n                                    )\n                                }\n                                {\n                                    isSubmitting && (<CustomCircularProgress open={true} />)\n                                }\n                                <Grid container item direction=\"column\" spacing={2}>\n                                    <Grid item xs={12} md>\n                                        <TextField\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            select\n                                            name='type'\n                                            label=\"Charge Type\"\n                                            onBlur={handleBlur}\n                                            onChange={handleChange}\n                                            value={values.type}\n                                            error={errors.type && touched.type}\n                                            helperText={touched.type && errors.type}\n                                        >\n                                            {CHARGE_TYPES.map((type, index) => (\n                                                <MenuItem key={index} value={type.id}>\n                                                    {type.name}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </Grid>\n                                    <Grid item xs={12} md>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Charge Name\"\n                                            variant=\"outlined\"\n                                            type=\"text\"\n                                            value={values.charge_label}\n                                            name='charge_label'\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            error={errors.charge_label && touched.charge_label}\n                                            helperText={touched.charge_label && errors.charge_label}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md>\n                                        <TextField\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            id=\"due_date\"\n                                            type=\"date\"\n                                            name='due_date'\n                                            label=\"Next Due Date\"\n                                            value={values.due_date}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            InputLabelProps={{ shrink: true }}\n                                            error={errors.due_date && touched.due_date}\n                                            helperText={touched.due_date && errors.due_date}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Amount\"\n                                            variant=\"outlined\"\n                                            type=\"text\"\n                                            value={values.amount}\n                                            name='amount'\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            error={errors.amount && touched.amount}\n                                            helperText={touched.amount && errors.amount}\n                                        />\n                                    </Grid>\n                                    {\n                                        values.type === 'recurring_charge' ?\n                                            <Grid item xs={12} md>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    select\n                                                    name='frequency'\n                                                    label=\"Frequency\"\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    value={values.frequency}\n                                                    error={errors.frequency && touched.frequency}\n                                                    helperText={touched.frequency && errors.frequency}\n                                                >\n                                                    {RENT_CYCLES.map((frequency, index) => (\n                                                        <MenuItem key={index} value={frequency}>\n                                                            {frequency}\n                                                        </MenuItem>\n                                                    ))}\n                                                </TextField>\n                                            </Grid>\n                                            : null}\n                                </Grid>\n                                <Grid\n                                    item\n                                    container\n                                    direction=\"row\"\n                                    className={classes.buttonBox}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            color=\"secondary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<CancelIcon />}\n                                            onClick={() => { handleClose() }}\n                                            disableElevation\n                                        >\n                                            Cancel\n\t\t\t\t\t\t\t\t\t        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            type=\"submit\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SaveIcon />}\n                                            form=\"chargeInputForm\"\n                                            disabled={isSubmitting}\n                                        >\n                                            Save\n\t\t\t\t\t\t\t\t        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    )}\n                </Formik>\n            </DialogContent>\n        </Dialog >\n    );\n}\n"]},"metadata":{},"sourceType":"module"}