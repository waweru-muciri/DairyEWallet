{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/charges/EditCreditNote.js\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst PaymentSchema = Yup.object().shape({\n  tenant_id: Yup.string().trim().required('Tenant is required'),\n  credit_issue_date: Yup.date().required('Credit Date is Required'),\n  credit_amount: Yup.number().typeError('Amount must be a number').positive(\"Amount must be a positive number\").required(\"Credit amount is required\"),\n  memo: Yup.string().trim().max(50, \"Memo details should be less than 50 characters\").default('')\n});\nexport default function CreditNoteEditForm({\n  open,\n  handleClose,\n  creditNoteToEdit,\n  handleItemSubmit\n}) {\n  const classes = commonStyles();\n  const paymentValues = {\n    id: creditNoteToEdit.id,\n    credit_amount: creditNoteToEdit.credit_amount || \"\",\n    memo: creditNoteToEdit.memo || \"\",\n    credit_issue_date: creditNoteToEdit.credit_issue_date || defaultDate,\n    tenant_id: creditNoteToEdit.tenant_id\n  };\n  return /*#__PURE__*/React.createElement(Dialog, {\n    fullWidth: true,\n    maxWidth: \"sm\",\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Edit Credit Note\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: paymentValues,\n    enableReinitialize: true,\n    validationSchema: PaymentSchema,\n    onSubmit: async (values, {\n      setStatus\n    }) => {\n      try {\n        const creditNote = {\n          id: values.id,\n          credit_amount: values.credit_amount,\n          memo: values.memo,\n          credit_issue_date: values.credit_issue_date,\n          tenant_id: values.tenant_id\n        };\n        await handleItemSubmit(creditNote, 'credit-notes');\n        setStatus({\n          sent: true,\n          msg: \"Credit Note saved successfully.\"\n        });\n        handleClose();\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"CreditNoteEditForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 41\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 54\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"credit_issue_date\",\n    type: \"date\",\n    name: \"credit_issue_date\",\n    label: \"Credit Issue Date\",\n    value: values.credit_issue_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    InputLabelProps: {\n      shrink: true\n    },\n    error: errors.credit_issue_date && touched.credit_issue_date,\n    helperText: touched.credit_issue_date && errors.credit_issue_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"text\",\n    variant: \"outlined\",\n    name: \"credit_amount\",\n    id: \"credit_amount\",\n    label: \"Credit Amount\",\n    value: values.credit_amount,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.credit_amount && touched.credit_amount,\n    helperText: touched.credit_amount && errors.credit_amount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"text\",\n    multiline: true,\n    rows: 2,\n    variant: \"outlined\",\n    name: \"memo\",\n    id: \"memo\",\n    label: \"Credit Note Details/Memo\",\n    value: values.memo,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.memo && touched.memo,\n    helperText: \"Include details for the credit note here (max 50)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    justify: \"flex-start\",\n    direction: \"row\",\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 56\n      }\n    }),\n    onClick: () => {\n      handleClose();\n    },\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 41\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 56\n      }\n    }),\n    form: \"CreditNoteEditForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 41\n    }\n  }, \"Save Note\"))))))));\n}\n;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/charges/EditCreditNote.js"],"names":["React","Grid","TextField","Button","SaveIcon","CancelIcon","CustomSnackbar","Formik","commonStyles","Yup","format","startOfToday","CustomCircularProgress","Dialog","DialogTitle","DialogContent","defaultDate","PaymentSchema","object","shape","tenant_id","string","trim","required","credit_issue_date","date","credit_amount","number","typeError","positive","memo","max","default","CreditNoteEditForm","open","handleClose","creditNoteToEdit","handleItemSubmit","classes","paymentValues","id","values","setStatus","creditNote","sent","msg","error","status","handleSubmit","touched","errors","handleChange","handleBlur","isSubmitting","form","shrink","buttonBox"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\nconst PaymentSchema = Yup.object().shape({\n    tenant_id: Yup.string().trim().required('Tenant is required'),\n    credit_issue_date: Yup.date().required('Credit Date is Required'),\n    credit_amount: Yup.number().typeError('Amount must be a number')\n        .positive(\"Amount must be a positive number\")\n        .required(\"Credit amount is required\"),\n    memo: Yup.string().trim().max(50, \"Memo details should be less than 50 characters\").default(''),\n});\n\n\nexport default function CreditNoteEditForm({ open, handleClose, creditNoteToEdit, handleItemSubmit }) {\n    const classes = commonStyles();\n    const paymentValues = {\n        id: creditNoteToEdit.id,\n        credit_amount: creditNoteToEdit.credit_amount || \"\",\n        memo: creditNoteToEdit.memo || \"\",\n        credit_issue_date: creditNoteToEdit.credit_issue_date || defaultDate,\n        tenant_id: creditNoteToEdit.tenant_id,\n    };\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">Edit Credit Note</DialogTitle>\n            <DialogContent>\n                <Formik\n                    initialValues={paymentValues}\n                    enableReinitialize validationSchema={PaymentSchema}\n                    onSubmit={async (values, { setStatus }) => {\n                        try {\n                            const creditNote = {\n                                id: values.id,\n                                credit_amount: values.credit_amount,\n                                memo: values.memo,\n                                credit_issue_date: values.credit_issue_date,\n                                tenant_id: values.tenant_id,\n                            };\n                            await handleItemSubmit(creditNote, 'credit-notes')\n                            setStatus({ sent: true, msg: \"Credit Note saved successfully.\" })\n                            handleClose();\n                        } catch (error) {\n                            setStatus({ sent: false, msg: `Error! ${error}.` })\n                        }\n                    }}\n                >\n                    {({\n                        values,\n                        status,\n                        handleSubmit,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                    }) => (\n                        <form\n                            className={classes.form}\n                            method=\"post\"\n                            id=\"CreditNoteEditForm\"\n                            onSubmit={handleSubmit}\n                        >\n                            <Grid container spacing={2} direction=\"column\">\n                                {\n                                    status && status.msg && (\n                                        <CustomSnackbar\n                                            variant={status.sent ? \"success\" : \"error\"}\n                                            message={status.msg}\n                                        />\n                                    )\n                                }\n                                {\n                                    isSubmitting && (<CustomCircularProgress open={true} />)\n                                }\n                                <Grid item>\n                                    <TextField\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        id=\"credit_issue_date\"\n                                        type=\"date\"\n                                        name=\"credit_issue_date\"\n                                        label=\"Credit Issue Date\"\n                                        value={values.credit_issue_date}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        InputLabelProps={{ shrink: true }}\n                                        error={errors.credit_issue_date && touched.credit_issue_date}\n                                        helperText={touched.credit_issue_date && errors.credit_issue_date}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        fullWidth\n                                        type=\"text\"\n                                        variant=\"outlined\"\n                                        name=\"credit_amount\"\n                                        id=\"credit_amount\"\n                                        label=\"Credit Amount\"\n                                        value={values.credit_amount}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        error={errors.credit_amount && touched.credit_amount}\n                                        helperText={touched.credit_amount && errors.credit_amount}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        fullWidth\n                                        type=\"text\"\n                                        multiline\n                                        rows={2}\n                                        variant=\"outlined\"\n                                        name=\"memo\"\n                                        id=\"memo\"\n                                        label=\"Credit Note Details/Memo\"\n                                        value={values.memo}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        error={errors.memo && touched.memo}\n                                        helperText={\"Include details for the credit note here (max 50)\"}\n                                    />\n                                </Grid>\n                                <Grid\n                                    item\n                                    container\n                                    justify=\"flex-start\"\n                                    direction=\"row\"\n                                    className={classes.buttonBox}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            color=\"secondary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<CancelIcon />}\n                                            onClick={() => { handleClose() }}\n                                            disableElevation\n                                        >\n                                            Cancel\n\t\t\t\t\t\t\t\t\t</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            type=\"submit\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SaveIcon />}\n                                            form=\"CreditNoteEditForm\"\n                                            disabled={isSubmitting}\n                                        >\n                                            Save Note\n\t\t\t\t\t\t\t\t</Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    )\n                    }\n                </Formik >\n            </DialogContent>\n        </Dialog >\n    );\n};\n"]},"metadata":{},"sourceType":"module"}