{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/CustomSnackbar.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { amber, green } from \"@material-ui/core/colors\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n  const {\n    className,\n    message,\n    onClose,\n    variant,\n    ...other\n  } = props;\n  const Icon = variantIcon[variant];\n  return /*#__PURE__*/React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }), message),\n    action: [/*#__PURE__*/React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      className: classes.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }))]\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }));\n}\n\nMySnackbarContentWrapper.propTypes = {\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf([\"error\", \"info\", \"success\", \"warning\"]).isRequired\n};\nexport default function CustomizedSnackbar(props) {\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"center\"\n    },\n    open: open,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    onClose: handleClose,\n    variant: props.variant ? props.variant : \"success\",\n    message: props.message ? props.message : \"This is a success message!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/CustomSnackbar.js"],"names":["React","PropTypes","clsx","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","variantIcon","success","warning","error","info","useStyles1","theme","backgroundColor","palette","dark","primary","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","propTypes","string","func","oneOf","isRequired","CustomizedSnackbar","open","setOpen","useState","handleClose","event","reason","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { amber, green } from \"@material-ui/core/colors\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst useStyles1 = makeStyles((theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: \"flex\",\n        alignItems: \"center\",\n    },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n    const classes = useStyles1();\n    const { className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nMySnackbarContentWrapper.propTypes = {\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf([\"error\", \"info\", \"success\", \"warning\"])\n        .isRequired,\n};\n\nexport default function CustomizedSnackbar(props) {\n    const [open, setOpen] = React.useState(true);\n\n    const handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <Snackbar\n            anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"center\",\n            }}\n            open={open}\n            autoHideDuration={6000}\n            onClose={handleClose}\n        >\n            <MySnackbarContentWrapper\n                onClose={handleClose}\n                variant={props.variant ? props.variant : \"success\"}\n                message={\n                    props.message ? props.message : \"This is a success message!\"\n                }\n            />\n        </Snackbar>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}