{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/components/meterReadings/MeterReadingInputForm.js\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CustomSnackbar from '../CustomSnackbar';\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { getMeterTypes } from \"../../assets/commonAssets.js\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd');\nconst MeterReadingSchema = Yup.object().shape({\n  meter_type: Yup.string().trim().required(\"Meter Type is required\"),\n  prior_value: Yup.number().required(\"Prior Value is required\").min(0, \"Amount must be greater than 0\"),\n  current_value: Yup.number().min(Yup.ref('prior_value'), 'Current Value must be greater than prior value').required(\"Current Value is required\"),\n  unit_charge: Yup.number().min(0, \"Amount must be greater than 0\").required(\"Unit Charge is Required\"),\n  base_charge: Yup.number().min(0, \"Amount must be greater than 0\").default(0),\n  reading_date: Yup.date().required(\"Reading Date Required\"),\n  property_id: Yup.string().trim().required(\"Property is Required\"),\n  unit_id: Yup.string().trim().required(\"Unit is Required\")\n});\nconst METER_OPTIONS = getMeterTypes();\n\nconst MeterReadingInputForm = ({\n  properties,\n  unitsWithActiveLeases,\n  history,\n  meterReadingToEdit,\n  handleItemSubmit\n}) => {\n  const classes = commonStyles();\n  const meterReadingValues = {\n    id: meterReadingToEdit.id,\n    property_id: meterReadingToEdit.property_id || '',\n    unit_id: meterReadingToEdit.unit_id || '',\n    reading_date: meterReadingToEdit.reading_date || defaultDate,\n    prior_value: meterReadingToEdit.prior_value || '',\n    current_value: meterReadingToEdit.current_value || '',\n    base_charge: meterReadingToEdit.base_charge || '',\n    unit_charge: meterReadingToEdit.unit_charge || '',\n    meter_type: meterReadingToEdit.meter_type || '',\n    tenant_id: meterReadingToEdit.tenant_id || ''\n  };\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: meterReadingValues,\n    enableReinitialize: true,\n    validationSchema: MeterReadingSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setStatus\n    }) => {\n      try {\n        const meterReading = {\n          id: values.id,\n          meter_type: values.meter_type,\n          prior_value: values.prior_value,\n          current_value: values.current_value,\n          base_charge: values.base_charge,\n          unit_charge: values.unit_charge,\n          unit_id: values.unit_id,\n          property_id: values.property_id,\n          tenant_id: unitsWithActiveLeases.find(unit => unit.id === values.unit_id).tenant_id,\n          reading_date: values.reading_date\n        }; //assign usage values to meter reading\n\n        meterReading.usage = values.current_value - values.prior_value;\n        meterReading.amount = meterReading.usage * parseFloat(values.unit_charge) + parseFloat(values.base_charge);\n        await handleItemSubmit(meterReading, \"meter_readings\");\n\n        if (!values.id) {\n          const newMeterReadingCharge = {\n            charge_amount: meterReading.amount,\n            charge_date: values.reading_date,\n            charge_label: `${values.meter_type} meter charge`,\n            charge_type: values.meter_type,\n            due_date: values.reading_date,\n            tenant_id: meterReading.tenant_id,\n            unit_id: values.unit_id,\n            property_id: values.property_id\n          };\n          await handleItemSubmit(newMeterReadingCharge, \"transactions-charges\");\n        }\n\n        resetForm({});\n\n        if (values.id) {\n          history.goBack();\n        }\n\n        setStatus({\n          sent: true,\n          msg: \"Meter reading and charge saved.\"\n        });\n      } catch (error) {\n        setStatus({\n          sent: false,\n          msg: `Error! ${error}.`\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    status,\n    handleSubmit,\n    setFieldValue,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    method: \"post\",\n    id: \"meterInputForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"stretch\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, status && status.msg && /*#__PURE__*/React.createElement(CustomSnackbar, {\n    variant: status.sent ? \"success\" : \"error\",\n    message: status.msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }), isSubmitting && /*#__PURE__*/React.createElement(CustomCircularProgress, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"property_id\",\n    label: \"Property\",\n    id: \"property_id\",\n    onChange: event => {\n      setFieldValue('property_id', event.target.value);\n      setFieldValue('unit_id', '');\n    },\n    value: values.property_id,\n    error: errors.property_id && touched.property_id,\n    helperText: touched.property_id && errors.property_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, properties.map((property, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: property.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, property.ref)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    name: \"unit_id\",\n    label: \"Unit\",\n    id: \"unit_id\",\n    onChange: handleChange,\n    value: values.unit_id,\n    error: errors.unit_id && touched.unit_id,\n    helperText: touched.unit_id && errors.unit_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, unitsWithActiveLeases.filter(({\n    property_id\n  }) => property_id === values.property_id).map((propertyUnit, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: propertyUnit.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }, propertyUnit.ref))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"date\",\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    id: \"reading_date\",\n    name: \"reading_date\",\n    label: \"Reading Date\",\n    value: values.reading_date,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.reading_date && touched.reading_date,\n    helperText: touched.reading_date && errors.reading_date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    select: true,\n    variant: \"outlined\",\n    id: \"meter_type\",\n    name: \"meter_type\",\n    label: \"Meter Type\",\n    value: values.meter_type,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.meter_type && touched.meter_type,\n    helperText: touched.meter_type && errors.meter_type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }, METER_OPTIONS.map((meter_type, meterTypeIndex) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: meterTypeIndex,\n    value: meter_type.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }\n  }, meter_type.displayValue)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"prior_value\",\n    name: \"prior_value\",\n    label: \"Prior Value\",\n    value: values.prior_value,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.prior_value && touched.prior_value,\n    helperText: touched.prior_value && errors.prior_value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"current_value\",\n    name: \"current_value\",\n    label: \"Current Value\",\n    value: values.current_value,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.current_value && touched.current_value,\n    helperText: touched.current_value && errors.current_value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    disabled: true,\n    variant: \"outlined\",\n    id: \"usage\",\n    name: \"usage\",\n    label: \"Usage\",\n    value: values.current_value - values.prior_value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"base_charge\",\n    name: \"base_charge\",\n    label: \"Base Charge\",\n    value: values.base_charge,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.base_charge && touched.base_charge,\n    helperText: touched.base_charge && errors.base_charge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"unit_charge\",\n    name: \"unit_charge\",\n    label: \"Unit Charge\",\n    value: values.unit_charge,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.unit_charge && touched.unit_charge,\n    helperText: touched.unit_charge && errors.unit_charge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    className: classes.buttonBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(CancelIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 30\n      }\n    }),\n    onClick: () => history.goBack(),\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  }, \"Cancel\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 30\n      }\n    }),\n    form: \"meterInputForm\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }\n  }, \"Save\"))))));\n};\n\nexport default MeterReadingInputForm;","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/components/meterReadings/MeterReadingInputForm.js"],"names":["React","Grid","Button","TextField","MenuItem","CustomSnackbar","Formik","commonStyles","SaveIcon","CancelIcon","getMeterTypes","Yup","format","startOfToday","CustomCircularProgress","defaultDate","MeterReadingSchema","object","shape","meter_type","string","trim","required","prior_value","number","min","current_value","ref","unit_charge","base_charge","default","reading_date","date","property_id","unit_id","METER_OPTIONS","MeterReadingInputForm","properties","unitsWithActiveLeases","history","meterReadingToEdit","handleItemSubmit","classes","meterReadingValues","id","tenant_id","values","resetForm","setStatus","meterReading","find","unit","usage","amount","parseFloat","newMeterReadingCharge","charge_amount","charge_date","charge_label","charge_type","due_date","goBack","sent","msg","error","status","handleSubmit","setFieldValue","errors","touched","handleChange","handleBlur","isSubmitting","form","event","target","value","map","property","index","filter","propertyUnit","shrink","meterTypeIndex","displayValue","buttonBox"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAAoD,SAClDC,aADkD,QAE7C,8BAF6C;AAGpD,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,UAArC;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AAEA,MAAMC,WAAW,GAAGH,MAAM,CAACC,YAAY,EAAb,EAAiB,YAAjB,CAA1B;AAGA,MAAMG,kBAAkB,GAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AAC5CC,EAAAA,UAAU,EAAER,GAAG,CAACS,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,CAA6B,wBAA7B,CADgC;AAE5CC,EAAAA,WAAW,EAAEZ,GAAG,CAACa,MAAJ,GAAaF,QAAb,CAAsB,yBAAtB,EAAiDG,GAAjD,CAAqD,CAArD,EAAuD,+BAAvD,CAF+B;AAG5CC,EAAAA,aAAa,EAAEf,GAAG,CAACa,MAAJ,GAAaC,GAAb,CAAiBd,GAAG,CAACgB,GAAJ,CAAQ,aAAR,CAAjB,EAAyC,gDAAzC,EAA2FL,QAA3F,CAAoG,2BAApG,CAH6B;AAI5CM,EAAAA,WAAW,EAAEjB,GAAG,CAACa,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAmB,+BAAnB,EAAoDH,QAApD,CAA6D,yBAA7D,CAJ+B;AAK5CO,EAAAA,WAAW,EAAElB,GAAG,CAACa,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAmB,+BAAnB,EAAoDK,OAApD,CAA4D,CAA5D,CAL+B;AAM5CC,EAAAA,YAAY,EAAEpB,GAAG,CAACqB,IAAJ,GAAWV,QAAX,CAAoB,uBAApB,CAN8B;AAO5CW,EAAAA,WAAW,EAAEtB,GAAG,CAACS,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,CAA6B,sBAA7B,CAP+B;AAQ5CY,EAAAA,OAAO,EAAEvB,GAAG,CAACS,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,CAA6B,kBAA7B;AARmC,CAAnB,CAA3B;AAWA,MAAMa,aAAa,GAAGzB,aAAa,EAAnC;;AAEA,MAAM0B,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,qBAAd;AAAqCC,EAAAA,OAArC;AAA8CC,EAAAA,kBAA9C;AAAkEC,EAAAA;AAAlE,CAAD,KAA0F;AAEtH,QAAMC,OAAO,GAAGnC,YAAY,EAA5B;AACA,QAAMoC,kBAAkB,GAAG;AACzBC,IAAAA,EAAE,EAAEJ,kBAAkB,CAACI,EADE;AAEzBX,IAAAA,WAAW,EAAEO,kBAAkB,CAACP,WAAnB,IAAkC,EAFtB;AAGzBC,IAAAA,OAAO,EAAEM,kBAAkB,CAACN,OAAnB,IAA8B,EAHd;AAIzBH,IAAAA,YAAY,EAAES,kBAAkB,CAACT,YAAnB,IAAmChB,WAJxB;AAKzBQ,IAAAA,WAAW,EAAEiB,kBAAkB,CAACjB,WAAnB,IAAkC,EALtB;AAMzBG,IAAAA,aAAa,EAAEc,kBAAkB,CAACd,aAAnB,IAAoC,EAN1B;AAOzBG,IAAAA,WAAW,EAAEW,kBAAkB,CAACX,WAAnB,IAAkC,EAPtB;AAQzBD,IAAAA,WAAW,EAAEY,kBAAkB,CAACZ,WAAnB,IAAkC,EARtB;AASzBT,IAAAA,UAAU,EAAEqB,kBAAkB,CAACrB,UAAnB,IAAiC,EATpB;AAUzB0B,IAAAA,SAAS,EAAEL,kBAAkB,CAACK,SAAnB,IAAgC;AAVlB,GAA3B;AAaA,sBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAEF,kBADjB;AAEE,IAAA,kBAAkB,MAFpB;AAGE,IAAA,gBAAgB,EAAE3B,kBAHpB;AAIE,IAAA,QAAQ,EAAE,OAAO8B,MAAP,EAAe;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAf,KAA4C;AACpD,UAAI;AACF,cAAMC,YAAY,GAAG;AACnBL,UAAAA,EAAE,EAAEE,MAAM,CAACF,EADQ;AAEnBzB,UAAAA,UAAU,EAAE2B,MAAM,CAAC3B,UAFA;AAGnBI,UAAAA,WAAW,EAAEuB,MAAM,CAACvB,WAHD;AAInBG,UAAAA,aAAa,EAAEoB,MAAM,CAACpB,aAJH;AAKnBG,UAAAA,WAAW,EAAEiB,MAAM,CAACjB,WALD;AAMnBD,UAAAA,WAAW,EAAEkB,MAAM,CAAClB,WAND;AAOnBM,UAAAA,OAAO,EAAEY,MAAM,CAACZ,OAPG;AAQnBD,UAAAA,WAAW,EAAEa,MAAM,CAACb,WARD;AASnBY,UAAAA,SAAS,EAAEP,qBAAqB,CAACY,IAAtB,CAA2BC,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYE,MAAM,CAACZ,OAAtD,EAA+DW,SATvD;AAUnBd,UAAAA,YAAY,EAAEe,MAAM,CAACf;AAVF,SAArB,CADE,CAaF;;AACAkB,QAAAA,YAAY,CAACG,KAAb,GAAqBN,MAAM,CAACpB,aAAP,GAAuBoB,MAAM,CAACvB,WAAnD;AACA0B,QAAAA,YAAY,CAACI,MAAb,GAAuBJ,YAAY,CAACG,KAAb,GAAqBE,UAAU,CAACR,MAAM,CAAClB,WAAR,CAAhC,GAAwD0B,UAAU,CAACR,MAAM,CAACjB,WAAR,CAAxF;AACA,cAAMY,gBAAgB,CAACQ,YAAD,EAAe,gBAAf,CAAtB;;AACA,YAAI,CAACH,MAAM,CAACF,EAAZ,EAAgB;AACd,gBAAMW,qBAAqB,GAAG;AAC5BC,YAAAA,aAAa,EAAEP,YAAY,CAACI,MADA;AAE5BI,YAAAA,WAAW,EAAEX,MAAM,CAACf,YAFQ;AAG5B2B,YAAAA,YAAY,EAAG,GAAEZ,MAAM,CAAC3B,UAAW,eAHP;AAI5BwC,YAAAA,WAAW,EAAEb,MAAM,CAAC3B,UAJQ;AAK5ByC,YAAAA,QAAQ,EAAEd,MAAM,CAACf,YALW;AAM5Bc,YAAAA,SAAS,EAAEI,YAAY,CAACJ,SANI;AAO5BX,YAAAA,OAAO,EAAEY,MAAM,CAACZ,OAPY;AAQ5BD,YAAAA,WAAW,EAAEa,MAAM,CAACb;AARQ,WAA9B;AAUA,gBAAMQ,gBAAgB,CAACc,qBAAD,EAAwB,sBAAxB,CAAtB;AACD;;AACDR,QAAAA,SAAS,CAAC,EAAD,CAAT;;AACA,YAAID,MAAM,CAACF,EAAX,EAAe;AACbL,UAAAA,OAAO,CAACsB,MAAR;AACD;;AACDb,QAAAA,SAAS,CAAC;AAAEc,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,GAAG,EAAE;AAAnB,SAAD,CAAT;AACD,OAnCD,CAmCE,OAAOC,KAAP,EAAc;AACdhB,QAAAA,SAAS,CAAC;AAAEc,UAAAA,IAAI,EAAE,KAAR;AAAeC,UAAAA,GAAG,EAAG,UAASC,KAAM;AAApC,SAAD,CAAT;AACD;AACF,KA3CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA6CG,CAAC;AACAlB,IAAAA,MADA;AAEAmB,IAAAA,MAFA;AAGAC,IAAAA,YAHA;AAIAC,IAAAA,aAJA;AAKAC,IAAAA,MALA;AAMAC,IAAAA,OANA;AAOAC,IAAAA,YAPA;AAQAC,IAAAA,UARA;AASAC,IAAAA;AATA,GAAD,kBAWC;AACE,IAAA,SAAS,EAAE9B,OAAO,CAAC+B,IADrB;AAEE,IAAA,MAAM,EAAC,MAFT;AAGE,IAAA,EAAE,EAAC,gBAHL;AAIE,IAAA,QAAQ,EAAEP,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,UAAU,EAAC,SAJb;AAKE,IAAA,SAAS,EAAC,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQID,MAAM,IAAIA,MAAM,CAACF,GAAjB,iBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAEE,MAAM,CAACH,IAAP,GAAc,SAAd,GAA0B,OADrC;AAEE,IAAA,OAAO,EAAEG,MAAM,CAACF,GAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATN,EAgBIS,YAAY,iBAAK,oBAAC,sBAAD;AAAwB,IAAA,IAAI,EAAE,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBrB,eAkBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAC,KAA/B;AAAqC,IAAA,OAAO,EAAE,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,IAAI,EAAC,aAJP;AAKE,IAAA,KAAK,EAAC,UALR;AAME,IAAA,EAAE,EAAC,aANL;AAOE,IAAA,QAAQ,EAAGE,KAAD,IAAW;AACnBP,MAAAA,aAAa,CAAC,aAAD,EAAgBO,KAAK,CAACC,MAAN,CAAaC,KAA7B,CAAb;AACAT,MAAAA,aAAa,CAAC,SAAD,EAAY,EAAZ,CAAb;AACD,KAVH;AAYE,IAAA,KAAK,EAAErB,MAAM,CAACb,WAZhB;AAaE,IAAA,KAAK,EAAEmC,MAAM,CAACnC,WAAP,IAAsBoC,OAAO,CAACpC,WAbvC;AAcE,IAAA,UAAU,EAAEoC,OAAO,CAACpC,WAAR,IAAuBmC,MAAM,CAACnC,WAd5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGI,UAAU,CAACwC,GAAX,CAAe,CAACC,QAAD,EAAWC,KAAX,kBACd,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAsB,IAAA,KAAK,EAAED,QAAQ,CAAClC,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkC,QAAQ,CAACnD,GADZ,CADD,CAhBH,CADF,CADF,eAyBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,IAAI,EAAC,SAJP;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,EAAE,EAAC,SANL;AAOE,IAAA,QAAQ,EAAE2C,YAPZ;AAQE,IAAA,KAAK,EAAExB,MAAM,CAACZ,OARhB;AASE,IAAA,KAAK,EAAEkC,MAAM,CAAClC,OAAP,IAAkBmC,OAAO,CAACnC,OATnC;AAUE,IAAA,UAAU,EAAEmC,OAAO,CAACnC,OAAR,IAAmBkC,MAAM,CAAClC,OAVxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGI,qBAAqB,CAAC0C,MAAtB,CAA6B,CAAC;AAAE/C,IAAAA;AAAF,GAAD,KAAqBA,WAAW,KAAKa,MAAM,CAACb,WAAzE,EAAsF4C,GAAtF,CAA0F,CAACI,YAAD,EAAeF,KAAf,kBACzF,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAsB,IAAA,KAAK,EAAEE,YAAY,CAACrC,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGqC,YAAY,CAACtD,GADhB,CADD,CAbH,CADF,CAzBF,CAlBF,eAiEE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,eAAe,EAAE;AAAEuD,MAAAA,MAAM,EAAE;AAAV,KAHnB;AAIE,IAAA,OAAO,EAAC,UAJV;AAKE,IAAA,EAAE,EAAC,cALL;AAME,IAAA,IAAI,EAAC,cANP;AAOE,IAAA,KAAK,EAAC,cAPR;AAQE,IAAA,KAAK,EAAEpC,MAAM,CAACf,YARhB;AASE,IAAA,QAAQ,EAAEuC,YATZ;AAUE,IAAA,MAAM,EAAEC,UAVV;AAWE,IAAA,KAAK,EAAEH,MAAM,CAACrC,YAAP,IAAuBsC,OAAO,CAACtC,YAXxC;AAYE,IAAA,UAAU,EAAEsC,OAAO,CAACtC,YAAR,IAAwBqC,MAAM,CAACrC,YAZ7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjEF,eAkFE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,EAAE,EAAC,YAJL;AAKE,IAAA,IAAI,EAAC,YALP;AAME,IAAA,KAAK,EAAC,YANR;AAOE,IAAA,KAAK,EAAEe,MAAM,CAAC3B,UAPhB;AAQE,IAAA,QAAQ,EAAEmD,YARZ;AASE,IAAA,MAAM,EAAEC,UATV;AAUE,IAAA,KAAK,EAAEH,MAAM,CAACjD,UAAP,IAAqBkD,OAAO,CAAClD,UAVtC;AAWE,IAAA,UAAU,EAAEkD,OAAO,CAAClD,UAAR,IAAsBiD,MAAM,CAACjD,UAX3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGgB,aAAa,CAAC0C,GAAd,CAAkB,CAAC1D,UAAD,EAAagE,cAAb,kBACjB,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,cAAf;AAA+B,IAAA,KAAK,EAAEhE,UAAU,CAACyB,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzB,UAAU,CAACiE,YADd,CADD,CAbH,CADF,CAlFF,eAuGE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,EAAE,EAAC,aAHL;AAIE,IAAA,IAAI,EAAC,aAJP;AAKE,IAAA,KAAK,EAAC,aALR;AAME,IAAA,KAAK,EAAEtC,MAAM,CAACvB,WANhB;AAOE,IAAA,QAAQ,EAAE+C,YAPZ;AAQE,IAAA,MAAM,EAAEC,UARV;AASE,IAAA,KAAK,EAAEH,MAAM,CAAC7C,WAAP,IAAsB8C,OAAO,CAAC9C,WATvC;AAUE,IAAA,UAAU,EAAE8C,OAAO,CAAC9C,WAAR,IAAuB6C,MAAM,CAAC7C,WAV5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAvGF,eAqHE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,EAAE,EAAC,eAHL;AAIE,IAAA,IAAI,EAAC,eAJP;AAKE,IAAA,KAAK,EAAC,eALR;AAME,IAAA,KAAK,EAAEuB,MAAM,CAACpB,aANhB;AAOE,IAAA,QAAQ,EAAE4C,YAPZ;AAQE,IAAA,MAAM,EAAEC,UARV;AASE,IAAA,KAAK,EAAEH,MAAM,CAAC1C,aAAP,IAAwB2C,OAAO,CAAC3C,aATzC;AAUE,IAAA,UAAU,EAAE2C,OAAO,CAAC3C,aAAR,IAAyB0C,MAAM,CAAC1C,aAV9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArHF,eAmIE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,EAAE,EAAC,OAJL;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,KAAK,EAAC,OANR;AAOE,IAAA,KAAK,EAAEoB,MAAM,CAACpB,aAAP,GAAuBoB,MAAM,CAACvB,WAPvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnIF,eA8IE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,EAAE,EAAC,aAHL;AAIE,IAAA,IAAI,EAAC,aAJP;AAKE,IAAA,KAAK,EAAC,aALR;AAME,IAAA,KAAK,EAAEuB,MAAM,CAACjB,WANhB;AAOE,IAAA,QAAQ,EAAEyC,YAPZ;AAQE,IAAA,MAAM,EAAEC,UARV;AASE,IAAA,KAAK,EAAEH,MAAM,CAACvC,WAAP,IAAsBwC,OAAO,CAACxC,WATvC;AAUE,IAAA,UAAU,EAAEwC,OAAO,CAACxC,WAAR,IAAuBuC,MAAM,CAACvC,WAV5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA9IF,eA4JE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,EAAE,EAAC,aAHL;AAIE,IAAA,IAAI,EAAC,aAJP;AAKE,IAAA,KAAK,EAAC,aALR;AAME,IAAA,KAAK,EAAEiB,MAAM,CAAClB,WANhB;AAOE,IAAA,QAAQ,EAAE0C,YAPZ;AAQE,IAAA,MAAM,EAAEC,UARV;AASE,IAAA,KAAK,EAAEH,MAAM,CAACxC,WAAP,IAAsByC,OAAO,CAACzC,WATvC;AAUE,IAAA,UAAU,EAAEyC,OAAO,CAACzC,WAAR,IAAuBwC,MAAM,CAACxC,WAV5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA5JF,eA0KE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAEc,OAAO,CAAC2C,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,SAAS,eAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJb;AAKE,IAAA,OAAO,EAAE,MAAM9C,OAAO,CAACsB,MAAR,EALjB;AAME,IAAA,gBAAgB,MANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF,eAaE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,IAAI,EAAC,QAJP;AAKE,IAAA,SAAS,eAAE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALb;AAME,IAAA,IAAI,EAAC,gBANP;AAOE,IAAA,QAAQ,EAAEW,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAbF,CA1KF,CANF,CAxDJ,CADF;AAyQD,CAzRD;;AA2RA,eAAepC,qBAAf","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CustomSnackbar from '../CustomSnackbar'\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../commonStyles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\"; import {\n  getMeterTypes,\n} from \"../../assets/commonAssets.js\";\nimport * as Yup from \"yup\";\nimport { format, startOfToday } from \"date-fns\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\n\nconst MeterReadingSchema = Yup.object().shape({\n  meter_type: Yup.string().trim().required(\"Meter Type is required\"),\n  prior_value: Yup.number().required(\"Prior Value is required\").min(0,\"Amount must be greater than 0\"),\n  current_value: Yup.number().min(Yup.ref('prior_value'), 'Current Value must be greater than prior value').required(\"Current Value is required\"),\n  unit_charge: Yup.number().min(0,\"Amount must be greater than 0\").required(\"Unit Charge is Required\"),\n  base_charge: Yup.number().min(0,\"Amount must be greater than 0\").default(0),\n  reading_date: Yup.date().required(\"Reading Date Required\"),\n  property_id: Yup.string().trim().required(\"Property is Required\"),\n  unit_id: Yup.string().trim().required(\"Unit is Required\"),\n});\n\nconst METER_OPTIONS = getMeterTypes();\n\nconst MeterReadingInputForm = ({ properties, unitsWithActiveLeases, history, meterReadingToEdit, handleItemSubmit }) => {\n\n  const classes = commonStyles();\n  const meterReadingValues = {\n    id: meterReadingToEdit.id,\n    property_id: meterReadingToEdit.property_id || '',\n    unit_id: meterReadingToEdit.unit_id || '',\n    reading_date: meterReadingToEdit.reading_date || defaultDate,\n    prior_value: meterReadingToEdit.prior_value || '',\n    current_value: meterReadingToEdit.current_value || '',\n    base_charge: meterReadingToEdit.base_charge || '',\n    unit_charge: meterReadingToEdit.unit_charge || '',\n    meter_type: meterReadingToEdit.meter_type || '',\n    tenant_id: meterReadingToEdit.tenant_id || '',\n  }\n\n  return (\n    <Formik\n      initialValues={meterReadingValues}\n      enableReinitialize\n      validationSchema={MeterReadingSchema}\n      onSubmit={async (values, { resetForm, setStatus }) => {\n        try {\n          const meterReading = {\n            id: values.id,\n            meter_type: values.meter_type,\n            prior_value: values.prior_value,\n            current_value: values.current_value,\n            base_charge: values.base_charge,\n            unit_charge: values.unit_charge,\n            unit_id: values.unit_id,\n            property_id: values.property_id,\n            tenant_id: unitsWithActiveLeases.find(unit => unit.id === values.unit_id).tenant_id,\n            reading_date: values.reading_date,\n          };\n          //assign usage values to meter reading\n          meterReading.usage = values.current_value - values.prior_value\n          meterReading.amount = (meterReading.usage * parseFloat(values.unit_charge)) + parseFloat(values.base_charge)\n          await handleItemSubmit(meterReading, \"meter_readings\")\n          if (!values.id) {\n            const newMeterReadingCharge = {\n              charge_amount: meterReading.amount,\n              charge_date: values.reading_date,\n              charge_label: `${values.meter_type} meter charge`,\n              charge_type: values.meter_type,\n              due_date: values.reading_date,\n              tenant_id: meterReading.tenant_id,\n              unit_id: values.unit_id,\n              property_id: values.property_id,\n            }\n            await handleItemSubmit(newMeterReadingCharge, \"transactions-charges\")\n          }\n          resetForm({})\n          if (values.id) {\n            history.goBack();\n          }\n          setStatus({ sent: true, msg: \"Meter reading and charge saved.\" })\n        } catch (error) {\n          setStatus({ sent: false, msg: `Error! ${error}.` })\n        }\n      }}\n    >\n      {({\n        values,\n        status,\n        handleSubmit,\n        setFieldValue,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n      }) => (\n        <form\n          className={classes.form}\n          method=\"post\"\n          id=\"meterInputForm\"\n          onSubmit={handleSubmit}\n        >\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n          >\n            {\n              status && status.msg && (\n                <CustomSnackbar\n                  variant={status.sent ? \"success\" : \"error\"}\n                  message={status.msg}\n                />\n              )\n            }\n            {\n              isSubmitting && (<CustomCircularProgress open={true} />)\n            }\n            <Grid item container direction=\"row\" spacing={2}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  variant=\"outlined\"\n                  name=\"property_id\"\n                  label=\"Property\"\n                  id=\"property_id\"\n                  onChange={(event) => {\n                    setFieldValue('property_id', event.target.value)\n                    setFieldValue('unit_id', '')\n                  }\n                  }\n                  value={values.property_id}\n                  error={errors.property_id && touched.property_id}\n                  helperText={touched.property_id && errors.property_id}\n                >\n                  {properties.map((property, index) => (\n                    <MenuItem key={index} value={property.id}>\n                      {property.ref}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  select\n                  variant=\"outlined\"\n                  name=\"unit_id\"\n                  label=\"Unit\"\n                  id=\"unit_id\"\n                  onChange={handleChange}\n                  value={values.unit_id}\n                  error={errors.unit_id && touched.unit_id}\n                  helperText={touched.unit_id && errors.unit_id}\n\n                >\n                  {unitsWithActiveLeases.filter(({ property_id }) => property_id === values.property_id).map((propertyUnit, index) => (\n                    <MenuItem key={index} value={propertyUnit.id}>\n                      {propertyUnit.ref}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                type=\"date\"\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n                id=\"reading_date\"\n                name=\"reading_date\"\n                label=\"Reading Date\"\n                value={values.reading_date}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.reading_date && touched.reading_date}\n                helperText={touched.reading_date && errors.reading_date}\n\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                select\n                variant=\"outlined\"\n                id=\"meter_type\"\n                name=\"meter_type\"\n                label=\"Meter Type\"\n                value={values.meter_type}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.meter_type && touched.meter_type}\n                helperText={touched.meter_type && errors.meter_type}\n              >\n                {METER_OPTIONS.map((meter_type, meterTypeIndex) => (\n                  <MenuItem key={meterTypeIndex} value={meter_type.id}>\n                    {meter_type.displayValue}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"prior_value\"\n                name=\"prior_value\"\n                label=\"Prior Value\"\n                value={values.prior_value}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.prior_value && touched.prior_value}\n                helperText={touched.prior_value && errors.prior_value}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"current_value\"\n                name=\"current_value\"\n                label=\"Current Value\"\n                value={values.current_value}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.current_value && touched.current_value}\n                helperText={touched.current_value && errors.current_value}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                disabled\n                variant=\"outlined\"\n                id=\"usage\"\n                name=\"usage\"\n                label=\"Usage\"\n                value={values.current_value - values.prior_value}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"base_charge\"\n                name=\"base_charge\"\n                label=\"Base Charge\"\n                value={values.base_charge}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.base_charge && touched.base_charge}\n                helperText={touched.base_charge && errors.base_charge}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                id=\"unit_charge\"\n                name=\"unit_charge\"\n                label=\"Unit Charge\"\n                value={values.unit_charge}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={errors.unit_charge && touched.unit_charge}\n                helperText={touched.unit_charge && errors.unit_charge}\n              />\n            </Grid>\n            <Grid item container className={classes.buttonBox}>\n              <Grid item>\n                <Button\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => history.goBack()}\n                  disableElevation\n                >\n                  Cancel\n                  </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<SaveIcon />}\n                  form=\"meterInputForm\"\n                  disabled={isSubmitting}\n                >\n                  Save\n                  </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default MeterReadingInputForm;\n"]},"metadata":{},"sourceType":"module"}