{"ast":null,"code":"var _jsxFileName = \"/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/DashBoard.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport PageHeading from \"../components/PageHeading\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Bar } from 'react-chartjs-2';\nimport { commonStyles } from '../components/commonStyles';\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { format, getYear, startOfYear, endOfYear, startOfToday, parse, eachMonthOfInterval, isSameMonth } from \"date-fns\";\nconst options = {\n  responsive: true,\n  tooltips: {\n    mode: 'label'\n  },\n  elements: {\n    line: {\n      fill: false\n    }\n  },\n  scales: {\n    yAxes: [{\n      ticks: {\n        min: 0\n      }\n    }]\n  }\n};\nconst FilterYearSchema = Yup.object().shape({\n  filter_year: Yup.number().typeError(\"Year must be a number!\").required(\"Year is required\").min(2000, \"Sorry, were not present then.\").max(2100, \"Sorry, but we won't be here during those times.\").integer()\n});\nvar monthsInYear = eachMonthOfInterval({\n  start: startOfYear(startOfToday()),\n  end: endOfYear(startOfToday())\n});\nconst currentYear = new Date().getFullYear();\n\nlet DashBoardPage = props => {\n  const classes = commonStyles();\n  const {\n    sales,\n    customerAccountDeposits\n  } = props;\n  const [salesForCurrentYear, setFilteredSalesByYear] = useState([]);\n  const [depositsForCurrentYear, setFilteredDepositsByYear] = useState([]);\n  useEffect(() => {\n    const accountDepositsForCurrentYear = customerAccountDeposits.filter(({\n      deposit_date\n    }) => getYear(parse(deposit_date, 'yyyy-MM-dd', new Date())) === currentYear);\n    setChargesItems(accountDepositsForCurrentYear);\n  }, [customerAccountDeposits]);\n  useEffect(() => {\n    const salesForCurrentYear = sales.filter(({\n      sale_date\n    }) => getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === currentYear);\n    setSaleItems(salesForCurrentYear);\n  }, [sales]);\n\n  const setFilteredItemsByYear = filterYear => {\n    setFilteredSalesByYear(sales.filter(({\n      sale_date\n    }) => getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === filterYear));\n    setFilteredDepositsByYear(customerAccountDeposits.filter(({\n      deposit_date\n    }) => getYear(parse(deposit_date, 'yyyy-MM-dd', new Date())) === filterYear));\n  }; //GET THE TOTAL NUMBER OF SALES\n\n\n  const TOTAL_SALES = salesForCurrentYear.reduce((total, currentSale) => total + (parseFloat(currentSale.sale_price) * parseFloat(currentSale.sale_quantity) || 0), 0); //GET THE TOTAL NUMBER OF CUSTOMER DEPOSITS\n\n  const TOTAL_CUSTOMER_DEPOSITS = depositsForCurrentYear.reduce((total, currentDeposit) => total + (parseFloat(currentDeposit.deposit_amount) || 0), 0); // CREATE A UNIT OCCUPANCY DISPLAY DATA ARRAY INSTEAD OF REPEATING MULTIPLE ELEMENTS\n\n  const SALE_SUMMARY_DATA = [{\n    title: \"Total Sales\",\n    value: TOTAL_SALES\n  }, {\n    title: \"Total Client Deposits\",\n    value: TOTAL_CUSTOMER_DEPOSITS\n  }, {\n    title: \"Total Credit\",\n    value: TOTAL_SALES - TOTAL_CUSTOMER_DEPOSITS\n  }]; //GET THE TOTAL PAYMENTS FOR EACH MONTH IN THE SELECTED YEAR\n\n  const totalEachMonthSales = monthsInYear.map(monthDate => {\n    //get sales recorded in the same month and year as monthDate\n    return salesForCurrentYear.filter(sale => {\n      const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date());\n      return isSameMonth(monthDate, saleDate);\n    }).reduce((total, currentSale) => total + (parseFloat(currentSale.sale_price) * parseFloat(currentSale.sale_quantity) || 0), 0);\n  }); // MAKE AN OBJECT FOR SHOWING AN INCOME GRAPH, BY MONTH, LATER\n  // LABELS ARE MONTHS IN THE YEAR IN SHORT FORMAT\n\n  const rentIncomeData = {\n    datasets: [{\n      data: totalEachMonthSales,\n      label: 'Monthly Sales',\n      type: 'bar',\n      fill: false,\n      backgroundColor: '#71B37C',\n      borderColor: '#71B37C',\n      hoverBackgroundColor: '#71B37C',\n      hoverBorderColor: '#71B37C'\n    }],\n    labels: monthsInYear.map(monthDate => format(monthDate, 'MMMM'))\n  };\n  const totalEachMonthClientDeposits = monthsInYear.map(monthDate => {\n    //get sales recorded in the same month and year as monthDate\n    return depositsForCurrentYear.filter(clientDeposit => {\n      const depositDate = parse(clientDeposit.deposit_date, 'yyyy-MM-dd', new Date());\n      return isSameMonth(monthDate, depositDate);\n    }).reduce((total, clientDeposit) => total + (parseFloat(clientDeposit.deposit_amount) || 0), 0);\n  });\n  rentIncomeData.datasets.push({\n    data: totalEachMonthClientDeposits,\n    label: 'Monthly Customer Deposits',\n    type: 'line',\n    borderColor: '#EC932F',\n    fill: false,\n    backgroundColor: '#EC932F',\n    pointBorderColor: '#EC932F',\n    pointBackgroundColor: '#EC932F',\n    pointHoverBackgroundColor: '#EC932F',\n    pointHoverBorderColor: '#EC932F'\n  });\n  return /*#__PURE__*/React.createElement(Layout, {\n    pageTitle: \"Overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    direction: \"column\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageHeading, {\n    text: \"Overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    direction: \"column\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    border: 1,\n    borderRadius: \"borderRadius\",\n    borderColor: \"grey.400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      filter_year: currentYear\n    },\n    validationSchema: FilterYearSchema,\n    onSubmit: values => {\n      setFilteredItemsByYear(parseInt(values.filter_year));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, ({\n    values,\n    handleSubmit,\n    touched,\n    errors,\n    handleChange,\n    handleBlur\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    id: \"yearFilterForm\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    id: \"filter_year\",\n    name: \"filter_year\",\n    label: \"Year\",\n    value: values.filter_year,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: errors.filter_year && touched.filter_year,\n    helperText: touched.filter_year && errors.filter_year,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    form: \"yearFilterForm\",\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"medium\",\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 40\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 27\n    }\n  }, \"SEARCH\"))))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    alignItems: \"stretch\",\n    justify: \"space-around\",\n    key: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 2,\n    direction: \"row\",\n    alignItems: \"stretch\",\n    justify: \"space-around\",\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, SALE_SUMMARY_DATA.map((unitOccupancyData, index) => /*#__PURE__*/React.createElement(InfoDisplayPaper, {\n    key: index,\n    xs: 12,\n    title: unitOccupancyData.title,\n    value: unitOccupancyData.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, \"Monthly Sales & Deposits\"), /*#__PURE__*/React.createElement(Bar, {\n    data: rentIncomeData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    customerAccountDeposits: state.customerAccountDeposits,\n    sales: state.sales\n  };\n};\n\nexport default connect(mapStateToProps)(DashBoardPage);","map":{"version":3,"sources":["/home/brianmuciri/Projects/farm-ledger-ld/src/Routes/DashBoard.js"],"names":["React","useEffect","useState","Layout","connect","PageHeading","InfoDisplayPaper","Grid","Typography","Box","MenuItem","Button","TextField","SearchIcon","Bar","commonStyles","Yup","Formik","format","getYear","startOfYear","endOfYear","startOfToday","parse","eachMonthOfInterval","isSameMonth","options","responsive","tooltips","mode","elements","line","fill","scales","yAxes","ticks","min","FilterYearSchema","object","shape","filter_year","number","typeError","required","max","integer","monthsInYear","start","end","currentYear","Date","getFullYear","DashBoardPage","props","classes","sales","customerAccountDeposits","salesForCurrentYear","setFilteredSalesByYear","depositsForCurrentYear","setFilteredDepositsByYear","accountDepositsForCurrentYear","filter","deposit_date","setChargesItems","sale_date","setSaleItems","setFilteredItemsByYear","filterYear","TOTAL_SALES","reduce","total","currentSale","parseFloat","sale_price","sale_quantity","TOTAL_CUSTOMER_DEPOSITS","currentDeposit","deposit_amount","SALE_SUMMARY_DATA","title","value","totalEachMonthSales","map","monthDate","sale","saleDate","rentIncomeData","datasets","data","label","type","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","labels","totalEachMonthClientDeposits","clientDeposit","depositDate","push","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","values","parseInt","handleSubmit","touched","errors","handleChange","handleBlur","form","unitOccupancyData","index","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport PageHeading from \"../components/PageHeading\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Bar } from 'react-chartjs-2';\nimport { commonStyles } from '../components/commonStyles'\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { format, getYear, startOfYear, endOfYear, startOfToday, parse, eachMonthOfInterval, isSameMonth } from \"date-fns\";\n\n\nconst options = {\n  responsive: true,\n  tooltips: {\n    mode: 'label'\n  },\n  elements: {\n    line: {\n      fill: false\n    }\n  },\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          min: 0,\n        }\n      }\n    ],\n  }\n};\n\nconst FilterYearSchema = Yup.object().shape({\n  filter_year: Yup.number()\n    .typeError(\"Year must be a number!\")\n    .required(\"Year is required\")\n    .min(2000, \"Sorry, were not present then.\")\n    .max(2100, \"Sorry, but we won't be here during those times.\")\n    .integer(),\n});\n\nvar monthsInYear = eachMonthOfInterval({\n  start: startOfYear(startOfToday()),\n  end: endOfYear(startOfToday()),\n})\n\n\nconst currentYear = new Date().getFullYear()\n\nlet DashBoardPage = (props) => {\n  const classes = commonStyles()\n  const { sales, customerAccountDeposits } = props;\n  const [salesForCurrentYear, setFilteredSalesByYear] = useState([]);\n  const [depositsForCurrentYear, setFilteredDepositsByYear] = useState([]);\n\n  useEffect(() => {\n    const accountDepositsForCurrentYear = customerAccountDeposits\n      .filter(({ deposit_date }) => getYear(parse(deposit_date, 'yyyy-MM-dd', new Date())) === currentYear)\n    setChargesItems(accountDepositsForCurrentYear);\n  }, [customerAccountDeposits]);\n\n  useEffect(() => {\n    const salesForCurrentYear = sales\n      .filter(({ sale_date }) => getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === currentYear)\n    setSaleItems(salesForCurrentYear);\n  }, [sales]);\n\n  const setFilteredItemsByYear = (filterYear) => {\n    setFilteredSalesByYear(\n      sales\n        .filter(({ sale_date }) => getYear(parse(sale_date, 'yyyy-MM-dd', new Date())) === filterYear)\n    );\n    setFilteredDepositsByYear(\n      customerAccountDeposits\n        .filter(({ deposit_date }) => getYear(parse(deposit_date, 'yyyy-MM-dd', new Date())) === filterYear)\n    );\n  };\n\n  //GET THE TOTAL NUMBER OF SALES\n  const TOTAL_SALES = salesForCurrentYear.reduce((total, currentSale) =>\n    total + ((parseFloat(currentSale.sale_price) * parseFloat(currentSale.sale_quantity)) || 0), 0);\n\n  //GET THE TOTAL NUMBER OF CUSTOMER DEPOSITS\n  const TOTAL_CUSTOMER_DEPOSITS = depositsForCurrentYear.reduce((total, currentDeposit) =>\n    total + (parseFloat(currentDeposit.deposit_amount) || 0), 0);\n\n\n  // CREATE A UNIT OCCUPANCY DISPLAY DATA ARRAY INSTEAD OF REPEATING MULTIPLE ELEMENTS\n  const SALE_SUMMARY_DATA = [\n    { title: \"Total Sales\", value: TOTAL_SALES },\n    { title: \"Total Client Deposits\", value: TOTAL_CUSTOMER_DEPOSITS },\n    { title: \"Total Credit\", value: (TOTAL_SALES - TOTAL_CUSTOMER_DEPOSITS) },\n  ]\n\n  //GET THE TOTAL PAYMENTS FOR EACH MONTH IN THE SELECTED YEAR\n  const totalEachMonthSales = monthsInYear.map((monthDate) => {\n    //get sales recorded in the same month and year as monthDate\n    return salesForCurrentYear\n      .filter((sale) => {\n        const saleDate = parse(sale.sale_date, 'yyyy-MM-dd', new Date())\n        return isSameMonth(monthDate, saleDate)\n      }).reduce((total, currentSale) =>\n\n        total + ((parseFloat(currentSale.sale_price) * parseFloat(currentSale.sale_quantity)) || 0), 0)\n  })\n  // MAKE AN OBJECT FOR SHOWING AN INCOME GRAPH, BY MONTH, LATER\n  // LABELS ARE MONTHS IN THE YEAR IN SHORT FORMAT\n  const rentIncomeData = {\n    datasets: [{\n      data: totalEachMonthSales, label: 'Monthly Sales', type: 'bar',\n      fill: false,\n      backgroundColor: '#71B37C',\n      borderColor: '#71B37C',\n      hoverBackgroundColor: '#71B37C',\n      hoverBorderColor: '#71B37C',\n    }],\n    labels: monthsInYear.map((monthDate) => format(monthDate, 'MMMM')),\n  }\n\n  const totalEachMonthClientDeposits = monthsInYear.map((monthDate) => {\n    //get sales recorded in the same month and year as monthDate\n    return depositsForCurrentYear\n      .filter((clientDeposit) => {\n        const depositDate = parse(clientDeposit.deposit_date, 'yyyy-MM-dd', new Date())\n        return isSameMonth(monthDate, depositDate)\n      }).reduce((total, clientDeposit) => total + (parseFloat(clientDeposit.deposit_amount) || 0), 0)\n  })\n  rentIncomeData.datasets.push({\n    data: totalEachMonthClientDeposits,\n    label: 'Monthly Customer Deposits', type: 'line', borderColor: '#EC932F', fill: false,\n    backgroundColor: '#EC932F',\n    pointBorderColor: '#EC932F',\n    pointBackgroundColor: '#EC932F',\n    pointHoverBackgroundColor: '#EC932F',\n    pointHoverBorderColor: '#EC932F',\n  })\n\n  return (\n    <Layout pageTitle=\"Overview\">\n      <Grid container justify=\"center\" direction=\"column\" spacing={4}>\n        <Grid item key={0}>\n          <PageHeading text={\"Overview\"} />\n        </Grid>\n        <Grid item container>\n          <Grid container item direction=\"column\" spacing={4}>\n            <Grid item>\n              <Box\n                border={1}\n                borderRadius=\"borderRadius\"\n                borderColor=\"grey.400\"\n              >\n                <Formik\n                  initialValues={{ filter_year: currentYear }}\n                  validationSchema={FilterYearSchema}\n                  onSubmit={(values) => {\n                    setFilteredItemsByYear(parseInt(values.filter_year));\n                  }}\n                >\n                  {({\n                    values,\n                    handleSubmit,\n                    touched,\n                    errors,\n                    handleChange,\n                    handleBlur,\n                  }) => (\n                    <form\n                      className={classes.form}\n                      id=\"yearFilterForm\"\n                      onSubmit={handleSubmit}\n                    >\n                      <Grid\n                        container\n                        spacing={2}\n                        alignItems=\"center\"\n                        justify=\"center\"\n                        direction=\"row\"\n                      >\n                        <Grid item>\n                          <TextField\n                            variant=\"outlined\"\n                            id=\"filter_year\"\n                            name=\"filter_year\"\n                            label=\"Year\"\n                            value={values.filter_year}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            error={errors.filter_year && touched.filter_year}\n                            helperText={\n                              touched.filter_year && errors.filter_year\n                            }\n                          />\n                        </Grid>\n                        <Grid item>\n                          <Button\n                            type=\"submit\"\n                            form=\"yearFilterForm\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<SearchIcon />}\n                          >\n                            SEARCH\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </form>\n                  )}\n                </Formik>\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid\n          item\n          container\n          spacing={2}\n          direction=\"row\"\n          alignItems=\"stretch\"\n          justify=\"space-around\"\n          key={3}\n        >\n        </Grid>\n        <Grid\n          item\n          container\n          spacing={2}\n          direction=\"row\"\n          alignItems=\"stretch\"\n          justify=\"space-around\"\n          key={2}\n        >\n          {\n            SALE_SUMMARY_DATA.map((unitOccupancyData, index) =>\n              <InfoDisplayPaper key={index} xs={12} title={unitOccupancyData.title} value={unitOccupancyData.value} />\n            )\n          }\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h6\" align=\"center\" gutterBottom>\n            Monthly Sales &amp; Deposits\n          </Typography>\n          <Bar\n            data={rentIncomeData}\n            options={options}>\n          </Bar>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    customerAccountDeposits: state.customerAccountDeposits,\n    sales: state.sales,\n  };\n};\n\nexport default connect(mapStateToProps)(DashBoardPage);\n"]},"metadata":{},"sourceType":"module"}